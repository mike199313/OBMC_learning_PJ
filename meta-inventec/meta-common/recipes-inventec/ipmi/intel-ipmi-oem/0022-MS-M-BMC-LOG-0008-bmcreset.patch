From 422e44753abadfb166530115a1bb56f3346cdd83 Mon Sep 17 00:00:00 2001
From: "sun.cwsun" <sun.cwsun@inventec.com>
Date: Wed, 18 May 2022 12:29:48 +0800
Subject: [PATCH 22/25] Bug 996 - [SW][Transformers][OpenBMC] MS M-BMC-LOG0008
 The BMC should generate an BMC Health SEL when BMC reset cold/warm

		-  The BMC should generate an BMC Health SEL when BMC reset cold/warm

	Root Cause:
        - none

    Solution/Change:
        [intel-ipmi-oem]
            - do MS SEL when mc reset warm
		[phosphor-ipmi-host]
			- do MS SEL when mc reset cold

    Entry Test:
	- ipmitool mc reset warm
	- ipmitool sel elist
	  ea | 05/23/98 | 02:49:02 UTC | Unknown BMC_health |  | Asserted
sysadmin@transformers:~# ipmitool sel get 0xea
SEL Record ID          : 00ea
 Record Type           : 02
 Timestamp             : 02:49:02 UTC 02:49:02 UTC
 Generator ID          : 0020
 EvM Revision          : 04
 Sensor Type           : Unknown
 Sensor Number         : b1
 Event Type            : OEM
 Event Direction       : Assertion Event
 Event Data (RAW)      : a802ff
 Description           :

Sensor ID              : BMC_health (0xb1)
 Entity ID             : 7.0
 Sensor Type (Discrete): Unknown

	- ipmitool mc reset cold
	- ipmitool sel elist
	  eb | 05/23/98 | 02:49:38 UTC | Unknown BMC_health |  | Asserted
	-ipmitool sel get 0xeb
	SEL Record ID          : 00eb
 Record Type           : 02
 Timestamp             : 02:49:38 UTC 02:49:38 UTC
 Generator ID          : 0020
 EvM Revision          : 04
 Sensor Type           : Unknown
 Sensor Number         : b1
 Event Type            : OEM
 Event Direction       : Assertion Event
 Event Data (RAW)      : a801ff
 Description           :

Sensor ID              : BMC_health (0xb1)
 Entity ID             : 7.0
 Sensor Type (Discrete): Unknown
---
 src/globalcommands.cpp | 75 +++++++++++++++++++++++++++---------------
 1 file changed, 49 insertions(+), 26 deletions(-)

diff --git a/src/globalcommands.cpp b/src/globalcommands.cpp
index 98efc56..a8b41f2 100755
--- a/src/globalcommands.cpp
+++ b/src/globalcommands.cpp
@@ -175,13 +175,56 @@ static int8_t resetfailedUnit(std::string unit)
 }
 
 
-void reset_self(bool resetself) {
+void warmreset_thread(void) {
+
+    auto result = getConfigureFromJsonFile(warmResetConfFile);
+    auto resetself = std::get<0>(result);
+    auto configure = std::get<1>(result);
+    auto ulist = std::get<2>(result);
+    for (auto& [path, contains]: configure) {
+        auto snlist = getServiceNameFromPath(path, contains);
+        for(auto& sn : snlist) {
+            auto unit = getServiceUnit(sn);
+            if(std::count(ulist.begin(), ulist.end(), unit)==0) {
+                resetfailedUnit(unit);
+                restartUnit(unit);
+                resetfailedUnit(unit);
+                std::fprintf(stderr, "[Warm Reset] Info: Restart \"%s\" [%s] success\n",sn.c_str(), unit.c_str());
+            }
+        }
+    }
+
+    for(auto& unit : ulist) {
+        resetfailedUnit(unit);
+        restartUnit(unit);
+        resetfailedUnit(unit);
+        std::fprintf(stderr, "[Warm Reset] Info: Restart [%s] success\n",unit.c_str());
+    }
+
     if(resetself) {
         std::system("systemctl restart phosphor-ipmi-host &");
     }
 }
 
 
+void generateMSBMCHealthSEL(char const *SensorPath, std::vector<uint8_t> eventData, bool assert)
+{
+    std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
+    uint16_t generateID = 0x20;
+
+    auto writeSEL = bus->new_method_call( "xyz.openbmc_project.Logging.IPMI", 
+                                          "/xyz/openbmc_project/Logging/IPMI", 
+                                          "xyz.openbmc_project.Logging.IPMI", 
+                                          "IpmiSelAdd");
+    writeSEL.append("BMCHelath SEL", std::string(SensorPath), eventData, assert, generateID);
+    try {
+        bus->call(writeSEL);
+    } catch (sdbusplus::exception_t &e) {
+        std::fprintf(stderr, "[Warm Reset] ERROR: IpmiSelAdd BMCHealth failed\n");
+    }
+}
+
+
 void generateSELEvent(char const *SensorPath, std::vector<uint8_t> eventData, bool assert)
 {
     std::shared_ptr<sdbusplus::asio::connection> bus = getSdBus();
@@ -202,34 +245,14 @@ void generateSELEvent(char const *SensorPath, std::vector<uint8_t> eventData, bo
 
 ipmi::RspType<> ipmiGlobalWarmReset()
 {
-    auto result = getConfigureFromJsonFile(warmResetConfFile);
-    auto resetself = std::get<0>(result);
-    auto configure = std::get<1>(result);
-    auto ulist = std::get<2>(result);
-    for (auto& [path, contains]: configure) {
-        auto snlist = getServiceNameFromPath(path, contains);
-        for(auto& sn : snlist) {
-            auto unit = getServiceUnit(sn);
-            if(std::count(ulist.begin(), ulist.end(), unit)==0) {
-                resetfailedUnit(unit);
-                restartUnit(unit);
-                resetfailedUnit(unit);
-                std::fprintf(stderr, "[Warm Reset] Info: Restart \"%s\" [%s] success\n",sn.c_str(), unit.c_str());
-            }
-        }
-    }
-
-    for(auto& unit : ulist) {
-        resetfailedUnit(unit);
-        restartUnit(unit);
-        resetfailedUnit(unit);
-        std::fprintf(stderr, "[Warm Reset] Info: Restart [%s] success\n",unit.c_str());
-    }
-
     std::vector<uint8_t> warmReset{0x02, 0xFF, 0xFF};
     generateSELEvent("/xyz/openbmc_project/sensor/specific/system_boot_restart_initiated/bmc_warm_reset", warmReset, true);
 
-    std::thread(reset_self, resetself).detach();
+    fprintf(stderr, "%s:%d warm reset bmc health SEL\n", __func__, __LINE__);
+    std::vector<uint8_t> eventData{0xA8, 0x02, 0xFF};
+    generateMSBMCHealthSEL("/xyz/openbmc_project/sensors/oem_event_70h/oem_e0h/BMC_health", eventData, true);
+
+    std::thread(warmreset_thread).detach();
 
     return ipmi::responseSuccess();
 }
-- 
2.33.0

