From c28a9fb61225447502439b4563669ac2b9a9b9f3 Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Thu, 2 Jun 2022 07:59:16 +0000
Subject: [PATCH 24/25] Implement SEL timestamp correction

Symptom/Reason:
- Implement SEL timestamp correction

Root Cause:
- SEL timestamp could be invalid during system boot up time

Solution/Change:
- [intel-ipmi-oem]
  - Correct timestamp before return by Get SEL Entry command

Entry Test:
- Get PEF list
  - ipmitool sel list
---
 src/storagecommands.cpp | 162 ++++++++++++++++++++++++++++++++++++++++
 1 file changed, 162 insertions(+)

diff --git a/src/storagecommands.cpp b/src/storagecommands.cpp
index c5830b6..d5184f2 100644
--- a/src/storagecommands.cpp
+++ b/src/storagecommands.cpp
@@ -146,6 +146,9 @@ static const uint16_t FRU_MAX_SIZE = 0x400;
 static const uint8_t FRU_UPDATE_TIME = 60;
 static const int BUFFER_LENGTH = 20;
 
+// <record_begin, record_end, last_invalid, first_normal>
+static std::vector<std::tuple<uint16_t, uint16_t, uint32_t, uint32_t>> timeDicts;
+
 ManagedObjectType frus;
 
 // we unfortunately have to build a map of hashes in case there is a
@@ -1151,6 +1154,134 @@ static bool findSELEntry(const int recordID,
     return false;
 }
 
+static bool initSection(const uint16_t section_start,
+                         const std::filesystem::path& file,
+                         uint32_t& timestamp)
+{
+    bool found = false;
+    std::string targetEntry;
+
+    // Record ID is the first entry field following the timestamp. It is
+    // preceded by a space and followed by a comma
+    std::string search = " " + std::to_string(section_start) + ",";
+
+    std::ifstream logStream(file);
+    if (!logStream.is_open())
+    {
+        return false;
+    }
+
+    while (std::getline(logStream, targetEntry))
+    {
+        // Check if the record ID matches
+        if (targetEntry.find(search) != std::string::npos)
+        {
+            found = true;
+            break;
+        }
+    }
+
+    if (!found)
+    {
+        // Record ID not found in this file
+        return false;
+    }
+
+    size_t space;
+    std::string entryTimestamp;
+    std::tm timeStruct = {};
+    uint32_t timestamp_prev = ipmi::sel::invalidTimeStamp;
+    uint32_t timestamp_normal = ipmi::sel::invalidTimeStamp;
+    uint16_t section_end = 0;
+    std::tuple<uint16_t, uint16_t, uint32_t, uint32_t> section = {};
+    found = false;
+
+    while (std::getline(logStream, targetEntry))
+    {
+        // The format of the ipmi_sel message is "<Timestamp>
+        // <ID>,<Type>,<EventData>,[<Generator ID>,<Path>,<Direction>]".
+        // First get the Timestamp
+        space = targetEntry.find_first_of(" ");
+
+        if (space == std::string::npos)
+        {
+            // Skip to next line
+            continue;
+        }
+
+        entryTimestamp = targetEntry.substr(0, space);
+
+        // Get the timestamp
+        std::istringstream entryStream(entryTimestamp);
+
+        if (entryStream >> std::get_time(&timeStruct, "%Y-%m-%dT%H:%M:%S"))
+        {
+            uint32_t timestamp_tmp = std::mktime(&timeStruct);
+            if (timeStruct.tm_year > 100)
+            {
+                // The line with correct timestamp is located
+                size_t entryStart = targetEntry.find_first_not_of(" ", space);
+
+                if (entryStart == std::string::npos)
+                {
+                    // Skip to next line
+                    continue;
+                }
+
+                std::string_view entry(targetEntry);
+                entry.remove_prefix(entryStart);
+                std::vector<std::string> targetEntryFields;
+                boost::split(targetEntryFields, entry, boost::is_any_of(","),
+                            boost::token_compress_on);
+                std::string& recordIDStr = targetEntryFields[0];
+
+                try
+                {
+                    section_end = std::stoul(recordIDStr);
+                }
+                catch (const std::invalid_argument&)
+                {
+                    // Skip to next line
+                    continue;
+                }
+
+                timestamp_normal = timestamp_tmp;
+                found = true;
+                break;
+            }
+            else
+            {
+                timestamp_prev = timestamp_tmp;
+            }
+        }
+    }
+
+    bool updated = false;
+
+    if (found)
+    {
+        for (auto& [begin, end, last_invalid, time] : timeDicts)
+        {
+            if (section_end == end)
+            {
+                // Re-new section start ID
+                begin = section_start;
+                updated = true;
+                timestamp = time - (last_invalid - timestamp);
+                break;
+            }
+        }
+
+        if (!updated)
+        {
+            timeDicts.emplace_back(section_start, section_end, timestamp_prev, timestamp_normal);
+            timestamp = timestamp_normal - (timestamp_prev - timestamp);
+        }
+    }
+
+    return found;
+}
+
 static uint16_t
     getNextRecordID(const uint16_t recordID,
                     const std::vector<std::filesystem::path>& selLogFiles)
@@ -1357,6 +1488,34 @@ ipmi::RspType<uint16_t, // Next Record ID
             timestamp = std::mktime(&timeStruct);
         }
 
+        if (timeStruct.tm_year < 100)
+        {
+            bool section_found = false;
+
+            // Need to perform time correction
+            for (const auto& [begin, end, last_invalid, time] : timeDicts)
+            {
+                if (recordID >= begin && recordID < end)
+                {
+                    // Section match found
+                    timestamp = time - (last_invalid - timestamp);
+                    section_found = true;
+                    break;
+                }
+            }
+
+            if (!section_found)
+            {
+                for (const std::filesystem::path& file : selLogFiles)
+                {
+                    if (initSection(recordID, file, timestamp))
+                    {
+                        break;
+                    }
+                }
+            }
+        }
+
         // For "Add SEL command" from IpmiSelAddOem log 9 Bytes data
         if ((targetEntryFields.size() == 4) && (eventDataBytes.size() == 9))
         {
@@ -1539,6 +1698,9 @@ ipmi::RspType<uint8_t> ipmiStorageClearSEL(ipmi::Context::ptr ctx,
     // cleared
     cancelSELReservation();
 
+    // Clear timestamp cache
+    timeDicts.clear();
+
     // Save the erase time
     intel_oem::ipmi::sel::erase_time::save();
 
-- 
2.33.0

