From 5d6c60566d92e9de27d05031bd3f1ccbedc773df Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Mon, 7 Mar 2022 03:00:29 +0000
Subject: [PATCH 07/30] FRU - Command modify

- Replace sensor commands ( used phosphor-ipmi-host before )
- Modify fru functions to rescan periodically
- Modify fru with limit size

[Symptom/Reason]
    1. The fru functions are related to sensor ( sdr list ), thus
       we change to use sensor commands under intel-ipmi-oem as well
    2. If we change fru data without ipmitool, the change might be
       missed when we don't rescan
    3. if the size of fru file we write is bigger than the one before,
       last parts will be missing

[Root Cause]
    1. ipmitool will get fru size before we write, which will be the
       smaller size of original file

[Solution/Changes]
    1.Remove the command outs of sensor related functions
    2.add rescan rules for fru cache
    3.set a fru size limit for all fru

[Entry Test]

- fru print
sysadmin@transformers:~# ipmitool fru print
FRU Device Description : Builtin FRU Device (ID 0)
 Chassis Type          : Rack Mount Chassis
 Chassis Part Number   :
 Chassis Serial        :
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Inventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194504
 Board Extra           :  X02
 Product Manufacturer  : Inventec
 Product Name          : TRANSFORMERS
 Product Part Number   :
 Product Version       :
 Product Serial        :
 Product Asset Tag     :
 Product Extra         :

FRU Device Description : TRANSFORMERS     (ID 1)
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : INVENTEC
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04

FRU Device Description : TRANSFORMERS     (ID 2)
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Inventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04

- fru read
sysadmin@transformers:~# ipmitool fru read 1 test2.bin
Fru Size         : 2048 bytes
Done
sysadmin@transformers:~# hexdump -C test2.bin
00000000  01 00 00 01 00 00 00 fe  01 0f 00 ef f2 c8 d8 49  |...............I|
00000010  6e 76 65 6e 74 65 63 20  20 20 20 20 20 20 20 20  |nventec         |
00000020  20 20 20 20 20 20 20 d8  54 52 41 4e 53 46 4f 52  |       .TRANSFOR|
00000030  4d 45 52 53 20 20 20 20  20 20 20 20 20 20 20 20  |MERS            |
00000040  d8 20 20 20 20 20 20 20  20 20 20 20 20 20 20 20  |.               |
00000050  20 20 20 20 20 20 20 20  20 d4 31 33 39 35 41 33  |         .1395A3|
00000060  31 39 34 37 30 31 20 20  20 20 20 20 20 20 c9 20  |194701        . |
00000070  20 20 20 20 20 20 20 20  c4 20 58 30 34 c1 00 c3  |        . X04...|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000800

- fru edit
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Inventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04
sysadmin@transformers:~# ipmitool fru edit 1 field b 0 INVENTEC
String size are not equal, resizing fru to fit new string
Read All FRU area
(skip)
Done.
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : INVENTEC
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04
sysadmin@transformers:~#

- fru write
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : INVENTEC
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04
sysadmin@transformers:~# ipmitool fru write 1 Transformers_RunBMC_A3194701_fru_v02_20210114_CRC32_A81E7ACC.bin
Fru Size         : 2048 bytes
Size to Write    : 128 bytes
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Inventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04
sysadmin@transformers:~#

- fru size ( raw command )
sysadmin@transformers:~# ipmitool raw 0xa 0x10 0
 00 08 00

- fru read ( raw command )
sysadmin@transformers:~# ipmitool raw 0xa 0x11 0x1 0x0 0x0 0xff
 ff 01 00 00 01 00 00 00 fe 01 0f 00 ef f2 c8 d8
 49 6e 76 65 6e 74 65 63 20 20 20 20 20 20 20 20
 20 20 20 20 20 20 20 20 d8 54 52 41 4e 53 46 4f
 52 4d 45 52 53 20 20 20 20 20 20 20 20 20 20 20
 20 d8 20 20 20 20 20 20 20 20 20 20 20 20 20 20
 20 20 20 20 20 20 20 20 20 20 d4 31 33 39 35 41
 33 31 39 34 37 30 31 20 20 20 20 20 20 20 20 c9
 20 20 20 20 20 20 20 20 20 c4 20 58 30 34 c1 00
 c3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

- fru write ( raw command )
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Inventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04
sysadmin@transformers:~# ipmitool raw 0xa 0x12 0x1 0xf 0x0 0x50
 00
sysadmin@transformers:~# ipmitool fru print 1
 Board Mfg Date        : Thu Jan 14 09:51:00 2021 UTC
 Board Mfg             : Pnventec
 Board Product         : TRANSFORMERS
 Board Serial          :
 Board Part Number     : 1395A3194701
 Board Extra           :  X04

FRU - Change the way to generate fru id Change fru size limit and checking rules for multi-record area

Symptom/Reason :
    1.Fru id is changed after we modify product name of fru data
    2.Original fru size limit might cover places to write MAC address, which shouldn't be overwitten
    3.Original ways to check end of multi-record area might failed while writing new data

Root Cause:
    1.Currently we are getting fru devices from dbus service
      'xyz.openbmc_project.FruDevice', and it's object oath is
      created from product name data. If the data is changed,
      this might change the order, and influence the fru id.
    2.N/A
    3.The fru write command will write a small part of fru
      each time, if check the multi-record area data before
      we get the entire data, might cause error

Solution/Change:
    [storagecommands.cpp]
        1.Change the way to get fru id, and use map to make it
          stable after generated.
        2.Change fru size limit
        3.Change to check multi-record area data before calling
          the dbus service to write fru in the end

Entry Test:
    1.ipmitool fru print
    2.ipmitool fru read
      ex: ipmitool fru read 0 test.bin
    3.ipmitool fru write
      ex: ipmitool fru write 0 Fru.bin
    4.ipmitool fru edit
      ex: ipmitool fru edit 1 field b 1 "TRANSFORMERS       "
    5.ipmitool raw 0xa 0x12
      ex: ipmitool raw 0xa 0x12 0x1 0xf 0x0 0x50
    6.ipmitool raw 0xa 0x11
      ex: ipmitool raw 0xa 0x11 0x1 0x0 0x0 0xff

Bug 1020 - Cat empty FRU bin file to all Fru, but still got sensor from sdr list then selftest result is wrong

Symptom/Reason :
- Exclude type12 records if FRU is empty.

Root Cause:
- In addition to virtual sensors, there are two static type12 records in OpenBMC.

Solution/Change:
- intel-ipmi-oem.

Entry Test:
```
sysadmin@transformers:~# cat empty_fru_new > /sys/bus/i2c/devices/3-0050/eeprom
sysadmin@transformers:~# cat empty_fru_new > /sys/bus/i2c/devices/8-0051/eeprom
sysadmin@transformers:~# cat empty_fru_new > /sys/bus/i2c/devices/8-0053/eeprom

sysadmin@transformers:~# reboot

sysadmin@transformers:~# systemctl stop xyz.openbmc_project.*sensor.service
sysadmin@transformers:~# ipmitool raw 0x06 0x04
 57 4c

```
---
 include/sdrutils.hpp    |   3 +-
 src/storagecommands.cpp | 195 ++++++++++++++++++++++++++++------------
 2 files changed, 140 insertions(+), 58 deletions(-)

diff --git a/include/sdrutils.hpp b/include/sdrutils.hpp
index 4f33c52..8c7a143 100644
--- a/include/sdrutils.hpp
+++ b/include/sdrutils.hpp
@@ -519,7 +519,8 @@ static inline const std::string* getSensorConfigurationInterface(
     {
         if (entry == "xyz.openbmc_project.Configuration.AspeedFan" ||
             entry == "xyz.openbmc_project.Configuration.I2CFan" ||
-            entry == "xyz.openbmc_project.Configuration.NuvotonFan")
+            entry == "xyz.openbmc_project.Configuration.NuvotonFan"||
+            entry == "xyz.openbmc_project.Configuration.TMP468")
         {
             return &entry;
         }
diff --git a/src/storagecommands.cpp b/src/storagecommands.cpp
index de54497..4517f2c 100644
--- a/src/storagecommands.cpp
+++ b/src/storagecommands.cpp
@@ -32,6 +32,8 @@
 #include <sdbusplus/message/types.hpp>
 #include <sdbusplus/timer.hpp>
 
+#include <thread>
+#include <map>
 #include <filesystem>
 #include <fstream>
 #include <iostream>
@@ -114,6 +116,8 @@ using ManagedEntry = std::pair<sdbusplus::message::object_path, ObjectType>;
 using GetObjectType =
     std::vector<std::pair<std::string, std::vector<std::string>>>;
 
+static std::map<std::string,int> fru_id_map;
+
 constexpr static const char* fruDeviceServiceName =
     "xyz.openbmc_project.FruDevice";
 constexpr static const size_t writeTimeoutSeconds = 10;
@@ -131,8 +135,11 @@ static uint16_t writeBus = 0xFFFF;
 static uint8_t writeAddr = 0XFF;
 
 std::unique_ptr<phosphor::Timer> writeTimer = nullptr;
+std::unique_ptr<phosphor::Timer> updateTimer = nullptr;
 static std::vector<sdbusplus::bus::match_t> fruMatches;
 
+static const uint16_t FRU_MAX_SIZE = 0x400;
+static const uint8_t FRU_UPDATE_TIME = 60;
 static const int BUFFER_LENGTH = 20;
 
 ManagedObjectType frus;
@@ -151,6 +158,44 @@ bool writeFru()
     {
         return true;
     }
+
+    FRUHeader* header = reinterpret_cast<FRUHeader*>(fruCache.data());
+
+    int areaLength = 0;
+    int lastRecordStart = std::max(
+        {header->internalOffset, header->chassisOffset, header->boardOffset,
+         header->productOffset, header->multiRecordOffset});
+    lastRecordStart *= 8; // header starts in are multiples of 8 bytes
+
+    if (header->multiRecordOffset)
+    {
+        // This FRU has a MultiRecord Area
+        uint8_t endOfList = 0;
+        // Walk the MultiRecord headers until the last record
+        while (!endOfList)
+        {
+            if(lastRecordStart >= FRU_MAX_SIZE ){
+                fprintf(stderr,"Can't find the end of multi record area\n");
+                lastDevId = 0xFF;
+                fruCache.clear();
+                return false;
+            }
+            // The MSB in the second byte of the MultiRecord header signals
+            // "End of list"
+
+            endOfList = fruCache[lastRecordStart + 1] & 0x80;
+            // Third byte in the MultiRecord header is the length
+            areaLength = fruCache[lastRecordStart + 2];
+            // This length is in bytes (not 8 bytes like other headers)
+            areaLength += 5; // The length omits the 5 byte header
+            if (!endOfList)
+            {
+                // Next MultiRecord header
+                lastRecordStart += areaLength;
+            }
+        }
+    }
+
     std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
     sdbusplus::message_t writeFru = dbus->new_method_call(
         fruDeviceServiceName, "/xyz/openbmc_project/FruDevice",
@@ -165,6 +210,8 @@ bool writeFru()
         // todo: log sel?
         phosphor::logging::log<phosphor::logging::level::ERR>(
             "error writing fru");
+        lastDevId = 0xFF;
+        fruCache.clear();
         return false;
     }
     writeBus = 0xFFFF;
@@ -179,6 +226,7 @@ void createTimers()
 
 void recalculateHashes()
 {
+    bool base_fru_found = false;
 
     deviceHashes.clear();
     devicePath.clear();
@@ -195,11 +243,13 @@ void recalculateHashes()
 
         auto busFind = fruIface->second.find("BUS");
         auto addrFind = fruIface->second.find("ADDRESS");
+        auto productNameFind = fruIface->second.find("BOARD_PRODUCT_NAME");
         if (busFind == fruIface->second.end() ||
-            addrFind == fruIface->second.end())
+            addrFind == fruIface->second.end() || 
+            productNameFind == fruIface->second.end())
         {
             phosphor::logging::log<phosphor::logging::level::INFO>(
-                "fru device missing Bus or Address",
+                "fru device missing Bus, Address, or Product Name",
                 phosphor::logging::entry("FRU=%s", fru.first.str.c_str()));
             continue;
         }
@@ -213,37 +263,40 @@ void recalculateHashes()
             chassisType = std::get<std::string>(chassisFind->second);
         }
 
-        uint8_t fruHash = 0;
-        if (chassisType.compare(chassisTypeRackMount) != 0)
-        {
-            fruHash = hasher(fru.first.str);
-            // can't be 0xFF based on spec, and 0 is reserved for baseboard
-            if (fruHash == 0 || fruHash == 0xFF)
-            {
-                fruHash = 1;
+        uint8_t fru_id = 0;
+        std::string fru_addr_string = std::to_string(fruBus)+std::to_string(fruAddr);
+
+        if( fru_id_map.find(fru_addr_string)== fru_id_map.end() ){
+            if(base_fru_found==true){   // baseboard fru already exists
+                fru_id = fru_id_map.size();
+            }else if (chassisType.compare(chassisTypeRackMount) != 0 ){
+                fru_id = fru_id_map.size()+1;
+            }else{
+                base_fru_found = true;  //fru id 0 is reserved for baseboard fru
             }
+            fru_id_map[fru_addr_string] = fru_id;
         }
         std::pair<uint16_t, uint8_t> newDev(fruBus, fruAddr);
 
         bool emplacePassed = false;
-        while (!emplacePassed)
+        if (fru_id_map[fru_addr_string] != 0XFF)  // can't be 0xFF based on spec
         {
-            auto resp = deviceHashes.emplace(fruHash, newDev);
+            auto resp = deviceHashes.emplace(fru_id_map[fru_addr_string], newDev);
 
-            devicePath.emplace(fruHash, fru.first);
+            devicePath.emplace(fru_id_map[fru_addr_string], fru.first);
 
             emplacePassed = resp.second;
             if (!emplacePassed)
             {
-                fruHash++;
-                // can't be 0xFF based on spec, and 0 is reserved for
-                // baseboard
-                if (fruHash == 0XFF)
-                {
-                    fruHash = 0x1;
-                }
+                fprintf(stderr,"Failed to add fru data on %x %x to id %x\n",
+                    fruBus, fruAddr, fru_id_map[fru_addr_string]);
             }
         }
+        else
+        {
+            fprintf(stderr,"Wrong fru id %x\n",fru_id_map[fru_addr_string]);
+            fru_id_map.erase(fru_addr_string);
+        }
     }
 }
 
@@ -371,6 +424,7 @@ ipmi::Cc getFru(ipmi::Context::ptr ctx, uint8_t devId)
         return ipmi::ccResponseError;
     }
 
+    fruCache.resize(FRU_MAX_SIZE);
     lastDevId = devId;
     return ipmi::ccSuccess;
 }
@@ -472,6 +526,15 @@ ipmi::RspType<uint8_t,             // Count
         return ipmi::responseInvalidFieldRequest();
     }
 
+    if(writeTimer->isRunning()){
+        writeTimer->stop();
+        if (!writeFru())
+        {
+            fprintf(stderr, "Failed to update fru before read %x %x\n", writeBus, writeAddr);
+        }
+        usleep(500000);
+    }
+
     ipmi::Cc status = getFru(ctx, fruDeviceId);
 
     if (status != ipmi::ccSuccess)
@@ -526,13 +589,10 @@ ipmi::RspType<uint8_t>
     ipmi::Cc status = getFru(ctx, fruDeviceId);
     if (status != ipmi::ccSuccess)
     {
+        fprintf(stderr,"failed to get fru %x\n", fruDeviceId);
         return ipmi::response(status);
     }
     int lastWriteAddr = fruInventoryOffset + writeLen;
-    if (fruCache.size() < lastWriteAddr)
-    {
-        fruCache.resize(fruInventoryOffset + writeLen);
-    }
 
     std::copy(dataToWrite.begin(), dataToWrite.begin() + writeLen,
               fruCache.begin() + fruInventoryOffset);
@@ -549,28 +609,7 @@ ipmi::RspType<uint8_t>
              header->productOffset, header->multiRecordOffset});
         lastRecordStart *= 8; // header starts in are multiples of 8 bytes
 
-        if (header->multiRecordOffset)
-        {
-            // This FRU has a MultiRecord Area
-            uint8_t endOfList = 0;
-            // Walk the MultiRecord headers until the last record
-            while (!endOfList)
-            {
-                // The MSB in the second byte of the MultiRecord header signals
-                // "End of list"
-                endOfList = fruCache[lastRecordStart + 1] & 0x80;
-                // Third byte in the MultiRecord header is the length
-                areaLength = fruCache[lastRecordStart + 2];
-                // This length is in bytes (not 8 bytes like other headers)
-                areaLength += 5; // The length omits the 5 byte header
-                if (!endOfList)
-                {
-                    // Next MultiRecord header
-                    lastRecordStart += areaLength;
-                }
-            }
-        }
-        else
+        if (!header->multiRecordOffset)
         {
             // This FRU does not have a MultiRecord Area
             // Get the length of the area in multiples of 8 bytes
@@ -579,12 +618,12 @@ ipmi::RspType<uint8_t>
                 // second byte in record area is the length
                 areaLength = fruCache[lastRecordStart + 1];
                 areaLength *= 8; // it is in multiples of 8 bytes
+                if ( (lastWriteAddr >= (areaLength + lastRecordStart)) && (fruInventoryOffset<(areaLength + lastRecordStart)) )
+                {
+                    atEnd = true;
+                }
             }
         }
-        if (lastWriteAddr >= (areaLength + lastRecordStart))
-        {
-            atEnd = true;
-        }
     }
     uint8_t countWritten = 0;
 
@@ -628,16 +667,10 @@ ipmi::RspType<uint16_t, // inventorySize
         return ipmi::responseInvalidFieldRequest();
     }
 
-    ipmi::Cc ret = getFru(ctx, fruDeviceId);
-    if (ret != ipmi::ccSuccess)
-    {
-        return ipmi::response(ret);
-    }
-
     constexpr uint8_t accessType =
         static_cast<uint8_t>(GetFRUAreaAccessType::byte);
 
-    return ipmi::responseSuccess(fruCache.size(), accessType);
+    return ipmi::responseSuccess(FRU_MAX_SIZE, accessType);
 }
 
 ipmi_ret_t getFruSdrCount(ipmi::Context::ptr ctx, size_t& count)
@@ -646,6 +679,50 @@ ipmi_ret_t getFruSdrCount(ipmi::Context::ptr ctx, size_t& count)
     return IPMI_CC_OK;
 }
 
+bool UpdateFruData(){
+    std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+
+    sdbusplus::message::message writeFru = dbus->new_method_call(
+        fruDeviceServiceName, "/xyz/openbmc_project/FruDevice",
+        "xyz.openbmc_project.FruDeviceManager", "ReScan");
+    try
+    {
+        sdbusplus::message::message writeFruResp = dbus->call(writeFru);
+    }
+    catch (sdbusplus::exception_t&)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "error update fru\n");
+        return false;
+    }
+    boost::asio::spawn(*getIoContext(), [](boost::asio::yield_context yield) {
+        replaceCacheFru(getSdBus(), yield);
+    });
+
+    return true;
+}
+
+void createUpdateTimers()
+{
+    updateTimer = std::make_unique<phosphor::Timer>(UpdateFruData);
+    updateTimer->start(std::chrono::duration_cast<std::chrono::microseconds>(
+            std::chrono::seconds(FRU_UPDATE_TIME)));
+}
+
+void checkTimer()
+{
+    while(true){
+        sleep(FRU_UPDATE_TIME);
+        if (updateTimer->isRunning())
+        {
+            continue;
+        }else{
+            updateTimer->start(std::chrono::duration_cast<std::chrono::microseconds>(
+            std::chrono::seconds(FRU_UPDATE_TIME)));
+        }
+    }
+}
+
 ipmi_ret_t getFruSdrs(ipmi::Context::ptr ctx, size_t index,
                       get_sdr::SensorDataFruRecord& resp)
 {
@@ -1607,6 +1684,10 @@ void registerStorageFunctions()
 {
     createTimers();
     startMatch();
+    createUpdateTimers();
+    std::thread timer_check_thread = std::thread(checkTimer);
+    timer_check_thread.detach();
+
 
     // <Get FRU Inventory Area Info>
     ipmi::registerHandler(ipmi::prioOemBase, ipmi::netFnStorage,
-- 
2.34.1

