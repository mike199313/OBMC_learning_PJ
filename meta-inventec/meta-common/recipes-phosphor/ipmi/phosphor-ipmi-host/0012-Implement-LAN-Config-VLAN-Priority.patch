From dba37f3a537ade4aa7a2917c78e5ee213f52a35d Mon Sep 17 00:00:00 2001
From: "Lin.TommySC" <lin.tommysc@inventec.com>
Date: Tue, 25 May 2021 05:58:05 +0000
Subject: [PATCH 12/31] Implement LAN Config VLAN Priority

Symptom/Reason :
    - Implement LAN Config VLAN Priority

Root Cause:
    - N/A

Solution/Change:
    [phospher-dbus-interfaces]
        - Add Priority property in xyz.openbmc_project.Network.VLAN interface
    [phospher-ipmi-config]
        - Add vlan_priority field in lan_config.json
    [phospher-ipmi-host]
        - Use xyz.openbmc_project.Network.VLAN interface to get/set VLAN Priority
    [phospher-network]
        - Use vconfig command to set VLAN priority
        - Read/Write vlan_priority value from/to lan_config.json

Entry Test:
    - Set VLAN id
        ipmitool raw 0x0c 0x01 0x01 0x14 0x64 0x80
    - Set VLAN priority
        ipmitool raw 0x0c 0x01 0x01 0x15 0x5
    - Get VLAN priority
        ipmitool raw 0x0c 0x02 0x01 0x15 0x00 0x00

---
 transporthandler.cpp | 63 ++++++++++++++++++++++++++++++++++++++++++++
 transporthandler.hpp |  2 ++
 2 files changed, 65 insertions(+)

diff --git a/transporthandler.cpp b/transporthandler.cpp
index 802dfb4..8f46886 100644
--- a/transporthandler.cpp
+++ b/transporthandler.cpp
@@ -954,6 +954,43 @@ void getDestAddress(uint8_t idx, std::string& address)
     }
 }
 
+/** @brief Gets the vlan priority configured on the interface
+ *
+ *  @param[in] bus    - The bus object used for lookups
+ *  @param[in] params - The parameters for the channel
+ *  @return VLAN priority or the standard 0 for no VLAN
+ */
+uint8_t getVLANPriority(sdbusplus::bus::bus& bus, const ChannelParams& params)
+{
+    // VLAN devices will always have a separate logical object
+    if (params.ifPath == params.logicalPath)
+    {
+        return 0;
+    }
+
+    auto priority = std::get<uint8_t>(getDbusProperty(
+        bus, params.service, params.logicalPath, INTF_VLAN, "Priority"));
+    return priority;
+}
+
+/** @brief Gets the vlan priority configured on the interface
+ *
+ *  @param[in] bus    - The bus object used for lookups
+ *  @param[in] params - The parameters for the channel
+ *  @return VLAN priority or the standard 0 for no VLAN
+ */
+void setVLANPriority(sdbusplus::bus::bus& bus, const ChannelParams& params, uint8_t priority)
+{
+    // VLAN devices will always have a separate logical object
+    if (params.ifPath == params.logicalPath)
+    {
+        return;
+    }
+
+    setDbusProperty(bus, params.service, params.logicalPath, INTF_VLAN,
+                    "Priority", priority);
+}
+
 RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
                  uint8_t parameter, message::Payload& req)
 {
@@ -1453,6 +1490,25 @@ RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
             configureDestAddress(client_idx, address);
             return responseSuccess();
         }
+        case LanParam::VLANPriority:
+        {
+            uint3_t priority = 0;
+            uint5_t reserved = 0;
+
+            if (req.unpack(priority) || req.unpack(reserved) ||
+                !req.fullyUnpacked())
+            {
+                return responseReqDataLenInvalid();
+            }
+
+            if (reserved)
+            {
+                return responseInvalidFieldRequest();
+            }
+
+            channelCall<setVLANPriority>(channel, (uint8_t)priority);
+            return responseSuccess();
+        }
     }
 
     if ((parameter >= oemCmdStart) && (parameter <= oemCmdEnd))
@@ -1819,6 +1875,13 @@ RspType<message::Payload> getLan(Context::ptr ctx, uint4_t channelBits,
             }
             return responseRetBytesUnavailable();
         }
+        case LanParam::VLANPriority:
+        {
+            uint8_t priority = channelCall<getVLANPriority>(channel);
+            priority &= VLAN_PRIORITY_MASK;
+            ret.pack(priority);
+            return responseSuccess(std::move(ret));
+        }
     }
 
     if ((parameter >= oemCmdStart) && (parameter <= oemCmdEnd))
diff --git a/transporthandler.hpp b/transporthandler.hpp
index 13823ac..73fd927 100644
--- a/transporthandler.hpp
+++ b/transporthandler.hpp
@@ -77,6 +77,7 @@ enum class LanParam : uint8_t
     DestinationNum = 17,
     DestinationAddresses = 19,
     VLANId = 20,
+    VLANPriority = 21,
     CiphersuiteSupport = 22,
     CiphersuiteEntries = 23,
     cipherSuitePrivilegeLevels = 24,
@@ -726,6 +727,7 @@ constexpr auto LAN_CFG_FILE = "/usr/share/ipmi-providers/lan_config.json";
 // Config name for LAN Config Parameters
 constexpr auto LAN_CONFIG_COMM_STR = "community_str";
 constexpr auto LAN_CONFIG_PRI_RMCP_PORT = "primary_rmcp_port";
+constexpr uint8_t VLAN_PRIORITY_MASK = 0x07;
 
 /** @brief get config value from LAN configuration file.
  *  @param[in] name - config name.
-- 
2.25.1