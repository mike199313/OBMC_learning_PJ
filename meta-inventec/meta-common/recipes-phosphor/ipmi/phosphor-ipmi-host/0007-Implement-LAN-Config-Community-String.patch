From 6e58df43102247bf8295ab3f91ef2cfad6a24aad Mon Sep 17 00:00:00 2001
From: "Lin.TommySC" <lin.tommysc@inventec.com>
Date: Wed, 28 Apr 2021 08:06:17 +0000
Subject: [PATCH 07/31] Implement LAN Config Community String

Symptom/Reason :
    - Implement LAN Config Community String

Root Cause:
    - N/A

Solution/Change:
    [phospher-ipmi-config]
        - Create lan_config.json to store lan config parameters
        - Add community_str config name with default value "public"
    [phospher-ipmi-host]
        - Add entry for command handler and read/write fonfig value from/to lan_config.json
    [phospher-snmp]
        - Reads community_str value from lan_config.json before sending trap

Entry Test:
    - Get Community String
        ipmitool raw 0x0c 0x02 0x01 0x10 0x00 0x00
    - Set Community String
        ipmitool raw 0x0c 0x01 0x01 0x10 0x50 0x74 0x74 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

---
 transporthandler.cpp | 25 ++++++++++++++++++
 transporthandler.hpp | 62 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 87 insertions(+)

diff --git a/transporthandler.cpp b/transporthandler.cpp
index dce3fc2..5bb06d3 100644
--- a/transporthandler.cpp
+++ b/transporthandler.cpp
@@ -1283,6 +1283,22 @@ RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,
             channelCall<setIPv6HopProperty>(channel, limit);
             return responseSuccess();
         }
+        case LanParam::CommunityStr:
+        {
+            std::array<uint8_t, 18> bytes;
+            std::array<uint8_t, 19> raw_str = {0};
+            if (req.unpack(bytes) != 0 || !req.fullyUnpacked())
+            {
+                return responseReqDataLenInvalid();
+            }
+            std::copy(bytes.begin(), bytes.end(), raw_str.begin());
+            std::string comm_str((char*)raw_str.data());
+            if (updateConfigValue<std::string>(LAN_CONFIG_COMM_STR, comm_str))
+            {
+                return responseResponseError();
+            }
+            return responseSuccess();
+        }
     }
 
     if ((parameter >= oemCmdStart) && (parameter <= oemCmdEnd))
@@ -1576,6 +1592,15 @@ RspType<message::Payload> getLan(Context::ptr ctx, uint4_t channelBits,
             ret.pack(static_cast<uint8_t>(limit));
             return responseSuccess(std::move(ret));
         }
+        case LanParam::CommunityStr:
+        {
+            std::string comm_str("public");
+            std::array<uint8_t, 18> resp = {0};
+            loadConfigValue<std::string>(LAN_CONFIG_COMM_STR, comm_str);
+            std::copy(comm_str.begin(), comm_str.end(), resp.begin());
+            ret.pack(dataRef(resp));
+            return responseSuccess(std::move(ret));
+        }
     }
 
     if ((parameter >= oemCmdStart) && (parameter <= oemCmdEnd))
diff --git a/transporthandler.hpp b/transporthandler.hpp
index 9175fab..01fabbc 100644
--- a/transporthandler.hpp
+++ b/transporthandler.hpp
@@ -37,6 +37,8 @@
 #include <xyz/openbmc_project/Network/EthernetInterface/server.hpp>
 #include <xyz/openbmc_project/Network/IP/server.hpp>
 #include <xyz/openbmc_project/Network/Neighbor/server.hpp>
+#include <iomanip>
+#include <nlohmann/json.hpp>
 
 namespace ipmi
 {
@@ -54,6 +56,7 @@ constexpr auto INTF_NEIGHBOR_CREATE_STATIC =
     "xyz.openbmc_project.Network.Neighbor.CreateStatic";
 constexpr auto INTF_VLAN = "xyz.openbmc_project.Network.VLAN";
 constexpr auto INTF_VLAN_CREATE = "xyz.openbmc_project.Network.VLAN.Create";
+using namespace phosphor::logging;
 
 /** @brief IPMI LAN Parameters */
 enum class LanParam : uint8_t
@@ -67,6 +70,7 @@ enum class LanParam : uint8_t
     SubnetMask = 6,
     Gateway1 = 12,
     Gateway1MAC = 13,
+    CommunityStr = 16,
     VLANId = 20,
     CiphersuiteSupport = 22,
     CiphersuiteEntries = 23,
@@ -706,5 +710,63 @@ enum class SolConfParam : uint8_t
 constexpr uint8_t ipmiCCParamNotSupported = 0x80;
 constexpr uint8_t ipmiCCWriteReadParameter = 0x82;
 
+// Config file for LAN Config Parameters
+constexpr auto LAN_CFG_FILE = "/usr/share/ipmi-providers/lan_config.json";
+// Config name for LAN Config Parameters
+constexpr auto LAN_CONFIG_COMM_STR = "community_str";
+
+/** @brief get config value from LAN configuration file.
+ *  @param[in] name - config name.
+ *  @param[in] val - value of the given config name.
+ */
+template <typename T> int loadConfigValue(const std::string& name, T& val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        log<level::ERR>("loadConfigValue : Cannot open config path");
+        return -1;
+    }
+
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        log<level::ERR>("loadConfigValue JSON parser failure");
+        return -2;
+    }
+
+    if (data.contains(name))
+    {
+        val = (T)data[name];
+        return 0;
+    }
+
+    return -3;
+}
+
+template <typename T> int updateConfigValue(const std::string& name, T val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        log<level::ERR>("loadConfigValue : Cannot open config path");
+        return -1;
+    }
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        log<level::ERR>("loadConfigValue JSON parser failure");
+        return -2;
+    }
+
+    data[name] = val;
+    std::ofstream configStream(LAN_CFG_FILE);
+    configStream << std::setw(4) << data << std::endl;
+    configStream.close();
+    return 0;
+}
+
 } // namespace transport
 } // namespace ipmi
-- 
2.25.1