From aee8fa55c7b87bb79108759bfd0372c8ca5b471d Mon Sep 17 00:00:00 2001
From: cwsun <sun.cwsun@inventec.com>
Date: Tue, 24 Aug 2021 17:03:27 +0800
Subject: [PATCH 19/31] Support IPMI v1.5 Session Management

    Symptom/Reason :
        - The OpenBMC does not support IPMI v1.5 RMCP type Session Management

    Root Cause:
        - The OpenBMC does not support IPMI v1.5 RMCP type Session Management

    Solution/Change:
        [phosphor-dbus-interfaces]
            - add rmcpType into SessionInfo.interface.yaml
              -- the rmcpType will indicate if the session is RMCP or RMCP+ type.

        [phosphor-ipmi-host]
            - support RMCP type session of "Get Session Info" command
              -- ipmiAppGetSessionInfo()
              -- getSessionDetails()
              -- remove garbage code
              -- fix the wrong userID caused by wrong data struct definition

        [phosphor-ipmi-net]
            - When user assign into the system via netipmid and register a session.
              The registered session will be record its type of RMCP or RMCP+ and be kept
              in the dbus system.

    Entry Test:
        - Open RMCP(-Ilan) and RMCP+(-Ilanplus) sessions with IPMI shell
          -- ipmitool -I lan -H myqemu -U root -P 0penBmc -p 2623 shell
          -- ipmitool -I lanplus -H myqemu -U root -P 0penBmc -p 2623 -C17 shell
          -- ipmitool -I lanplus -H myqemu -U root -P 0penBmc -p 2623 -C17 shell
          -- ipmitool -I lan -H myqemu -U root -P 0penBmc -p 2623

        - then view the session info
          session info all
          >
            session handle                : 13
            slot count                    : 15
            active sessions               : 4
            user id                       : 2
            privilege level               : ADMINISTRATOR
            session type                  : IPMIv1.5
            channel number                : 0x01

            session handle                : 3
            slot count                    : 15
            active sessions               : 4
            user id                       : 2
            privilege level               : ADMINISTRATOR
            session type                  : IPMIv1.5
            channel number                : 0x01

            session handle                : 1
            slot count                    : 15
            active sessions               : 4
            user id                       : 2
            privilege level               : ADMINISTRATOR
            session type                  : IPMIv2/RMCP+
            channel number                : 0x01

            session handle                : 14
            slot count                    : 15
            active sessions               : 4
            user id                       : 2
            privilege level               : ADMINISTRATOR
            session type                  : IPMIv2/RMCP+
            channel number                : 0x01

---
 apphandler.cpp                | 5 +++--
 user_channel/usercommands.cpp | 9 +++++++--
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/apphandler.cpp b/apphandler.cpp
index 0b2bfa9..db4ceec 100644
--- a/apphandler.cpp
+++ b/apphandler.cpp
@@ -1122,7 +1122,7 @@ static constexpr uint8_t macAddrLen = 6;
  *  @param port - uint16_t remote port
  */
 using SessionDetails =
-    std::tuple<uint2_t, uint6_t, uint4_t, uint4_t, uint4_t, uint4_t, uint32_t,
+    std::tuple<uint6_t, uint2_t, uint4_t, uint4_t, uint4_t, uint4_t, uint32_t,
                std::array<uint8_t, macAddrLen>, uint16_t>;

 /** @brief get session details for a given session
@@ -1168,7 +1168,8 @@ ipmi::Cc getSessionDetails(ipmi::Context::ptr ctx, const std::string& service,
         // std::get<3>(details) = 0; // (default constructed to 0)
         std::get<4>(details) =
             ipmi::mappedVariant<uint8_t>(sessionProps, "ChannelNum", 0xff);
-        constexpr uint4_t rmcpPlusProtocol = 1;
+        uint4_t rmcpPlusProtocol =
+                    static_cast<uint4_t>(ipmi::mappedVariant<uint8_t>(sessionProps, "rmcpType", 0xFF));
         std::get<5>(details) = rmcpPlusProtocol;
         std::get<6>(details) =
             ipmi::mappedVariant<uint32_t>(sessionProps, "RemoteIPAddr", 0);
diff --git a/user_channel/usercommands.cpp b/user_channel/usercommands.cpp
index 4ea8c4b..5d2f43b 100644
--- a/user_channel/usercommands.cpp
+++ b/user_channel/usercommands.cpp
@@ -430,7 +430,12 @@ ipmi::RspType<uint8_t,  // channel number

     constexpr bool extDataSupport = true; // true for IPMI 2.0 extensions
     constexpr bool reserved3 = false;
-    constexpr uint6_t rmcpAuthTypes = 0; // IPMI 1.5 auth types - not supported
+
+    uint6_t rmcpAuthTypes =  1<<4; //cwsun: IPMI 1.5 auth types MD5 / PASSWORD supported
+    if (getChannelSessionSupport(channel) == EChannelSessSupported::multi){
+        rmcpAuthTypes |= 1 << 2; //for multi-session MD5 authtype
+    }
+
     constexpr uint2_t reserved4 = 0;
     constexpr bool KGStatus = false;       // Not supporting now.
     constexpr bool perMessageAuth = false; // Per message auth - enabled
@@ -439,7 +444,7 @@ ipmi::RspType<uint8_t,  // channel number
     constexpr bool anonymousLogin = false; // Anonymous login - not supported
     constexpr uint6_t reserved5 = 0;
     constexpr bool rmcpp = true; // IPMI 2.0 - supported
-    constexpr bool rmcp = false; // IPMI 1.5 - not supported
+    constexpr bool rmcp = true; // cwsun : IPMI 1.5 - supported
     constexpr uint24_t oemID = 0;
     constexpr uint8_t oemAuxillary = 0;

--
2.25.1