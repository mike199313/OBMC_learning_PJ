From fbcc09d3732d66d96fdf3e40503314d5e6d27457 Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Mon, 16 Aug 2021 02:28:41 +0000
Subject: [PATCH 4/5] Modify zone startup mechanism: - When count < 5, zone
 will not startup if there has unreadable sensor - When count >= 5, zone will
 startup and ignore unreadable sensor. - When count >= 10, zone will ignore
 all the rules and startup

---
 main.cpp            | 17 ++++++++-----
 pid/builder.cpp     | 58 +++++++++++++++++++++++++++++++++++++++++++--
 pid/builder.hpp     |  3 ++-
 sensors/builder.cpp | 27 +++++++++++++++++----
 sensors/builder.hpp |  3 ++-
 5 files changed, 93 insertions(+), 15 deletions(-)

diff --git a/main.cpp b/main.cpp
index db15b8d..f0ae8f4 100644
--- a/main.cpp
+++ b/main.cpp
@@ -40,6 +40,7 @@
 #include <chrono>
 #include <filesystem>
 #include <iostream>
+#include <string>
 #include <list>
 #include <map>
 #include <memory>
@@ -63,6 +64,8 @@ std::map<int64_t, conf::ZoneConfig> zoneDetailsConfig = {};
 /** the swampd daemon will check for the existence of this file. */
 constexpr auto jsonConfigurationPath = "/usr/share/swampd/config.json";
 std::string configPath = "";
+/** when counting over, ignore all the sensor whether is success or failed*/
+constexpr int overWaitCount = 10;
 
 /* async io context for operation */
 boost::asio::io_context io;
@@ -77,7 +80,7 @@ static sdbusplus::asio::connection
 namespace pid_control
 {
 
-void restartControlLoops()
+void restartControlLoops(const int count)
 {
     static SensorManager mgmr;
     static std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>> zones;
@@ -130,8 +133,10 @@ void restartControlLoops()
         }
     }
 
-    mgmr = buildSensors(sensorConfig, passiveBus, hostBus);
-    zones = buildZones(zoneConfig, zoneDetailsConfig, mgmr, modeControlBus);
+    //missingSensor to record sensor status
+    std::map<std::string, bool> missingSensor = {};
+    mgmr = buildSensors(sensorConfig, passiveBus, hostBus, missingSensor, count);
+    zones = buildZones(zoneConfig, zoneDetailsConfig, mgmr, modeControlBus, missingSensor);
 
     if (0 == zones.size())
     {
@@ -169,9 +174,9 @@ void tryRestartControlLoops(bool first)
         }
 
         // for the last loop, don't elminate the failure of restartControlLoops.
-        if (count >= 5)
+        if (count >= overWaitCount)
         {
-            restartControlLoops();
+            restartControlLoops(count);
             // reset count after succesful restartControlLoops()
             count = 0;
             return;
@@ -180,7 +185,7 @@ void tryRestartControlLoops(bool first)
         // retry when restartControlLoops() has some failure.
         try
         {
-            restartControlLoops();
+            restartControlLoops(count);
             // reset count after succesful restartControlLoops()
             count = 0;
         }
diff --git a/pid/builder.cpp b/pid/builder.cpp
index 505ca98..73fadaa 100644
--- a/pid/builder.cpp
+++ b/pid/builder.cpp
@@ -23,7 +23,7 @@
 #include "pid/thermalcontroller.hpp"
 #include "pid/zone.hpp"
 #include "pid/zone_interface.hpp"
-
+#include "errors/exception.hpp"
 #include <sdbusplus/bus.hpp>
 
 #include <cstdint>
@@ -47,7 +47,8 @@ static std::string getControlPath(int64_t zone)
 std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
     buildZones(const std::map<int64_t, conf::PIDConf>& zonePids,
                std::map<int64_t, conf::ZoneConfig>& zoneConfigs,
-               SensorManager& mgr, sdbusplus::bus::bus& modeControlBus)
+               SensorManager& mgr, sdbusplus::bus::bus& modeControlBus,
+	       std::map<std::string, bool>& missingSensor)
 {
     std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>> zones;
 
@@ -74,6 +75,47 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
 
         std::cerr << "Zone Id: " << zone->getZoneID() << "\n";
 
+	/* 
+	 * counting each and total of missing sensor fan and temp
+	 * pchFind for checking Zone must have PCH sensor
+	 */
+        int missingFanCount = 0, totalFanCount = 0,
+	    missingTmpCount = 0, totalTmpCount = 0;
+	for (const auto& [name, info] : pidConfig){
+	    if(info.type == "fan"){
+	    	for (const auto& f : info.inputs){
+	    	    totalFanCount++;
+		    if(!missingSensor[f]){
+			missingFanCount++;
+		    }
+		}
+	    }else if (isThermalType(info.type)){
+	    	for (const auto& t : info.inputs){
+	    	    totalTmpCount++;
+		    if(!missingSensor[t]){
+			missingTmpCount++;
+		    }
+		}
+	    }else if (info.type == "stepwise"){
+            for (const auto& t : info.inputs){
+                totalTmpCount++;
+                if(!missingSensor[t]){
+                    missingTmpCount++;
+                }
+            }
+        }
+	}
+	if(missingFanCount == totalFanCount){
+	    throw SensorBuildException(
+		"Failed to create zone " + std::to_string(zone->getZoneID()) +
+		" due to all fans fail");
+	}
+	if(missingTmpCount == totalTmpCount){
+	    throw SensorBuildException(
+		"Failed to create zone " + std::to_string(zone->getZoneID()) +
+		" due to all thermal fail");
+	}
+	
         // For each PID create a Controller and a Sensor.
         for (const auto& [name, info] : pidConfig)
         {
@@ -88,6 +130,10 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
+		    if(!missingSensor[i]){
+			std::cerr << "Missing fan " << i << " are not added to zone\n";
+			continue;
+		    }
                     inputs.push_back(i);
                     zone->addFanInput(i);
                 }
@@ -100,6 +146,10 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
+		    if(!missingSensor[i]){
+			std::cerr << "Missing thermal " << i << " are not added to zone\n";
+			continue;
+		    }
                     inputs.push_back(i);
                     zone->addThermalInput(i);
                 }
@@ -114,6 +164,10 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
+      	           if(!missingSensor[i]){
+                       std::cerr << "Missing thermal " << i << " are not added to zone\n";
+                       continue;
+                    }
                     inputs.push_back(i);
                     zone->addThermalInput(i);
                 }
diff --git a/pid/builder.hpp b/pid/builder.hpp
index 5f03400..73fa95b 100644
--- a/pid/builder.hpp
+++ b/pid/builder.hpp
@@ -15,6 +15,7 @@ namespace pid_control
 std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
     buildZones(const std::map<int64_t, conf::PIDConf>& zonePids,
                std::map<int64_t, conf::ZoneConfig>& zoneConfigs,
-               SensorManager& mgr, sdbusplus::bus::bus& modeControlBus);
+               SensorManager& mgr, sdbusplus::bus::bus& modeControlBus,
+	       std::map<std::string, bool>& missingSensor);
 
 }
diff --git a/sensors/builder.cpp b/sensors/builder.cpp
index f4257ad..927fdb6 100644
--- a/sensors/builder.cpp
+++ b/sensors/builder.cpp
@@ -37,6 +37,9 @@
 #include "sysfs/sysfswrite.hpp"
 #include "util.hpp"
 
+/** dbus need time to build path, ignore unread sensor if over the count */
+constexpr int waitingDBusCount = 5;
+
 namespace pid_control
 {
 
@@ -44,7 +47,8 @@ static constexpr bool deferSignals = true;
 
 SensorManager
     buildSensors(const std::map<std::string, conf::SensorConfig>& config,
-                 sdbusplus::bus::bus& passive, sdbusplus::bus::bus& host)
+                 sdbusplus::bus::bus& passive, sdbusplus::bus::bus& host,
+		 std::map<std::string, bool>& missingSensor,const int count)
 {
     SensorManager mgmr(passive, host);
     auto& hostSensorBus = mgmr.getHostBus();
@@ -96,16 +100,29 @@ SensorManager
                 }
                 if (ri == nullptr)
                 {
-                    throw SensorBuildException(
-                        "Failed to create dbus passive sensor: " + name +
-                        " of type: " + info->type);
-                }
+		    //waiting dbus start the sensor service, it needs time to start
+		    if(count < waitingDBusCount){
+			throw SensorBuildException(
+                            "Failed to create dbuspassive sensor, maybe the service is not ready");
+		    }else{
+		    	//over the waiting count will directly ignore the sensor that is failed
+		    	missingSensor[name] = false;
+		    	continue;
+		    }
+                }else
+		    missingSensor[name] = true;
                 break;
             case IOInterfaceType::EXTERNAL:
                 // These are a special case for read-only.
                 break;
             case IOInterfaceType::SYSFS:
                 ri = std::make_unique<SysFsRead>(info->readPath);
+                if (ri == nullptr){
+		    std::cerr << "Failed to create sysfs sensor: " << name << " of type: " << info->type;
+		    missingSensor[name] = false;
+                }else{
+		    missingSensor[name] = true;
+		}
                 break;
             default:
                 ri = std::make_unique<WriteOnly>();
diff --git a/sensors/builder.hpp b/sensors/builder.hpp
index 955307a..72e7642 100644
--- a/sensors/builder.hpp
+++ b/sensors/builder.hpp
@@ -17,6 +17,7 @@ namespace pid_control
  */
 SensorManager
     buildSensors(const std::map<std::string, conf::SensorConfig>& config,
-                 sdbusplus::bus::bus& passive, sdbusplus::bus::bus& host);
+                 sdbusplus::bus::bus& passive, sdbusplus::bus::bus& host,
+		 std::map<std::string, bool>& missingSensor, const int count);
 
 } // namespace pid_control
-- 
2.33.0

