From af39142f380cba5631f8bd5abbac47f7b24cd47a Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Wed, 1 Jun 2022 12:12:33 +0800
Subject: [PATCH 5/5] Add upatetime attribute to config json for different
 update time within different zone and modify confused variable name

---
 conf.hpp                   |  1 +
 dbus/dbusconfiguration.cpp |  2 +
 main.cpp                   |  8 ++--
 pid/builder.cpp            | 89 ++++++++++++++++++++------------------
 pid/buildjson.cpp          |  1 +
 pid/pidloop.cpp            | 23 +++++-----
 pid/zone.cpp               |  4 ++
 pid/zone.hpp               |  9 +++-
 pid/zone_interface.hpp     |  1 +
 sensors/builder.cpp        | 29 +++++++------
 util.cpp                   |  3 +-
 11 files changed, 96 insertions(+), 74 deletions(-)

diff --git a/conf.hpp b/conf.hpp
index 9122a28..a9c8033 100644
--- a/conf.hpp
+++ b/conf.hpp
@@ -57,6 +57,7 @@ struct ZoneConfig
 
     /* If the sensors are in fail-safe mode, this is the percentage to use. */
     double failsafePercent;
+    int64_t UpdateTime;
 };
 
 using PIDConf = std::map<std::string, ControllerInfo>;
diff --git a/dbus/dbusconfiguration.cpp b/dbus/dbusconfiguration.cpp
index 1af938a..fe36fc4 100644
--- a/dbus/dbusconfiguration.cpp
+++ b/dbus/dbusconfiguration.cpp
@@ -571,6 +571,8 @@ bool init(sdbusplus::bus::bus& bus, boost::asio::steady_timer& timer,
                                                   zone.at("MinThermalOutput"));
             details.failsafePercent = std::visit(VariantToDoubleVisitor(),
                                                  zone.at("FailSafePercent"));
+            details.UpdateTime = (int64_t)std::visit(VariantToDoubleVisitor(),
+                                                 zone.at("UpdateTime"));
         }
         auto findBase = configuration.second.find(pidConfigurationInterface);
         // loop through all the PID configurations and fill out a sensor config
diff --git a/main.cpp b/main.cpp
index f0ae8f4..c9c0c40 100644
--- a/main.cpp
+++ b/main.cpp
@@ -133,10 +133,10 @@ void restartControlLoops(const int count)
         }
     }
 
-    //missingSensor to record sensor status
-    std::map<std::string, bool> missingSensor = {};
-    mgmr = buildSensors(sensorConfig, passiveBus, hostBus, missingSensor, count);
-    zones = buildZones(zoneConfig, zoneDetailsConfig, mgmr, modeControlBus, missingSensor);
+    //validSensors to record sensor status
+    std::map<std::string, bool> validSensors = {};
+    mgmr = buildSensors(sensorConfig, passiveBus, hostBus, validSensors, count);
+    zones = buildZones(zoneConfig, zoneDetailsConfig, mgmr, modeControlBus, validSensors);
 
     if (0 == zones.size())
     {
diff --git a/pid/builder.cpp b/pid/builder.cpp
index 73fadaa..0800bf5 100644
--- a/pid/builder.cpp
+++ b/pid/builder.cpp
@@ -48,7 +48,7 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
     buildZones(const std::map<int64_t, conf::PIDConf>& zonePids,
                std::map<int64_t, conf::ZoneConfig>& zoneConfigs,
                SensorManager& mgr, sdbusplus::bus::bus& modeControlBus,
-	       std::map<std::string, bool>& missingSensor)
+	       std::map<std::string, bool>& validSensors)
 {
     std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>> zones;
 
@@ -70,7 +70,8 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
 
         auto zone = std::make_shared<DbusPidZone>(
             zoneId, zoneConf->second.minThermalOutput,
-            zoneConf->second.failsafePercent, mgr, modeControlBus,
+            zoneConf->second.failsafePercent, zoneConf->second.UpdateTime,
+            mgr, modeControlBus,
             getControlPath(zoneId).c_str(), deferSignals);
 
         std::cerr << "Zone Id: " << zone->getZoneID() << "\n";
@@ -81,40 +82,44 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
 	 */
         int missingFanCount = 0, totalFanCount = 0,
 	    missingTmpCount = 0, totalTmpCount = 0;
-	for (const auto& [name, info] : pidConfig){
-	    if(info.type == "fan"){
-	    	for (const auto& f : info.inputs){
-	    	    totalFanCount++;
-		    if(!missingSensor[f]){
-			missingFanCount++;
-		    }
-		}
-	    }else if (isThermalType(info.type)){
-	    	for (const auto& t : info.inputs){
-	    	    totalTmpCount++;
-		    if(!missingSensor[t]){
-			missingTmpCount++;
-		    }
-		}
-	    }else if (info.type == "stepwise"){
-            for (const auto& t : info.inputs){
-                totalTmpCount++;
-                if(!missingSensor[t]){
-                    missingTmpCount++;
+
+        for (const auto& [name, info] : pidConfig){
+            if(info.type == "fan"){
+                for (const auto& f : info.inputs){
+                    totalFanCount++;
+                    if(!validSensors[f]){
+                        missingFanCount++;
+                    }
                 }
             }
+            else if (isThermalType(info.type)){
+                for (const auto& t : info.inputs){
+                    totalTmpCount++;
+                    if(!validSensors[t]){
+                        missingTmpCount++;
+                    }
+                }
+            }
+            else if (info.type == "stepwise"){
+                for (const auto& t : info.inputs){
+                    totalTmpCount++;
+                    if(!validSensors[t]){
+                        missingTmpCount++;
+                    }
+                }
+            }
+        }
+
+        if(missingFanCount == totalFanCount){
+            throw SensorBuildException(
+            "Failed to create zone " + std::to_string(zone->getZoneID()) +
+            " due to all fans fail");
+        }
+        if(missingTmpCount == totalTmpCount){
+            throw SensorBuildException(
+            "Failed to create zone " + std::to_string(zone->getZoneID()) +
+            " due to all thermal fail");
         }
-	}
-	if(missingFanCount == totalFanCount){
-	    throw SensorBuildException(
-		"Failed to create zone " + std::to_string(zone->getZoneID()) +
-		" due to all fans fail");
-	}
-	if(missingTmpCount == totalTmpCount){
-	    throw SensorBuildException(
-		"Failed to create zone " + std::to_string(zone->getZoneID()) +
-		" due to all thermal fail");
-	}
 	
         // For each PID create a Controller and a Sensor.
         for (const auto& [name, info] : pidConfig)
@@ -130,10 +135,10 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
-		    if(!missingSensor[i]){
-			std::cerr << "Missing fan " << i << " are not added to zone\n";
-			continue;
-		    }
+                    if(!validSensors[i]){
+                        std::cerr << "Missing fan " << i << " are not added to zone\n";
+                        continue;
+                    }
                     inputs.push_back(i);
                     zone->addFanInput(i);
                 }
@@ -146,10 +151,10 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
-		    if(!missingSensor[i]){
-			std::cerr << "Missing thermal " << i << " are not added to zone\n";
-			continue;
-		    }
+                    if(!validSensors[i]){
+                        std::cerr << "Missing thermal " << i << " are not added to zone\n";
+                        continue;
+                    }
                     inputs.push_back(i);
                     zone->addThermalInput(i);
                 }
@@ -164,7 +169,7 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
             {
                 for (const auto& i : info.inputs)
                 {
-      	           if(!missingSensor[i]){
+                    if(!validSensors[i]){
                        std::cerr << "Missing thermal " << i << " are not added to zone\n";
                        continue;
                     }
diff --git a/pid/buildjson.cpp b/pid/buildjson.cpp
index e078fdb..3334f8f 100644
--- a/pid/buildjson.cpp
+++ b/pid/buildjson.cpp
@@ -138,6 +138,7 @@ std::pair<std::map<int64_t, conf::PIDConf>, std::map<int64_t, conf::ZoneConfig>>
         id = zone["id"];
         thisZoneConfig.minThermalOutput = zone["minThermalOutput"];
         thisZoneConfig.failsafePercent = zone["failsafePercent"];
+        thisZoneConfig.UpdateTime = zone["UpdateTime"];
 
         auto pids = zone["pids"];
         for (const auto& pid : pids)
diff --git a/pid/pidloop.cpp b/pid/pidloop.cpp
index a5d0daf..c17b470 100644
--- a/pid/pidloop.cpp
+++ b/pid/pidloop.cpp
@@ -106,24 +106,25 @@ void pidControlLoop(std::shared_ptr<ZoneInterface> zone,
             return;
         }
 
-        // Get the latest fan speeds.
-        zone->updateFanTelemetry();
 
-        if (10 <= ms100cnt)
+        if (zone->getUpdateTime() <= ms100cnt)
         {
+            // Get the latest fan speeds.
+            zone->updateFanTelemetry();
+
             ms100cnt = 0;
 
             processThermals(zone);
-        }
 
-        // Run the fan PIDs every iteration.
-        zone->processFans();
+            // Run the fan PIDs every iteration.
+            zone->processFans();
 
-        if (loggingEnabled)
-        {
-            std::ostringstream out;
-            out << "," << zone->getFailSafeMode() << std::endl;
-            zone->writeLog(out.str());
+            if (loggingEnabled)
+            {
+                std::ostringstream out;
+                out << "," << zone->getFailSafeMode() << std::endl;
+                zone->writeLog(out.str());
+            }
         }
 
         ms100cnt += 1;
diff --git a/pid/zone.cpp b/pid/zone.cpp
index 7238d33..6acce79 100644
--- a/pid/zone.cpp
+++ b/pid/zone.cpp
@@ -479,4 +479,8 @@ bool DbusPidZone::failSafe() const
     return getFailSafeMode();
 }
 
+int64_t DbusPidZone::getUpdateTime() const{
+    return _UpdateTime;
+}
+
 } // namespace pid_control
diff --git a/pid/zone.hpp b/pid/zone.hpp
index 9f405f5..d1bed57 100644
--- a/pid/zone.hpp
+++ b/pid/zone.hpp
@@ -36,14 +36,16 @@ class DbusPidZone : public ZoneInterface, public ModeObject
 {
   public:
     DbusPidZone(int64_t zone, double minThermalOutput, double failSafePercent,
-                const SensorManager& mgr, sdbusplus::bus::bus& bus,
+                int64_t UpdateTime, const SensorManager& mgr, sdbusplus::bus::bus& bus,
                 const char* objPath, bool defer) :
         ModeObject(bus, objPath,
                    defer ? ModeObject::action::defer_emit
                          : ModeObject::action::emit_object_added),
         _zoneId(zone), _maximumSetPoint(),
         _minThermalOutputSetPt(minThermalOutput),
-        _failSafePercent(failSafePercent), _mgr(mgr)
+        _failSafePercent(failSafePercent),
+        _UpdateTime(UpdateTime),
+        _mgr(mgr)
     {
         if (loggingEnabled)
         {
@@ -67,6 +69,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     void clearSetPoints(void) override;
     void clearRPMCeilings(void) override;
     double getFailSafePercent(void) const override;
+    int64_t getUpdateTime() const override;
     double getMinThermalSetpoint(void) const;
 
     Sensor* getSensor(const std::string& name) override;
@@ -102,6 +105,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     bool _redundantWrite = false;
     const double _minThermalOutputSetPt;
     const double _failSafePercent;
+    const int64_t _UpdateTime;
 
     std::set<std::string> _failSafeSensors;
 
@@ -115,6 +119,7 @@ class DbusPidZone : public ZoneInterface, public ModeObject
 
     std::vector<std::unique_ptr<Controller>> _fans;
     std::vector<std::unique_ptr<Controller>> _thermals;
+
 };
 
 } // namespace pid_control
diff --git a/pid/zone_interface.hpp b/pid/zone_interface.hpp
index b8da048..e24781c 100644
--- a/pid/zone_interface.hpp
+++ b/pid/zone_interface.hpp
@@ -71,6 +71,7 @@ class ZoneInterface
      * fail safe.
      */
     virtual double getFailSafePercent() const = 0;
+    virtual int64_t getUpdateTime() const = 0;
 
     /** Return if the zone is set to manual mode.  false equates to automatic
      * mode (the default).
diff --git a/sensors/builder.cpp b/sensors/builder.cpp
index 927fdb6..7c42f2a 100644
--- a/sensors/builder.cpp
+++ b/sensors/builder.cpp
@@ -40,6 +40,7 @@
 /** dbus need time to build path, ignore unread sensor if over the count */
 constexpr int waitingDBusCount = 5;
 
+
 namespace pid_control
 {
 
@@ -48,7 +49,7 @@ static constexpr bool deferSignals = true;
 SensorManager
     buildSensors(const std::map<std::string, conf::SensorConfig>& config,
                  sdbusplus::bus::bus& passive, sdbusplus::bus::bus& host,
-		 std::map<std::string, bool>& missingSensor,const int count)
+		 std::map<std::string, bool>& validSensors,const int count)
 {
     SensorManager mgmr(passive, host);
     auto& hostSensorBus = mgmr.getHostBus();
@@ -100,17 +101,17 @@ SensorManager
                 }
                 if (ri == nullptr)
                 {
-		    //waiting dbus start the sensor service, it needs time to start
-		    if(count < waitingDBusCount){
-			throw SensorBuildException(
+                    //waiting dbus start the sensor service, it needs time to start
+                    if(count < waitingDBusCount){
+                        throw SensorBuildException(
                             "Failed to create dbuspassive sensor, maybe the service is not ready");
-		    }else{
-		    	//over the waiting count will directly ignore the sensor that is failed
-		    	missingSensor[name] = false;
-		    	continue;
-		    }
+                    }else{
+                        //over the waiting count will directly ignore the sensor that is failed
+                        validSensors[name] = false;
+                    continue;
+                    }
                 }else
-		    missingSensor[name] = true;
+                    validSensors[name] = true;
                 break;
             case IOInterfaceType::EXTERNAL:
                 // These are a special case for read-only.
@@ -118,11 +119,11 @@ SensorManager
             case IOInterfaceType::SYSFS:
                 ri = std::make_unique<SysFsRead>(info->readPath);
                 if (ri == nullptr){
-		    std::cerr << "Failed to create sysfs sensor: " << name << " of type: " << info->type;
-		    missingSensor[name] = false;
+                    std::cerr << "Failed to create sysfs sensor: " << name << " of type: " << info->type;
+                    validSensors[name] = false;
                 }else{
-		    missingSensor[name] = true;
-		}
+                    validSensors[name] = true;
+                }
                 break;
             default:
                 ri = std::make_unique<WriteOnly>();
diff --git a/util.cpp b/util.cpp
index 5a6336e..e966275 100644
--- a/util.cpp
+++ b/util.cpp
@@ -55,7 +55,8 @@ void debugPrint(const std::map<std::string, conf::SensorConfig>& sensorConfig,
     {
         std::cout << "\t{" << zone.first << ",\n";
         std::cout << "\t\t{" << zone.second.minThermalOutput << ", ";
-        std::cout << zone.second.failsafePercent << "}\n\t},\n";
+        std::cout << zone.second.failsafePercent << ", ";
+        std::cout << zone.second.UpdateTime << "}\n\t},\n";
     }
     std::cout << "}\n\n";
     std::cout << "ZoneConfig\n";
-- 
2.33.0

