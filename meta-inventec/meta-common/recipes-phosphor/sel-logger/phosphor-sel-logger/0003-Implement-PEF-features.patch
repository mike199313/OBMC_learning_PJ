From a66a6ef79e422534117ae03f0e1ead6ab84dff88 Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Fri, 27 May 2022 07:45:11 +0000
Subject: [PATCH] Implement PEF features

Symptom/Reason:
- Implement PEF features

Root Cause:
- N/A

Solution/Change:
- [phosphor-dbus-interfaces]
  - Add SignalEvent signal in IPMI interface
- [phosphor-sel-logger]
  - Add signal trigger code
- [intel-ipmi-oem]
  - Implement PEF manager
  - Implement PEF IPMI command handler

Entry Test:
- Get PEF capabilities
  - ipmitool raw 0x04 0x10
---
 include/sel_logger.hpp                    |  1 +
 include/threshold_alarm_event_monitor.hpp | 26 +++++++++++++++++++----
 include/threshold_event_monitor.hpp       | 23 +++++++++++++++++---
 include/watchdog_event_monitor.hpp        | 26 +++++++++++++++++++----
 src/sel_logger.cpp                        |  7 +++---
 5 files changed, 69 insertions(+), 14 deletions(-)

diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
index 180f671..adf4b18 100644
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -21,6 +21,7 @@ static constexpr char const* ipmiSelObject = "xyz.openbmc_project.Logging.IPMI";
 static constexpr char const* ipmiSelPath = "/xyz/openbmc_project/Logging/IPMI";
 static constexpr char const* ipmiSelAddInterface =
     "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* PEFSignal = "SignalEvent";
 
 static constexpr char const* SettingService = "xyz.openbmc_project.Settings";
 static constexpr char const* GlobalEnableObj = "/xyz/openbmc_project/ipmi/global_enables";
diff --git a/include/threshold_alarm_event_monitor.hpp b/include/threshold_alarm_event_monitor.hpp
index 0de281d..16d1cc1 100644
--- a/include/threshold_alarm_event_monitor.hpp
+++ b/include/threshold_alarm_event_monitor.hpp
@@ -45,6 +45,7 @@ static boost::container::flat_map<std::string, sdbusMatch> matchers = {
 
 void generateEvent(std::string signalName,
                    std::shared_ptr<sdbusplus::asio::connection> conn,
+                   std::shared_ptr<sdbusplus::asio::dbus_interface> ifaceAddSel,
                    sdbusplus::message_t& msg)
 {
     double assertValue;
@@ -238,23 +239,40 @@ void generateEvent(std::string signalName,
                            ". Reading=" + std::to_string(assertValue) +
                            " Threshold=" + std::to_string(thresholdVal) + ".");
 
-    selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
+    uint16_t recordId = selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
                        assert, selBMCGenID, "REDFISH_MESSAGE_ID=%s",
                        redfishMessageID.c_str(),
                        "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
                        sensorName.data(), assertValue, thresholdVal);
+
+    // Send event signal for PEF processing
+    try
+    {
+        // msg.get_path() is interface->get_object_path()
+        sdbusplus::message::message sig_msg =
+            ifaceAddSel->new_signal(PEFSignal);
+
+        sig_msg.append(recordId, std::string(msg.get_path()), eventData, journalMsg);
+        sig_msg.signal_send();
+    }
+    catch (const sdbusplus::exception::exception& e)
+    {
+        std::cerr
+            << "Failed to send SignalEvent signal with assertValue\n";
+    }
 }
 
 inline static void startThresholdAlarmMonitor(
-    std::shared_ptr<sdbusplus::asio::connection> conn)
+    std::shared_ptr<sdbusplus::asio::connection> conn,
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ifaceAddSel)
 {
     for (auto iter = matchers.begin(); iter != matchers.end(); iter++)
     {
         iter->second = std::make_shared<sdbusplus::bus::match_t>(
             static_cast<sdbusplus::bus_t&>(*conn),
             "type='signal',member=" + iter->first,
-            [conn, iter](sdbusplus::message_t& msg) {
-                generateEvent(iter->first, conn, msg);
+            [conn, iter, ifaceAddSel](sdbusplus::message_t& msg) {
+                generateEvent(iter->first, conn, ifaceAddSel, msg);
             });
     }
 }
diff --git a/include/threshold_event_monitor.hpp b/include/threshold_event_monitor.hpp
index 6943d28..9af7c3e 100644
--- a/include/threshold_event_monitor.hpp
+++ b/include/threshold_event_monitor.hpp
@@ -35,9 +35,10 @@ static constexpr const uint8_t thresholdEventDataTriggerReadingByte3 = (1 << 4);
 static const std::string openBMCMessageRegistryVersion("0.1");
 
 inline static sdbusplus::bus::match_t startThresholdAssertMonitor(
-    std::shared_ptr<sdbusplus::asio::connection> conn)
+    std::shared_ptr<sdbusplus::asio::connection> conn,
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ifaceAddSel)
 {
-    auto thresholdAssertMatcherCallback = [conn](sdbusplus::message_t& msg) {
+    auto thresholdAssertMatcherCallback = [conn, ifaceAddSel](sdbusplus::message_t& msg) {
         // This static set of std::pair<path, event> tracks asserted events to
         // avoid duplicate logs or deasserts logged without an assert
         static boost::container::flat_set<std::pair<std::string, std::string>>
@@ -324,11 +325,27 @@ inline static sdbusplus::bus::match_t startThresholdAssertMonitor(
             conn->call(AddToLog);
         }
 #else
-        selAddSystemRecord(
+        uint16_t recordId = selAddSystemRecord(
             journalMsg, std::string(msg.get_path()), eventData, assert,
             selBMCGenID, "REDFISH_MESSAGE_ID=%s", redfishMessageID.c_str(),
             "REDFISH_MESSAGE_ARGS=%.*s,%f,%f", sensorName.length(),
             sensorName.data(), assertValue, thresholdVal);
+
+        // Send event signal for PEF processing
+        try
+        {
+            // msg.get_path() is interface->get_object_path()
+            sdbusplus::message::message sig_msg =
+                ifaceAddSel->new_signal(PEFSignal);
+
+            sig_msg.append(recordId, std::string(msg.get_path()), eventData, journalMsg);
+            sig_msg.signal_send();
+        }
+        catch (const sdbusplus::exception::exception& e)
+        {
+            std::cerr
+                << "Failed to send SignalEvent signal with assertValue\n";
+        }
 #endif
     };
     sdbusplus::bus::match_t thresholdAssertMatcher(
diff --git a/include/watchdog_event_monitor.hpp b/include/watchdog_event_monitor.hpp
index facb282..abf2043 100644
--- a/include/watchdog_event_monitor.hpp
+++ b/include/watchdog_event_monitor.hpp
@@ -55,6 +55,7 @@ static constexpr int interruptTypeBits = 4;
 
 inline static void sendWatchdogEventLog(
     std::shared_ptr<sdbusplus::asio::connection> conn,
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ifaceAddSel,
     sdbusplus::message_t& msg, bool assert,
     std::optional<std::string_view> expireAction = std::nullopt)
 {
@@ -227,17 +228,34 @@ inline static void sendWatchdogEventLog(
 
         std::string redfishMessageID = "OpenBMC.0.1.IPMIWatchdog";
 
-        selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
+        uint16_t recordId = selAddSystemRecord(journalMsg, std::string(msg.get_path()), eventData,
                            assert, selBMCGenID, "REDFISH_MESSAGE_ID=%s",
                            redfishMessageID.c_str(), "REDFISH_MESSAGE_ARGS=%s",
                            eventMessageArgs.c_str(), NULL);
+
+        // Send event signal for PEF processing
+        try
+        {
+            // msg.get_path() is interface->get_object_path()
+            sdbusplus::message::message sig_msg =
+                ifaceAddSel->new_signal(PEFSignal);
+
+            sig_msg.append(recordId, std::string(msg.get_path()), eventData, journalMsg);
+            sig_msg.signal_send();
+        }
+        catch (const sdbusplus::exception::exception& e)
+        {
+            std::cerr
+                << "Failed to send SignalEvent signal with assertValue\n";
+        }
     }
 }
 
 inline static sdbusplus::bus::match_t
-    startWatchdogEventMonitor(std::shared_ptr<sdbusplus::asio::connection> conn)
+    startWatchdogEventMonitor(std::shared_ptr<sdbusplus::asio::connection> conn,
+                                std::shared_ptr<sdbusplus::asio::dbus_interface> ifaceAddSel)
 {
-    auto watchdogEventMatcherCallback = [conn](sdbusplus::message_t& msg) {
+    auto watchdogEventMatcherCallback = [conn, ifaceAddSel](sdbusplus::message_t& msg) {
         std::string expiredAction;
         msg.read(expiredAction);
 
@@ -245,7 +263,7 @@ inline static sdbusplus::bus::match_t
         action.remove_prefix(
             std::min(action.find_last_of(".") + 1, action.size()));
 
-        sendWatchdogEventLog(conn, msg, true, action);
+        sendWatchdogEventLog(conn, ifaceAddSel, msg, true, action);
     };
 
     sdbusplus::bus::match_t watchdogEventMatcher(
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index e785c9d..3bb9c91 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -362,11 +362,12 @@ int main(int, char*[])
     ifaceAddSel->register_method("Clear", []() { clearSelLogFiles(); });
 #endif
 #endif
+    ifaceAddSel->register_signal<uint16_t, std::string, std::vector<uint8_t>, std::string>(PEFSignal);
     ifaceAddSel->initialize();
 
 #ifdef SEL_LOGGER_MONITOR_THRESHOLD_EVENTS
     sdbusplus::bus::match_t thresholdAssertMonitor =
-        startThresholdAssertMonitor(conn);
+        startThresholdAssertMonitor(conn, ifaceAddSel);
 #endif
 
 #ifdef REDFISH_LOG_MONITOR_PULSE_EVENTS
@@ -375,11 +376,11 @@ int main(int, char*[])
 
 #ifdef SEL_LOGGER_MONITOR_WATCHDOG_EVENTS
     sdbusplus::bus::match_t watchdogEventMonitor =
-        startWatchdogEventMonitor(conn);
+        startWatchdogEventMonitor(conn, ifaceAddSel);
 #endif
 
 #ifdef SEL_LOGGER_MONITOR_THRESHOLD_ALARM_EVENTS
-    startThresholdAlarmMonitor(conn);
+    startThresholdAlarmMonitor(conn, ifaceAddSel);
 #endif
 
 #ifdef SEL_LOGGER_MONITOR_HOST_ERROR_EVENTS
-- 
2.17.1

