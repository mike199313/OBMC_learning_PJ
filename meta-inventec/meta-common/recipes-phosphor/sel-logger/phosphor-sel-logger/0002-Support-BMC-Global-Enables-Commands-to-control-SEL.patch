From 48900e3962352b527c8d6d74a66666c555c3a308 Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Wed, 9 Mar 2022 07:42:58 +0000
Subject: [PATCH 2/7] Support BMC Global Enables Commands to control SEL

    Symptom/Reason :
         Support to enable/disable adding new SEL log with global enables
	setting

    Root Cause:
        N/A

    Solution/Change:
	[sel-logger.cpp]
	Allow/forbid to add new SEL log in "IpmiSelAdd" and "IpmiSelAddOem"
	based on SEL state in Global Enable setting

    Entry Test:
	1, check global enable setting
	   ipmitool mc getenables
	2. add new SEL log
           ipmitool event 1
        3. check sel
	   ipmitool sel list

Subject: [PATCH] Bug 994 - [Transformers][OpenBMC][IPMI] After disable sel in global enables, it still work

Symptom/Reason :
- After disable SEL in global enables, it still work.

Root Cause:
1. The variable SEL_Enable cannot be set by changing the property SEL_Enable of the xyz.openbmc_project.Logging service.
2. The variable SEL_Enable could not be synchronized to the SEL property of the xyz.openbmc_project.Settings service.

Solution/Change:
[phosphor-sel-logger]
1. Assign a value to the variable SEL_Enable in the set property method.
2. Sync global enable settings once on demand.

Entry Test:
```
sysadmin@transformers:~# ipmitool mc getenables
Receive Message Queue Interrupt          : disabled
Event Message Buffer Full Interrupt      : disabled
Event Message Buffer                     : disabled
System Event Logging                     : enabled
OEM 0                                    : disabled
OEM 1                                    : disabled
OEM 2                                    : disabled

sysadmin@transformers:~# ipmitool sel clear
Clearing SEL.  Please allow a few seconds to erase.

sysadmin@transformers:~# ipmitool sel list
SEL has no entries

sysadmin@transformers:~# ipmitool event 1
Sending SAMPLE event: Temperature - Upper Critical - Going High
   0 |  Pre-Init  |0000000000| Temperature #0x30 | Upper Critical going high | Asserted

sysadmin@transformers:~# ipmitool sel list
 317 | 06/10/22 | 05:55:47 UTC | Temperature #0x30 | Upper Critical going high | Asserted

sysadmin@transformers:~# ipmitool mc getenables
Receive Message Queue Interrupt          : disabled
Event Message Buffer Full Interrupt      : disabled
Event Message Buffer                     : disabled
System Event Logging                     : disabled
OEM 0                                    : disabled
OEM 1                                    : disabled
OEM 2                                    : disabled

sysadmin@transformers:~# ipmitool sel clear
Clearing SEL.  Please allow a few seconds to erase.

sysadmin@transformers:~# ipmitool sel list
SEL has no entries

sysadmin@transformers:~# ipmitool event 1
Sending SAMPLE event: Temperature - Upper Critical - Going High
   0 |  Pre-Init  |0000000000| Temperature #0x30 | Upper Critical going high | Asserted

sysadmin@transformers:~# ipmitool sel list
SEL has no entries

sysadmin@transformers:~# ipmitool mc getenables
Receive Message Queue Interrupt          : disabled
Event Message Buffer Full Interrupt      : disabled
Event Message Buffer                     : disabled
System Event Logging                     : enabled
OEM 0                                    : disabled
OEM 1                                    : disabled
OEM 2                                    : disabled

sysadmin@transformers:~# ipmitool sel list
SEL has no entries

sysadmin@transformers:~# ipmitool event 1
Sending SAMPLE event: Temperature - Upper Critical - Going High
   0 |  Pre-Init  |0000000000| Temperature #0x30 | Upper Critical going high | Asserted

sysadmin@transformers:~# ipmitool sel list
 319 | 06/10/22 | 05:58:54 UTC | Temperature #0x30 | Upper Critical going high | Asserted

```
---
 include/sel_logger.hpp |  5 ++++
 src/sel_logger.cpp     | 67 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 72 insertions(+)

diff --git a/include/sel_logger.hpp b/include/sel_logger.hpp
index 35f8b95..180f671 100644
--- a/include/sel_logger.hpp
+++ b/include/sel_logger.hpp
@@ -22,6 +22,11 @@ static constexpr char const* ipmiSelPath = "/xyz/openbmc_project/Logging/IPMI";
 static constexpr char const* ipmiSelAddInterface =
     "xyz.openbmc_project.Logging.IPMI";
 
+static constexpr char const* SettingService = "xyz.openbmc_project.Settings";
+static constexpr char const* GlobalEnableObj = "/xyz/openbmc_project/ipmi/global_enables";
+static constexpr char const* DbusPropIntf = "org.freedesktop.DBus.Properties";
+static constexpr char const* GlobalEnableIntf = "xyz.openbmc_project.Ipmi.GlobalEnables";
+
 // ID string generated using journalctl to include in the MESSAGE_ID field for
 // SEL entries.  Helps with filtering SEL entries in the journal.
 static constexpr char const* selMessageId = "b370836ccf2f4850ac5bee185b77893a";
diff --git a/src/sel_logger.cpp b/src/sel_logger.cpp
index 1a30926..0701073 100644
--- a/src/sel_logger.cpp
+++ b/src/sel_logger.cpp
@@ -33,6 +33,7 @@
 #include <iomanip>
 #include <iostream>
 #include <sstream>
+#include <variant>
 
 #ifdef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
 #include <phosphor-logging/elog-errors.hpp>
@@ -45,6 +46,8 @@ using SELCreated =
     sdbusplus::xyz::openbmc_project::Logging::SEL::Error::Created;
 #endif
 
+static bool SEL_Enable = true;
+
 struct DBusInternalError final : public sdbusplus::exception_t
 {
     const char* name() const noexcept override
@@ -67,6 +70,39 @@ struct DBusInternalError final : public sdbusplus::exception_t
     }
 };
 
+static void syncGlobalEnables(void)
+{
+    // Sync only once if successful
+    static bool synced = false;
+    if (synced)
+    {
+        return;
+    }
+
+    // Setup connection to dbus
+    boost::asio::io_service io;
+    auto conn = std::make_shared<sdbusplus::asio::connection>(io);
+
+    std::variant<bool> sel_value;
+    sdbusplus::message::message getsel = conn->new_method_call(
+        SettingService, GlobalEnableObj, DbusPropIntf, "Get");
+    getsel.append(GlobalEnableIntf, "SEL");
+
+    try
+    {
+        // Get SEL property
+        sdbusplus::message::message reloadResponse = conn->call(getsel);
+        reloadResponse.read(sel_value);
+        SEL_Enable = std::get<bool>(sel_value);
+        synced = true;
+    }
+    catch (const sdbusplus::exception_t& e)
+    {
+        std::cerr << "error getting global enable settings: " << e.what()
+                  << std::endl;
+    }
+}
+
 #ifndef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
 static bool getSELLogFiles(std::vector<std::filesystem::path>& selLogFiles)
 {
@@ -200,6 +236,13 @@ static uint16_t selAddSystemRecord([[maybe_unused]] const std::string& message,
                                    const bool& assert, const uint16_t& genId,
                                    [[maybe_unused]] T&&... metadata)
 {
+    syncGlobalEnables();
+    /*If SEL isn't enabled*/
+    if(!SEL_Enable){
+        fprintf(stderr, "%s: Can't add new SEL entry, SEL isn't enabled!\n", __FUNCTION__);
+        return -1;
+    }
+
     // Only 3 bytes of SEL event data are allowed in a system record
     if (selData.size() > selEvtDataMaxSize)
     {
@@ -232,6 +275,13 @@ static uint16_t selAddOemRecord([[maybe_unused]] const std::string& message,
                                 const std::vector<uint8_t>& selData,
                                 const uint8_t& recordType)
 {
+    syncGlobalEnables();
+    /*If SEL isn't enabled*/
+    if(!SEL_Enable){
+        fprintf(stderr, "%s: Can't add new SEL entry, SEL isn't enabled!\n", __FUNCTION__);
+        return -1;
+    }
+
     // A maximum of 13 bytes of SEL event data are allowed in an OEM record
     if (selData.size() > selOemDataMaxSize)
     {
@@ -262,6 +312,7 @@ int main(int, char*[])
     // setup connection to dbus
     boost::asio::io_service io;
     auto conn = std::make_shared<sdbusplus::asio::connection>(io);
+    std::variant<bool> sel_value;
 
     // IPMI SEL Object
     conn->request_name(ipmiSelObject);
@@ -286,6 +337,22 @@ int main(int, char*[])
             return selAddOemRecord(message, selData, recordType);
         });
 
+        ifaceAddSel->register_property("SEL_Enable", SEL_Enable,
+                                    // set handle
+                                    [&](const bool& status,
+                                        bool& propertyValue) {
+                                        propertyValue = status;
+                                        SEL_Enable = status;
+                                        return 1;
+                                    },
+                                    // get handle
+                                    [&](bool& propertyValue) {
+                                        propertyValue = SEL_Enable;
+                                        return propertyValue;
+                                    });
+
+        recordIndex = initializeRecordId();
+
 #ifdef SEL_LOGGER_CLEARS_SEL
 #ifndef SEL_LOGGER_SEND_TO_LOGGING_SERVICE
     // Clear SEL entries
-- 
2.33.0

