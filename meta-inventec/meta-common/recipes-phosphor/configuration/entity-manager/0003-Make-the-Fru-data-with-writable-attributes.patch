From 3da54274df49bd1fdc82c24d7c6e73b6363563f4 Mon Sep 17 00:00:00 2001
From: Matt Cheng <cheng.matt@inventec.com>
Date: Mon, 5 Sep 2022 11:08:49 +0800
Subject: [PATCH] Make the Fru data with writable attributes.

Symptom/Reason:
        The dbus cannot modify the Fru data, so make the Fru data with writable attributes.

Solution/Change:
        [Entity Manager]
          1. Make all property has a writable attribute.
          2. Change the productName with bus and address.

Entry Test:
        busctl tree xyz.openbmc_project.FruDevice
        busctl set-property xyz.openbmc_project.FruDevice /xyz/openbmc_project/FruDevice/3_80 xyz.openbmc_project.FruDevice BOARD_PRODUCT_NAME s "TRANSFORMERS"

---
 src/fru_device.cpp | 62 ++++++++++++++++++++++------------------------
 src/fru_utils.cpp  |  0
 2 files changed, 29 insertions(+), 33 deletions(-)
 mode change 100755 => 100644 src/fru_utils.cpp

diff --git a/src/fru_device.cpp b/src/fru_device.cpp
index 5862876..b8c3e63 100644
--- a/src/fru_device.cpp
+++ b/src/fru_device.cpp
@@ -667,8 +667,9 @@ void addFruObjectToDbus(
         return;
     }

-    std::string productName =
-        "/xyz/openbmc_project/FruDevice/" + optionalProductName.value();
+    //Modified by Matt, Change the Fru Device path from product name to [bus]_[address]
+    std::string productName = "/xyz/openbmc_project/FruDevice/"
+                        + std::to_string(bus) + "_" + std::to_string(address);

     std::optional<int> index = findIndexForFRU(dbusInterfaceMap, productName);
     if (index.has_value())
@@ -693,37 +694,32 @@ void addFruObjectToDbus(
         std::string key =
             std::regex_replace(property.first, nonAsciiRegex, "_");

-        if (property.first == "PRODUCT_ASSET_TAG")
-        {
-            std::string propertyName = property.first;
-            iface->register_property(
-                key, property.second + '\0',
-                [bus, address, propertyName, &dbusInterfaceMap,
-                 &unknownBusObjectCount, &powerIsOn, &objServer,
-                 &systemBus](const std::string& req, std::string& resp) {
-                    if (strcmp(req.c_str(), resp.c_str()) != 0)
+        //Modified by Matt, make all VPD with writable attributes.
+        std::string propertyName = property.first;
+        iface->register_property(
+            key, property.second + '\0',
+            [bus, address, propertyName, &dbusInterfaceMap,
+            &unknownBusObjectCount, &powerIsOn, &objServer,
+            &systemBus](const std::string& req, std::string& resp) {
+                if (strcmp(req.c_str(), resp.c_str()) != 0)
+                {
+                    // call the method which will update
+                    if (updateFRUProperty(req, bus, address, propertyName,
+                                        dbusInterfaceMap,
+                                        unknownBusObjectCount, powerIsOn,
+                                        objServer, systemBus))
                     {
-                        // call the method which will update
-                        if (updateFRUProperty(req, bus, address, propertyName,
-                                              dbusInterfaceMap,
-                                              unknownBusObjectCount, powerIsOn,
-                                              objServer, systemBus))
-                        {
-                            resp = req;
-                        }
-                        else
-                        {
-                            throw std::invalid_argument(
-                                "FRU property update failed.");
-                        }
+                        resp = req;
                     }
-                    return 1;
-                });
-        }
-        else if (!iface->register_property(key, property.second + '\0'))
-        {
-            std::cerr << "illegal key: " << key << "\n";
-        }
+                    else
+                    {
+                        throw std::invalid_argument(
+                            "FRU property update failed.");
+                    }
+                }
+                return 1;
+            });
+
         if (debug)
         {
             std::cout << property.first << ": " << property.second << "\n";
@@ -1147,8 +1143,8 @@ bool updateFRUProperty(
         std::copy(restFRUAreasData.begin(), restFRUAreasData.end(),
                   fruData.begin() + nextFRUAreaNewLoc);
         // Update Common Header
-        for (fruAreas nextFRUArea = fruAreas::fruAreaInternal;
-             nextFRUArea <= fruAreas::fruAreaMultirecord; ++nextFRUArea)
+        for (fruAreas nextFRUArea = fruAreas::fruAreaInternal; nextFRUArea <= fruAreas::fruAreaMultirecord;
+             ++nextFRUArea)
         {
             unsigned int fruAreaOffsetField =
                 getHeaderAreaFieldOffset(nextFRUArea);
diff --git a/src/fru_utils.cpp b/src/fru_utils.cpp
old mode 100755
new mode 100644
--
2.25.1