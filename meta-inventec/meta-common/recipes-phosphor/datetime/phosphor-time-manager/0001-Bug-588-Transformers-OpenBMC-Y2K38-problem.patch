From c7fafc4ff3d62f78ee5551bf487d83b3b841a6ad Mon Sep 17 00:00:00 2001
From: "Fred.Chang" <chang.fredys@inventec.com>
Date: Thu, 14 Oct 2021 06:47:22 +0000
Subject: [PATCH] Bug 588 - [Transformers][OpenBMC] Y2K38 problem

Symptom/Reason :
    - system crash after 2038-01-19 03:14:07

Root Cause:
    - time over 2038-01-19 03:14:07

Solution/Change:
    [phosphor-time-manager]
        - Use a timer to poll time if the time is over 2038-01-19 03:14:00 and change the time to 2000/01/01 00:00:00

Entry Test:
    # ipmitool raw 0x0a 0x49 0xff 0xff 0xff 0x7f
    # date
    Sat Jan  1 00:00:00 GMT 2000

---
 bmc_epoch.cpp | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/bmc_epoch.cpp b/bmc_epoch.cpp
index ad65777..eeae3e1 100644
--- a/bmc_epoch.cpp
+++ b/bmc_epoch.cpp
@@ -38,6 +38,9 @@ namespace server = sdbusplus::xyz::openbmc_project::Time::server;
 using namespace phosphor::logging;
 using FailedError = sdbusplus::xyz::openbmc_project::Time::Error::Failed;

+constexpr uint64_t maxtimeFor2Y38 = 2147483640000000;
+constexpr time_t mintimeFor2Y38 = 946684800;
+
 void BmcEpoch::initialize()
 {
     using InternalFailure =
@@ -45,9 +48,10 @@ void BmcEpoch::initialize()

     // Subscribe time change event
     // Choose the MAX time that is possible to avoid mis fires.
-    constexpr itimerspec maxTime = {
-        {0, 0},          // it_interval
-        {TIME_T_MAX, 0}, // it_value
+    struct itimerspec maxTime =
+    {
+        { 1, 0 }, // Set to {0, 0} if you need a one-shot timer
+        { 1, 0 }
     };

     timeFd = timerfd_create(CLOCK_REALTIME, 0);
@@ -58,7 +62,7 @@ void BmcEpoch::initialize()
     }

     auto r = timerfd_settime(
-        timeFd, TFD_TIMER_ABSTIME | TFD_TIMER_CANCEL_ON_SET, &maxTime, nullptr);
+        timeFd, 0/*TFD_TIMER_ABSTIME | TFD_TIMER_CANCEL_ON_SET*/, &maxTime, nullptr);
     if (r != 0)
     {
         error("Failed to set timerfd: {ERRNO}", "ERRNO", errno);
@@ -94,6 +98,7 @@ uint64_t BmcEpoch::elapsed(uint64_t value)
         NTP   | Fail to set
         MANUAL| OK
     */
+    if(value > maxtimeFor2Y38) value = maxtimeFor2Y38;
     auto time = microseconds(value);
     setTime(time);

@@ -102,18 +107,23 @@ uint64_t BmcEpoch::elapsed(uint64_t value)
 }

 int BmcEpoch::onTimeChange(sd_event_source* /* es */, int fd,
-                           uint32_t /* revents */, void* /* userdata */)
+                           uint32_t /* revents */, void* userdata)
 {
-    std::array<char, 64> time{};
+    BmcEpoch *epoch = (BmcEpoch *)userdata;

-    // We are not interested in the data here.
-    // So read until there is no new data here in the FD
-    while (read(fd, time.data(), time.max_size()) > 0)
-    {
-        ;
+    std::array<char, 64> time{};
+    int ret = read(fd, time.data(), time.max_size());
+    uint64_t t64 = epoch->elapsed();
+    //std::fprintf(stderr, "ff<%s, %d> gettiem = %lld\n",__FILE__,__LINE__, t64);
+    if(t64 >= maxtimeFor2Y38) {
+        std::fprintf(stderr, "ff<%s, %d> reset time to %ld\n",__FILE__,__LINE__, mintimeFor2Y38);
+        struct timespec ts;
+        ts.tv_sec = mintimeFor2Y38;
+        ts.tv_nsec = 0;
+        clock_settime(CLOCK_REALTIME, &ts);
     }

-    return 0;
+    return ret;
 }

 void BmcEpoch::onModeChanged(Mode mode)
--
2.25.1