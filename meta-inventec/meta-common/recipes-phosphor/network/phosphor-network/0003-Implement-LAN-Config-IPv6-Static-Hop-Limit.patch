From 1b7f5f3aff44e94d69274d4de216a7e34561a205 Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Mon, 7 Mar 2022 06:59:49 +0000
Subject: [PATCH 03/10] Implement LAN Config IPv6 Static Hop Limit

---
 src/config_parser.cpp      | 15 +++++++++++++++
 src/config_parser.hpp      |  2 ++
 src/ethernet_interface.cpp | 19 +++++++++++++++++++
 src/ethernet_interface.hpp |  6 ++++++
 src/util.cpp               | 13 +++++++++++++
 src/util.hpp               |  6 ++++++
 6 files changed, 61 insertions(+)

diff --git a/src/config_parser.cpp b/src/config_parser.cpp
index 25c4d11..87ee1c9 100644
--- a/src/config_parser.cpp
+++ b/src/config_parser.cpp
@@ -3,6 +3,7 @@
 #include <fmt/compile.h>
 #include <fmt/format.h>
 
+#include <charconv>
 #include <functional>
 #include <iterator>
 #include <stdexcept>
@@ -44,6 +45,20 @@ std::optional<bool> parseBool(std::string_view in) noexcept
     return std::nullopt;
 }
 
+std::optional<int> parseInt(std::string_view in) noexcept
+{
+    if (!in.empty())
+    {
+        int result{};
+        auto [ptr, ec] = std::from_chars(in.data(), in.data() + in.size(), result);
+        if (ec == std::errc())
+        {
+            return result;
+        }
+    }
+    return std::nullopt;
+}
+
 fs::path pathForIntfConf(const fs::path& dir, std::string_view intf)
 {
     return dir / fmt::format(FMT_COMPILE("00-bmc-{}.network"), intf);
diff --git a/src/config_parser.hpp b/src/config_parser.hpp
index 5df8d98..786ab84 100644
--- a/src/config_parser.hpp
+++ b/src/config_parser.hpp
@@ -20,6 +20,8 @@ namespace config
 bool icaseeq(std::string_view in, std::string_view expected) noexcept;
 /** @brief Turns a systemd bool string into a c++ bool */
 std::optional<bool> parseBool(std::string_view in) noexcept;
+/** @brief Turns a systemd bool string into a c++ int */
+std::optional<int> parseInt(std::string_view in) noexcept;
 
 namespace fs = std::filesystem;
 
diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index 92efd99..057ca74 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -122,6 +122,7 @@ EthernetInterface::EthernetInterface(stdplus::PinnedRef<sdbusplus::bus_t> bus,
     EthernetInterfaceIntf::dhcp6(dhcpVal.v6, true);
     EthernetInterfaceIntf::ipv6AcceptRA(getIPv6AcceptRA(config), true);
     EthernetInterfaceIntf::nicEnabled(enabled, true);
+    EthernetInterfaceIntf::ipv6HopLimit(getIPv6HopValue(config));
 
     EthernetInterfaceIntf::ntpServers(
         config.map.getValueStrings("Network", "NTP"), true);
@@ -680,6 +681,11 @@ void EthernetInterface::writeConfigurationFile()
         network["IPv6AcceptRA"].emplace_back(ipv6AcceptRA() ? "true" : "false");
         network["DHCP"].emplace_back(dhcp4() ? (dhcp6() ? "true" : "ipv4")
                                              : (dhcp6() ? "ipv6" : "false"));
+        if (ipv6HopLimit() > 0)
+        {
+            network["IPv6HopLimit"].emplace_back(std::to_string(ipv6HopLimit()));
+        }
+
         {
             auto& vlans = network["VLAN"];
             for (const auto& [_, intf] : manager.get().interfaces)
@@ -918,6 +924,19 @@ std::string EthernetInterface::defaultGateway6(std::string gateway)
     return gateway;
 }
 
+uint8_t EthernetInterface::ipv6HopLimit(uint8_t value)
+{
+    if (value == EthernetInterfaceIntf::ipv6HopLimit())
+    {
+        return value;
+    }
+
+    EthernetInterfaceIntf::ipv6HopLimit(value);
+    writeConfigurationFile();
+    manager.get().reloadConfigs();
+    return value;
+}
+
 EthernetInterface::VlanProperties::VlanProperties(
     sdbusplus::bus_t& bus, stdplus::const_zstring objPath,
     const InterfaceInfo& info, stdplus::PinnedRef<EthernetInterface> eth) :
diff --git a/src/ethernet_interface.hpp b/src/ethernet_interface.hpp
index b66030a..247fd07 100644
--- a/src/ethernet_interface.hpp
+++ b/src/ethernet_interface.hpp
@@ -197,6 +197,11 @@ class EthernetInterface : public Ifaces
      */
     std::string defaultGateway6(std::string gateway) override;
 
+    /** @brief set the default v6 hop limit of the interface.
+     *  @param[in] gateway - default v6 hop limit of the interface.
+     */
+    uint8_t ipv6HopLimit(uint8_t value) override;
+
     using EthernetInterfaceIntf::interfaceName;
     using EthernetInterfaceIntf::linkUp;
     using EthernetInterfaceIntf::mtu;
@@ -205,6 +210,7 @@ class EthernetInterface : public Ifaces
 
     using EthernetInterfaceIntf::defaultGateway;
     using EthernetInterfaceIntf::defaultGateway6;
+    using EthernetInterfaceIntf::ipv6HopLimit;
 
   protected:
     /** @brief get the NTP server list from the timsyncd dbus obj
diff --git a/src/util.cpp b/src/util.cpp
index 0b9c1e2..6954388 100644
--- a/src/util.cpp
+++ b/src/util.cpp
@@ -214,6 +214,19 @@ bool getDHCPProp(const config::Parser& config, std::string_view key)
         .value_or(true);
 }
 
+uint8_t getIPv6HopValue(const config::Parser& config)
+{
+    constexpr int def = 64;
+    auto hopLimit = systemdParseLast(config, "Network", "IPv6HopLimit", config::parseInt)
+        .value_or(def);
+
+    if (hopLimit < 0)
+    {
+        hopLimit = def;
+    }
+    return static_cast<uint8_t>(hopLimit);
+}
+
 namespace mac_address
 {
 
diff --git a/src/util.hpp b/src/util.hpp
index 90beca2..166d60f 100644
--- a/src/util.hpp
+++ b/src/util.hpp
@@ -85,6 +85,12 @@ DHCPVal getDHCPValue(const config::Parser& config);
  */
 bool getDHCPProp(const config::Parser& config, std::string_view key);
 
+/** @brief read the IPv6HopLimit value from the configuration file
+ *  @param[in] confDir - Network configuration directory.
+ *  @param[in] intf - Interface name.
+ */
+uint8_t getIPv6HopValue(const config::Parser& config);
+
 namespace internal
 {
 
-- 
2.25.1