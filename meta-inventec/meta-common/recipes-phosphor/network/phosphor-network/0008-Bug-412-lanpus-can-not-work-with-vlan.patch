From 273012444c21246b40d6e787312a1f4758ecf20a Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Tue, 8 Mar 2022 07:20:35 +0000
Subject: [PATCH 08/10] Bug 412 [Transformers][OpenBMC][IPMI] lanpus can not
 work with vlan tag

    Symptom/Reason :
        - ipmitool can not connect to BMC box after setting up vlan in bmc box

    Root Cause:
        - the netipmid process should be restarted to re-binding the vlan interface

    Solution/Change:
        [phosphor-network]
            - arrange a timer to restart the netipmid process to re-bind the vlan interface
                after the vlan interface on bmcbox is created or be destroyed.
            - The network manager will get the vlan parent interface name which creating vlan object and delete vlan object. Manger will save the interface name in manager. Then Manager will restart the netipmid by using the stored interface name.

    Entry Test:
        - in bmcbox
            -- setup vlan
                -- ipmitool lan set 1 vlan id 2
            -- ensure the netipmid restart
                -- ps | grep netipmid
                -- the pid of netipmid will change

        -- in clinet, testing by ipmitool command
            -- ipmitool -I lanplus -C17 -H 10.6.141.170 -p 623 -U root -P 0penBmc shell
            -- it will connect to bmcbox
            -- ipmitool> lan print
                Set in Progress         : Set Complete
                Auth Type Support       :
                Auth Type Enable        : Callback :
                                        : User     :
                                        : Operator :
                                        : Admin    :
                                        : OEM      :
                IP Address Source       : Static Address
                IP Address              : 192.168.2.20
                Subnet Mask             : 255.255.255.0
                MAC Address             : 00:03:ff:00:00:cc
                SNMP Community String   : public
                Default Gateway IP      : 10.0.2.2
                Default Gateway MAC     : 00:00:00:00:00:00
                802.1q VLAN ID          : 2
                802.1q VLAN Priority    : 0
                RMCP+ Cipher Suites     : 17

---
 src/ethernet_interface.cpp | 11 +++++++++++
 src/ethernet_interface.hpp |  3 +++
 src/network_manager.cpp    | 32 ++++++++++++++++++++++++++++++++
 src/network_manager.hpp    |  6 ++++++
 4 files changed, 52 insertions(+)

diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index 3f96c94..4d53864 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -979,6 +979,13 @@ uint8_t EthernetInterface::ipv6HopLimit(uint8_t value)
     return value;
 }
 
+void EthernetInterface::restartNetipmid(void)
+{
+    log<level::INFO>("Sending ipmi-net reload");
+    manager.get().restartSystemdUnit("phosphor-ipmi-net@" + interfaceName() + ".service");
+    log<level::INFO>("Done ipmi-net reload");
+}
+
 EthernetInterface::IPFamilyConf EthernetInterface::ipFamily(IPFamilyConf value)
 {
     if (value == EthernetInterfaceIntf::ipFamily())
@@ -1033,6 +1040,7 @@ EthernetInterface::VlanProperties::VlanProperties(
     VlanIntf::id(*info.vlan_id, true);
     VlanIntf::priority(*info.vlan_priority, true);
     emit_object_added();
+    eth.get().restartNetipmid();
 }
 
 uint8_t EthernetInterface::VlanProperties::priority(uint8_t value)
@@ -1086,6 +1094,9 @@ void EthernetInterface::VlanProperties::delete_()
         eth.get().manager.get().ignoredIntf.emplace(eth.get().ifIdx);
     }
 
+    // We need to reload netipmid so that lanplus can work properly
+    eth.get().manager.get().addReloadPostHook(
+        [&]() { eth.get().restartNetipmid(); });
     eth.get().manager.get().reloadConfigs();
 }
 
diff --git a/src/ethernet_interface.hpp b/src/ethernet_interface.hpp
index b0099c8..8d076cd 100644
--- a/src/ethernet_interface.hpp
+++ b/src/ethernet_interface.hpp
@@ -205,6 +205,9 @@ class EthernetInterface : public Ifaces
     /** Set value of IPFamily */
     IPFamilyConf ipFamily(IPFamilyConf value) override;
 
+    /** Restart phosphor-ipmi-net service */
+    void restartNetipmid(void);
+
     using EthernetInterfaceIntf::interfaceName;
     using EthernetInterfaceIntf::linkUp;
     using EthernetInterfaceIntf::mtu;
diff --git a/src/network_manager.cpp b/src/network_manager.cpp
index ffcae48..fa7f658 100644
--- a/src/network_manager.cpp
+++ b/src/network_manager.cpp
@@ -523,5 +523,37 @@ void Manager::handleAdminState(std::string_view state, unsigned ifidx)
     }
 }
 
+void Manager::restartSystemdUnit(const std::string& unit)
+{
+    try
+    {
+        auto method = bus.get().new_method_call(SYSTEMD_BUSNAME, SYSTEMD_PATH,
+                                          SYSTEMD_INTERFACE, "ResetFailedUnit");
+        method.append(unit);
+        bus.get().call_noreply(method);
+    }
+    catch (const sdbusplus::exception::SdBusError& ex)
+    {
+        log<level::ERR>("Failed to reset failed unit",
+                        entry("UNIT=%s", unit.c_str()),
+                        entry("ERR=%s", ex.what()));
+        elog<InternalFailure>();
+    }
+
+    try
+    {
+        auto method = bus.get().new_method_call(SYSTEMD_BUSNAME, SYSTEMD_PATH,
+                                          SYSTEMD_INTERFACE, "RestartUnit");
+        method.append(unit.c_str(), "replace");
+        bus.get().call_noreply(method);
+    }
+    catch (const sdbusplus::exception::SdBusError& ex)
+    {
+        log<level::ERR>("Failed to restart service", entry("ERR=%s", ex.what()),
+                        entry("UNIT=%s", unit.c_str()));
+        elog<InternalFailure>();
+    }
+}
+
 } // namespace network
 } // namespace phosphor
diff --git a/src/network_manager.hpp b/src/network_manager.hpp
index 490c4bc..13055f6 100644
--- a/src/network_manager.hpp
+++ b/src/network_manager.hpp
@@ -77,6 +77,12 @@ class Manager : public ManagerIface
     void addDefGw(unsigned ifidx, InAddrAny addr);
     void removeDefGw(unsigned ifidx, InAddrAny addr);
 
+    /** @brief Restart the systemd unit
+     *  @param[in] unit - systemd unit name which needs to be
+     *                    restarted.
+     */
+    void restartSystemdUnit(const std::string& unit);
+
     /** @brief gets the network conf directory.
      */
     inline const auto& getConfDir() const
-- 
2.25.1