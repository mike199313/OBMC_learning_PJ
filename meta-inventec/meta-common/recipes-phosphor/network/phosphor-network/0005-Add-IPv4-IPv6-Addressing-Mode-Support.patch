From e3d91019f32e431c3c7697e1832fe85c489e5a5c Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Mon, 7 Mar 2022 09:31:30 +0000
Subject: [PATCH 05/10] Add IPv4 IPv6 Addressing Mode Support

Symptom/Reason :
    - Enable IPv6 and disable IPv4 in raw command does not work

Root Cause:
    - OpenBMC's implementation supports only IPv4/IPv6 dual mode

Solution/Change:
    [phosphor-dbus-interfaces]
        - Add IPFamily property in EthernetInterface
    [phosphor-ipmi-host]
        - Add function call to get/set IPFamily property
    [phosphor-network]
        - Implementation of get/set IPFamily property

Entry Test:
    - Set to IPv6 only mode
        ipmitool raw 0x0c 0x01 0x01 0x33 0x01
    - Get current IP addressing mode
        ipmitool raw 0x0c 0x02 0x01 0x33 0x00 0x00

---
 meson.build                |  1 +
 meson_options.txt          |  2 ++
 src/ethernet_interface.cpp | 71 ++++++++++++++++++++++++++++++++++++++
 src/ethernet_interface.hpp |  4 +++
 src/util.cpp               | 18 ++++++++++
 src/util.hpp               | 10 ++++++
 6 files changed, 106 insertions(+)

diff --git a/meson.build b/meson.build
index 0b49b6a..b17dbfb 100644
--- a/meson.build
+++ b/meson.build
@@ -22,6 +22,7 @@ conf_data.set(
 conf_data.set('SYNC_MAC_FROM_INVENTORY', get_option('sync-mac'))
 conf_data.set('PERSIST_MAC', get_option('persist-mac'))
 conf_data.set10('FORCE_SYNC_MAC_FROM_INVENTORY', get_option('force-sync-mac'))
+conf_data.set_quoted('DEFAULT_NIC', get_option('default-nic'))
 
 sdbusplus_dep = dependency('sdbusplus')
 sdbusplusplus_prog = find_program('sdbus++', native: true)
diff --git a/meson_options.txt b/meson_options.txt
index 56234e6..251118c 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -14,4 +14,6 @@ option('persist-mac', type: 'boolean',
        description: 'Permit the MAC address to be written to the systemd.network config')
 option('force-sync-mac', type: 'boolean',
        description: 'Force sync mac address no matter is first boot or not')
+option('default-nic', type: 'string', value : 'eth0',
+       description: 'Default network interface')
 
diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index c932205..c91d5fa 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -44,6 +44,7 @@ constexpr auto TIMESYNCD_INTERFACE = "org.freedesktop.timesync1.Manager";
 constexpr auto TIMESYNCD_SERVICE_PATH = "/org/freedesktop/timesync1";
 
 constexpr auto METHOD_GET = "Get";
+constexpr auto USB_INTF_NAME = "usb0";
 
 
 constexpr char SYSTEMD_BUSNAME[] = "org.freedesktop.systemd1";
@@ -123,6 +124,7 @@ EthernetInterface::EthernetInterface(stdplus::PinnedRef<sdbusplus::bus_t> bus,
     EthernetInterfaceIntf::ipv6AcceptRA(getIPv6AcceptRA(config), true);
     EthernetInterfaceIntf::nicEnabled(enabled, true);
     EthernetInterfaceIntf::ipv6HopLimit(getIPv6HopValue(config));
+    EthernetInterfaceIntf::ipFamily(getIPFamilyConf());
 
     EthernetInterfaceIntf::ntpServers(
         config.map.getValueStrings("Network", "NTP"), true);
@@ -657,6 +659,12 @@ ServerList EthernetInterface::ntpServers(ServerList /*servers*/)
 
 void EthernetInterface::writeConfigurationFile()
 {
+    if (interfaceName() == USB_INTF_NAME)
+    {
+        // usb0 interface is not cinfigurable
+        return;
+    }
+
     config::Parser config;
     config.map["Match"].emplace_back()["Name"].emplace_back(interfaceName());
     {
@@ -681,7 +689,25 @@ void EthernetInterface::writeConfigurationFile()
 #else
         lla.emplace_back("no");
 #endif
+        if (EthernetInterfaceIntf::ipFamily() == EthernetInterfaceIntf::IPFamilyConf::v4)
+        {
+            lla.emplace_back("ipv4");
+        }
+        else if (EthernetInterfaceIntf::ipFamily() == EthernetInterfaceIntf::IPFamilyConf::v6)
+        {
+            lla.emplace_back("ipv6");
+        }
+
         network["IPv6AcceptRA"].emplace_back(ipv6AcceptRA() ? "true" : "false");
+
+        if (EthernetInterfaceIntf::ipFamily() == EthernetInterfaceIntf::IPFamilyConf::v4)
+        {
+            network["IPv6AcceptRA"].emplace_back("false");
+        }
+        else if (EthernetInterfaceIntf::ipFamily() == EthernetInterfaceIntf::IPFamilyConf::v6)
+        {
+            network["IPv6AcceptRA"].emplace_back("true");
+        }
         network["DHCP"].emplace_back(dhcp4() ? (dhcp6() ? "true" : "ipv4")
                                              : (dhcp6() ? "ipv6" : "false"));
         if (ipv6HopLimit() > 0)
@@ -940,6 +966,51 @@ uint8_t EthernetInterface::ipv6HopLimit(uint8_t value)
     return value;
 }
 
+EthernetInterface::IPFamilyConf EthernetInterface::ipFamily(IPFamilyConf value)
+{
+    if (value == EthernetInterfaceIntf::ipFamily())
+    {
+        return value;
+    }
+
+    EthernetInterfaceIntf::ipFamily(value);
+    DHCPConf dhcp_orig = EthernetInterfaceIntf::dhcpEnabled();
+    DHCPConf dhcp_next = DHCPConf::both;
+    std::string strMode = "both";
+
+    if (value == IPFamilyConf::v4)
+    {
+        strMode = "v4";
+        dhcp_next = DHCPConf::v4;
+    }
+    else if (value == IPFamilyConf::v6)
+    {
+        strMode = "v6";
+        dhcp_next = DHCPConf::v6;
+    }
+
+    updateConfigValue<std::string>(LAN_CONFIG_IP_FAMILY, strMode);
+
+    // We only need to bring down the interface, networkd will always bring
+    // up managed interfaces
+    manager.get().addReloadPreHook(
+        [ifname = interfaceName()]() { system::setNICUp(ifname, false); });
+
+    if (dhcp_orig == dhcp_next)
+    {
+        // No need to update DHCP settings
+        writeConfigurationFile();
+        manager.get().reloadConfigs();
+    }
+    else
+    {
+        // Let dhcpEnabled handle config write and reload
+        dhcpEnabled(dhcp_next);
+    }
+
+    return value;
+}
+
 EthernetInterface::VlanProperties::VlanProperties(
     sdbusplus::bus_t& bus, stdplus::const_zstring objPath,
     const InterfaceInfo& info, stdplus::PinnedRef<EthernetInterface> eth) :
diff --git a/src/ethernet_interface.hpp b/src/ethernet_interface.hpp
index 21aea1b..b0099c8 100644
--- a/src/ethernet_interface.hpp
+++ b/src/ethernet_interface.hpp
@@ -202,6 +202,9 @@ class EthernetInterface : public Ifaces
      */
     uint8_t ipv6HopLimit(uint8_t value) override;
 
+    /** Set value of IPFamily */
+    IPFamilyConf ipFamily(IPFamilyConf value) override;
+
     using EthernetInterfaceIntf::interfaceName;
     using EthernetInterfaceIntf::linkUp;
     using EthernetInterfaceIntf::mtu;
@@ -211,6 +214,7 @@ class EthernetInterface : public Ifaces
     using EthernetInterfaceIntf::defaultGateway;
     using EthernetInterfaceIntf::defaultGateway6;
     using EthernetInterfaceIntf::ipv6HopLimit;
+    using EthernetInterfaceIntf::ipFamily;
 
   protected:
     /** @brief get the NTP server list from the timsyncd dbus obj
diff --git a/src/util.cpp b/src/util.cpp
index 6954388..e297283 100644
--- a/src/util.cpp
+++ b/src/util.cpp
@@ -227,6 +227,24 @@ uint8_t getIPv6HopValue(const config::Parser& config)
     return static_cast<uint8_t>(hopLimit);
 }
 
+EthernetInterfaceIntf::IPFamilyConf getIPFamilyConf()
+{
+    EthernetInterfaceIntf::IPFamilyConf mode = EthernetInterfaceIntf::IPFamilyConf::both;
+    std::string strMode = "both";
+    loadConfigValue<std::string>(LAN_CONFIG_IP_FAMILY, strMode);
+
+    if (strMode == "v4")
+    {
+        mode = EthernetInterfaceIntf::IPFamilyConf::v4;
+    }
+    else if (strMode == "v6")
+    {
+        mode = EthernetInterfaceIntf::IPFamilyConf::v6;
+    }
+
+    return mode;
+}
+
 namespace mac_address
 {
 
diff --git a/src/util.hpp b/src/util.hpp
index 96bb79c..97efed9 100644
--- a/src/util.hpp
+++ b/src/util.hpp
@@ -12,6 +12,7 @@
 #include <iomanip>
 #include <nlohmann/json.hpp>
 #include <phosphor-logging/log.hpp>
+#include <xyz/openbmc_project/Network/EthernetInterface/server.hpp>
 
 namespace phosphor
 {
@@ -96,6 +97,14 @@ bool getDHCPProp(const config::Parser& config, std::string_view key);
  */
 uint8_t getIPv6HopValue(const config::Parser& config);
 
+using EthernetInterfaceIntf =
+    sdbusplus::xyz::openbmc_project::Network::server::EthernetInterface;
+
+/** @brief read the IPFamilyConf value from the configuration file
+ *
+ */
+EthernetInterfaceIntf::IPFamilyConf getIPFamilyConf();
+
 namespace internal
 {
 
@@ -135,6 +144,7 @@ void execute(stdplus::const_zstring path, ArgTypes&&... tArgs)
 constexpr auto LAN_CFG_FILE = "/usr/share/ipmi-providers/lan_config.json";
 // Config name for LAN Config Parameters
 constexpr auto LAN_CONFIG_VLAN_PCP = "vlan_priority";
+constexpr auto LAN_CONFIG_IP_FAMILY = "ip_family";
 
 /** @brief get config value from LAN configuration file.
  *  @param[in] name - config name.
-- 
2.25.1