From 1050a281ebb50f1e1c07f44e513503cfbadc5eea Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Mon, 7 Mar 2022 07:44:52 +0000
Subject: [PATCH 04/10] Implement LAN Config VLAN Priority

Symptom/Reason :
    - Implement LAN Config VLAN Priority

Root Cause:
    - N/A

Solution/Change:
    [phospher-dbus-interfaces]
        - Add Priority property in xyz.openbmc_project.Network.VLAN interface
    [phospher-ipmi-config]
        - Add vlan_priority field in lan_config.json
    [phospher-ipmi-host]
        - Use xyz.openbmc_project.Network.VLAN interface to get/set VLAN Priority
    [phospher-network]
        - Use vconfig command to set VLAN priority
        - Read/Write vlan_priority value from/to lan_config.json

Entry Test:
    - Set VLAN id
        ipmitool raw 0x0c 0x01 0x01 0x14 0x64 0x80
    - Set VLAN priority
        ipmitool raw 0x0c 0x01 0x01 0x15 0x5
    - Get VLAN priority
        ipmitool raw 0x0c 0x02 0x01 0x15 0x00 0x00
---
 src/ethernet_interface.cpp |  6 ++--
 src/util.hpp               | 66 ++++++++++++++++++++++++++++++++++++++
 src/vlan_interface.cpp     | 17 +++++++++-
 src/vlan_interface.hpp     | 10 +++++-
 4 files changed, 95 insertions(+), 4 deletions(-)

diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index 6381e32..e5437ef 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -939,9 +939,11 @@ void EthernetInterface::loadVLAN(VlanId id)
 
     DHCPConf dhcpEnabled =
         getDHCPValue(manager.getConfDir().string(), vlanInterfaceName);
+    uint8_t priority = 0;
+    loadConfigValue<uint8_t>(LAN_CONFIG_VLAN_PCP, priority);
     auto vlanIntf = std::make_unique<phosphor::network::VlanInterface>(
         bus, path.c_str(), dhcpEnabled, EthernetInterfaceIntf::nicEnabled(), id,
-        *this, manager);
+        *this, manager, priority);
 
     // Fetch the ip address from the system
     // and create the dbus object.
@@ -964,7 +966,7 @@ ObjectPath EthernetInterface::createVLAN(VlanId id)
 
     auto vlanIntf = std::make_unique<phosphor::network::VlanInterface>(
         bus, path.c_str(), EthernetInterface::DHCPConf::none,
-        EthernetInterfaceIntf::nicEnabled(), id, *this, manager);
+        EthernetInterfaceIntf::nicEnabled(), id, *this, manager, (uint8_t)0);
 
     // write the device file for the vlan interface.
     vlanIntf->writeDeviceFile();
diff --git a/src/util.hpp b/src/util.hpp
index e9a66d2..c5ac808 100644
--- a/src/util.hpp
+++ b/src/util.hpp
@@ -14,6 +14,10 @@
 #include <string>
 #include <string_view>
 #include <xyz/openbmc_project/Network/EthernetInterface/server.hpp>
+#include <fstream>
+#include <iomanip>
+#include <nlohmann/json.hpp>
+#include <phosphor-logging/log.hpp>
 
 namespace phosphor
 {
@@ -199,6 +203,68 @@ void execute(const char* path, ArgTypes&&... tArgs)
     internal::executeCommandinChildProcess(path, args);
 }
 
+// Config file for LAN Config Parameters
+constexpr auto LAN_CFG_FILE = "/usr/share/ipmi-providers/lan_config.json";
+// Config name for LAN Config Parameters
+constexpr auto LAN_CONFIG_VLAN_PCP = "vlan_priority";
+
+using namespace phosphor::logging;
+
+/** @brief get config value from LAN configuration file.
++ *  @param[in] name - config name.
++ *  @param[out] val - value of the given config name.
++ */
+template <typename T> void loadConfigValue(const std::string& name, T& val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        log<level::ERR>("loadConfigValue : Cannot open config path");
+        return;
+    }
+
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        log<level::ERR>("loadConfigValue JSON parser failure");
+        return;
+    }
+
+    if (data.contains(name))
+    {
+        val = (T)data[name];
+    }
+}
+
+/** @brief get config value from LAN configuration file.
++ *  @param[in] name - config name.
++ *  @param[in] val - value of the given config name.
++ *  @return 0 if sucess, else returns none 0 value.
++ */
+template <typename T> int updateConfigValue(const std::string& name, T val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        log<level::ERR>("updateConfigValue : Cannot open config path");
+        return -1;
+    }
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        log<level::ERR>("updateConfigValue JSON parser failure");
+        return -2;
+    }
+
+    data[name] = val;
+    std::ofstream configStream(LAN_CFG_FILE);
+    configStream << std::setw(4) << data << std::endl;
+    configStream.close();
+    return 0;
+}
+
 } // namespace network
 
 class Descriptor
diff --git a/src/vlan_interface.cpp b/src/vlan_interface.cpp
index 2918989..95e199b 100644
--- a/src/vlan_interface.cpp
+++ b/src/vlan_interface.cpp
@@ -24,7 +24,8 @@ using namespace sdbusplus::xyz::openbmc_project::Common::Error;
 VlanInterface::VlanInterface(sdbusplus::bus::bus& bus,
                              const std::string& objPath, DHCPConf dhcpEnabled,
                              bool nicEnabled, uint32_t vlanID,
-                             EthernetInterface& intf, Manager& parent) :
+                             EthernetInterface& intf, Manager& parent,
+                             uint8_t vlanPriority) :
     VlanIface(bus, objPath.c_str()),
     DeleteIface(bus, objPath.c_str()),
     EthernetInterface(bus, objPath, dhcpEnabled, parent, /*emitSignal=*/false,
@@ -32,6 +33,7 @@ VlanInterface::VlanInterface(sdbusplus::bus::bus& bus,
     parentInterface(intf)
 {
     id(vlanID);
+    priority(vlanPriority);
     VlanIface::interfaceName(EthernetInterface::interfaceName());
     MacAddressIntf::macAddress(parentInterface.macAddress());
 
@@ -44,6 +46,19 @@ std::string VlanInterface::macAddress(std::string)
     elog<InternalFailure>();
 }
 
+uint8_t VlanInterface::priority(uint8_t value)
+{
+    if (value == VlanIface::priority())
+    {
+        return value;
+    }
+
+    VlanIface::priority(value);
+    execute("/sbin/vconfig", "vconfig", "set_egress_map", EthernetInterface::interfaceName().c_str(), "0", std::to_string((int)value).c_str());
+    updateConfigValue<uint8_t>(LAN_CONFIG_VLAN_PCP, value);
+    return value;
+}
+
 void VlanInterface::writeDeviceFile()
 {
     using namespace std::string_literals;
diff --git a/src/vlan_interface.hpp b/src/vlan_interface.hpp
index c003056..ad12db3 100644
--- a/src/vlan_interface.hpp
+++ b/src/vlan_interface.hpp
@@ -43,12 +43,13 @@ class VlanInterface : public VlanIface,
      *  @param[in] vlanID - vlan identifier.
      *  @param[in] intf - ethernet interface object.
      *  @param[in] manager - network manager object.
+     *  @param[in] vlanPriority - vlan priority.
      *
      *  This constructor is called during loading the VLAN Interface
      */
     VlanInterface(sdbusplus::bus::bus& bus, const std::string& objPath,
                   DHCPConf dhcpEnabled, bool nicEnabled, uint32_t vlanID,
-                  EthernetInterface& intf, Manager& parent);
+                  EthernetInterface& intf, Manager& parent, uint8_t vlanPriority);
 
     /** @brief Delete this d-bus object.
      */
@@ -60,6 +61,12 @@ class VlanInterface : public VlanIface,
      */
     std::string macAddress(std::string value) override;
 
+    /** @brief sets VLAN priority.
+     *  @param[in] value - VLAN priority value
+     *  @returns VLAN priority value of the interface or throws an error.
+     */
+    uint8_t priority(uint8_t value) override;
+
     /** @brief writes the device configuration.
                systemd reads this configuration file
                and creates the vlan interface.*/
@@ -68,6 +75,7 @@ class VlanInterface : public VlanIface,
   private:
     /** @brief VLAN Identifier. */
     using VlanIface::id;
+    using VlanIface::priority;
 
     EthernetInterface& parentInterface;
 
-- 
2.33.0

