From 1050a281ebb50f1e1c07f44e513503cfbadc5eea Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Mon, 7 Mar 2022 07:44:52 +0000
Subject: [PATCH 04/10] Implement LAN Config VLAN Priority

Symptom/Reason :
    - Implement LAN Config VLAN Priority

Root Cause:
    - N/A

Solution/Change:
    [phospher-dbus-interfaces]
        - Add Priority property in xyz.openbmc_project.Network.VLAN interface
    [phospher-ipmi-config]
        - Add vlan_priority field in lan_config.json
    [phospher-ipmi-host]
        - Use xyz.openbmc_project.Network.VLAN interface to get/set VLAN Priority
    [phospher-network]
        - Use vconfig command to set VLAN priority
        - Read/Write vlan_priority value from/to lan_config.json

Entry Test:
    - Set VLAN id
        ipmitool raw 0x0c 0x01 0x01 0x14 0x64 0x80
    - Set VLAN priority
        ipmitool raw 0x0c 0x01 0x01 0x15 0x5
    - Get VLAN priority
        ipmitool raw 0x0c 0x02 0x01 0x15 0x00 0x00

---
 src/ethernet_interface.cpp | 18 ++++++++++
 src/ethernet_interface.hpp |  8 +++++
 src/types.hpp              |  1 +
 src/util.hpp               | 71 ++++++++++++++++++++++++++++++++++++++
 4 files changed, 98 insertions(+)

diff --git a/src/ethernet_interface.cpp b/src/ethernet_interface.cpp
index 057ca74..c932205 100644
--- a/src/ethernet_interface.cpp
+++ b/src/ethernet_interface.cpp
@@ -595,6 +595,8 @@ ObjectPath EthernetInterface::createVLAN(uint16_t id)
     {
         mac.emplace(ToAddr<ether_addr>{}(macStr));
     }
+    uint8_t priority = 0;
+    loadConfigValue<uint8_t>(LAN_CONFIG_VLAN_PCP, priority);
     auto info = AllIntfInfo{InterfaceInfo{
         .idx = 0, // TODO: Query the correct value after creation
         .flags = 0,
@@ -603,6 +605,7 @@ ObjectPath EthernetInterface::createVLAN(uint16_t id)
         .mtu = mtu(),
         .parent_idx = ifIdx,
         .vlan_id = id,
+        .vlan_priority = priority,
     }};
 
     // Pass the parents nicEnabled property, so that the child
@@ -944,9 +947,24 @@ EthernetInterface::VlanProperties::VlanProperties(
     parentIdx(*info.parent_idx), eth(eth)
 {
     VlanIntf::id(*info.vlan_id, true);
+    VlanIntf::priority(*info.vlan_priority, true);
     emit_object_added();
 }
 
+uint8_t EthernetInterface::VlanProperties::priority(uint8_t value)
+{
+    if (value == VlanIntf::priority())
+    {
+        return value;
+    }
+
+    VlanIntf::priority(value);
+    execute("/sbin/vconfig", "vconfig", "set_egress_map",
+        eth.get().interfaceName().c_str(), "0", std::to_string((int)value).c_str());
+    updateConfigValue<uint8_t>(LAN_CONFIG_VLAN_PCP, value);
+    return value;
+}
+
 void EthernetInterface::VlanProperties::delete_()
 {
     auto intf = eth.get().interfaceName();
diff --git a/src/ethernet_interface.hpp b/src/ethernet_interface.hpp
index 247fd07..21aea1b 100644
--- a/src/ethernet_interface.hpp
+++ b/src/ethernet_interface.hpp
@@ -240,6 +240,14 @@ class EthernetInterface : public Ifaces
         void delete_() override;
         unsigned parentIdx;
         stdplus::PinnedRef<EthernetInterface> eth;
+
+        using VlanIntf::priority;
+
+        /** @brief sets VLAN priority.
+        *  @param[in] value - VLAN priority value
+        *  @returns VLAN priority value of the interface or throws an error.
+        */
+        uint8_t priority(uint8_t value) override;
     };
     std::optional<VlanProperties> vlan;
 
diff --git a/src/types.hpp b/src/types.hpp
index 8d1daf4..e8b6eb7 100644
--- a/src/types.hpp
+++ b/src/types.hpp
@@ -91,6 +91,7 @@ struct InterfaceInfo
     std::optional<unsigned> parent_idx = std::nullopt;
     std::optional<std::string> kind = std::nullopt;
     std::optional<uint16_t> vlan_id = std::nullopt;
+    std::optional<uint8_t> vlan_priority = std::nullopt;
 
     constexpr bool operator==(const InterfaceInfo& rhs) const noexcept
     {
diff --git a/src/util.hpp b/src/util.hpp
index 166d60f..96bb79c 100644
--- a/src/util.hpp
+++ b/src/util.hpp
@@ -8,6 +8,11 @@
 #include <string_view>
 #include <unordered_set>
 
+#include <fstream>
+#include <iomanip>
+#include <nlohmann/json.hpp>
+#include <phosphor-logging/log.hpp>
+
 namespace phosphor
 {
 namespace network
@@ -126,6 +131,72 @@ void execute(stdplus::const_zstring path, ArgTypes&&... tArgs)
     internal::executeCommandinChildProcess(path, args);
 }
 
+// Config file for LAN Config Parameters
+constexpr auto LAN_CFG_FILE = "/usr/share/ipmi-providers/lan_config.json";
+// Config name for LAN Config Parameters
+constexpr auto LAN_CONFIG_VLAN_PCP = "vlan_priority";
+
+/** @brief get config value from LAN configuration file.
+ *  @param[in] name - config name.
+ *  @param[out] val - value of the given config name.
+ */
+template <typename T> void loadConfigValue(const std::string& name, T& val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>
+            ("loadConfigValue : Cannot open config path");
+        return;
+    }
+
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>
+            ("loadConfigValue JSON parser failure");
+        return;
+    }
+
+    if (data.contains(name))
+    {
+        val = static_cast<T>(data[name]);
+    }
+
+    configFile.close();
+}
+
+/** @brief get config value from LAN configuration file.
+ *  @param[in] name - config name.
+ *  @param[in] val - value of the given config name.
+ *  @return 0 if sucess, else returns none 0 value.
+ */
+template <typename T> int updateConfigValue(const std::string& name, T val)
+{
+    std::ifstream configFile(LAN_CFG_FILE);
+    if (!configFile.is_open())
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>
+            ("updateConfigValue : Cannot open config path");
+        return -1;
+    }
+    auto data = nlohmann::json::parse(configFile, nullptr);
+
+    if (data.is_discarded())
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>
+            ("updateConfigValue JSON parser failure");
+        return -2;
+    }
+
+    data[name] = val;
+    std::ofstream configStream(LAN_CFG_FILE);
+    configStream << std::setw(4) << data << std::endl;
+    configStream.close();
+    return 0;
+}
+
 } // namespace network
 
 } // namespace phosphor
-- 
2.25.1

