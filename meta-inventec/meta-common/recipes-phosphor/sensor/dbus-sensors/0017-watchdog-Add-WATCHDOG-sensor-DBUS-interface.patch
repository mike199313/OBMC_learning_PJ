From bdfa2ee13b5132e27390d961d1a9c72fba5de2e8 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Tue, 8 Mar 2022 10:57:15 +0000
Subject: [PATCH 17/27] watchdog - Add WATCHDOG sensor DBUS interface

- Add WATCHDOG sensor DBUS interface for watchdog timeout service
  update state and value

---
 meson_options.txt                             |   1 +
 service_files/meson.build                     |   1 +
 .../xyz.openbmc_project.wdtsensor.service     |  13 +
 src/WDTSensor.cpp                             | 257 ++++++++++++++++++
 src/WDTSensor.hpp                             |  29 ++
 src/meson.build                               |  15 +
 6 files changed, 316 insertions(+)
 create mode 100644 service_files/xyz.openbmc_project.wdtsensor.service
 create mode 100644 src/WDTSensor.cpp
 create mode 100644 src/WDTSensor.hpp

diff --git a/meson_options.txt b/meson_options.txt
index d0c3185..8e40665 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -18,3 +18,4 @@ option('invcfm', type: 'feature', value: 'enabled', description: 'Enable InvCfm
 option('accumulate', type: 'feature', value: 'enabled', description: 'Enable accumulate sensor.',)
 option('iiohwmon', type: 'feature', value: 'enabled', description: 'Enable iiohwmon sensor.',)
 option('tsod', type: 'feature', value: 'enabled', description: 'Enable TSOD sensor.',)
+option('wdt', type: 'feature', value: 'enabled', description: 'Enable Watchdog event sensor.',)
diff --git a/service_files/meson.build b/service_files/meson.build
index b30be75..931f9ef 100644
--- a/service_files/meson.build
+++ b/service_files/meson.build
@@ -16,6 +16,7 @@ unit_files = [
     ['accumulate', 'xyz.openbmc_project.accumulatesensor.service'],
     ['iiohwmon', 'xyz.openbmc_project.iiohwmonsensor.service'],
     ['tsod', 'xyz.openbmc_project.tsodsensor.service'],
+    ['wdt', 'xyz.openbmc_project.wdtsensor.service'],
 ]
 
 foreach tuple : unit_files
diff --git a/service_files/xyz.openbmc_project.wdtsensor.service b/service_files/xyz.openbmc_project.wdtsensor.service
new file mode 100644
index 0000000..858228a
--- /dev/null
+++ b/service_files/xyz.openbmc_project.wdtsensor.service
@@ -0,0 +1,13 @@
+[Unit]
+Description=Watchdog Event Sensor Define
+StopWhenUnneeded=false
+Requires=xyz.openbmc_project.EntityManager.service
+After=xyz.openbmc_project.EntityManager.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/wdtsensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/WDTSensor.cpp b/src/WDTSensor.cpp
new file mode 100644
index 0000000..fb4a2c1
--- /dev/null
+++ b/src/WDTSensor.cpp
@@ -0,0 +1,257 @@
+#include "WDTSensor.hpp"
+#include "Utils.hpp"
+
+#include <array>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/asio/deadline_timer.hpp>
+#include <boost/container/flat_map.hpp>
+#include <boost/container/flat_set.hpp>
+#include <filesystem>
+#include <fstream>
+#include <functional>
+#include <memory>
+#include <regex>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/bus/match.hpp>
+#include <stdexcept>
+#include <string>
+#include <utility>
+#include <variant>
+#include <vector>
+
+
+namespace fs = std::filesystem;
+
+static constexpr bool DEBUG = false;
+
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/specific/";
+
+static constexpr std::array<const char*, 1> sensorTypes = {
+    "xyz.openbmc_project.Configuration.Watchdog"
+};
+
+WDTSensor::WDTSensor(
+    sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& conn,
+    const std::string& sensorName,
+    std::vector<ipmidata::IpmiConfig>&& _ipmiinfo):
+    objectServer(objectServer), dbusConnection(conn)
+{
+    std::string dbusPath = sensorPathPrefix + sensorName;
+
+    if (!conn)
+    {
+        std::cerr << "Connection not created\n";
+        return;
+    }
+
+    sensorInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.Value");
+
+    sensorInterface->register_property("Value", defaultVal, 
+                     sdbusplus::asio::PropertyPermission::readWrite);
+    sensorInterface->register_property("State", state, 
+                     sdbusplus::asio::PropertyPermission::readWrite);
+    sensorInterface->initialize();
+
+    ipmiInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.IpmiSensor");
+
+    if (_ipmiinfo.empty())
+    {
+        // Default
+        ipmiInterface->register_property("sensorNumber", 0);
+        ipmiInterface->register_property("entityID", 0);
+        ipmiInterface->register_property("entityInstance", 0);
+    }
+    else
+    {
+        for (auto& ipmi : _ipmiinfo)
+        {
+            ipmiInterface->register_property("sensorNumber", ipmi.number);
+            ipmiInterface->register_property("entityID", ipmi.entityId);
+            ipmiInterface->register_property("entityInstance", ipmi.entityIns);
+        }
+    }
+    ipmiInterface->initialize();
+}
+
+WDTSensor::~WDTSensor()
+{
+    objectServer.remove_interface(sensorInterface);
+    objectServer.remove_interface(ipmiInterface);
+}
+
+void createSensors(
+    boost::asio::io_context& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string,
+    std::unique_ptr<WDTSensor>>& sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::unique_ptr<boost::container::flat_set<std::string>>&
+        sensorsChanged)
+{
+    auto getter = std::make_shared<GetSensorConfiguration>(
+        dbusConnection,
+        std::move([&io, &objectServer, &sensors, &dbusConnection,
+                   &sensorsChanged](
+                      const ManagedObjectType& sensorConfigurations) {
+
+            // search for each sensor
+            for (const std::pair<sdbusplus::message::object_path,
+                                    SensorData>& sensorConf : sensorConfigurations)
+            {
+                const SensorData *sensorData = nullptr;
+                const std::string *interfacePath = nullptr;
+                //const char *sensorType = nullptr;
+                const std::pair<std::string,
+                                boost::container::flat_map<std::string, BasicVariantType>>*
+                    baseConfiguration = nullptr;
+
+                // find base configuration
+                for (const char* type : sensorTypes)
+                {
+                    auto sensorBase = sensorConf.second.find(type);
+                    if (sensorBase != sensorConf.second.end())
+                    {
+                        baseConfiguration = &(*sensorBase);
+                  //      sensorType = type;
+                        break;
+                    }
+                }
+                if (baseConfiguration == nullptr)
+                {
+                    continue;
+                }
+
+                auto findSensorName = baseConfiguration->second.find("Name");
+                if (findSensorName == baseConfiguration->second.end())
+                {
+                    std::cerr << "Base configuration missing Name"
+                                << baseConfiguration->first << "\n";
+                    continue;
+                }
+
+                std::string sensorName;
+                try
+                {
+                    sensorName = std::visit(
+                        VariantToStringVisitor(), findSensorName->second);
+                    std::cout << "Sensor: " << sensorName << "\n";
+                }
+                catch(const std::exception& e)
+                {
+                    std::cerr << e.what() << '\n';
+                    continue;
+                }
+
+                sensorData = &(sensorConf.second);
+                interfacePath = &(sensorConf.first.str);
+
+                if (sensorData == nullptr)
+                {
+                    std::cerr << "failed to find match for " << sensorName
+                              << "\n";
+                    continue;
+                }
+
+                if (interfacePath == nullptr)
+                {
+                    std::cerr << "failed to find match for " << sensorName
+                              << "\n";
+                    continue;
+                }
+
+                // Get Sensor define for IPMI
+                std::vector<ipmidata::IpmiConfig> sensorIpmiConfig;
+                if (!parseIpmiDataFromConfig(*sensorData, sensorIpmiConfig, &sensorName))
+                {
+                    std::cerr << "error populating ipmi for " 
+                              << sensorName << "\n";
+                }
+
+                if (DEBUG)
+                {
+                    std::cerr <<"SensorName: " << sensorName
+                            << "\ninterfacePath: " << *interfacePath << '\n';
+                }
+
+                // Make up Sensor DBUS interface
+                auto& sensor = sensors[sensorName];
+                sensor = nullptr;
+                sensor = std::make_unique<WDTSensor>(
+                    objectServer,
+                    dbusConnection,
+                    sensorName,
+                    std::move(sensorIpmiConfig));
+            }
+        }));
+    getter->getConfiguration(
+        std::vector<std::string>(sensorTypes.begin(), sensorTypes.end()));
+}
+
+int main()
+{
+    boost::asio::io_context io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+
+    systemBus->request_name("xyz.openbmc_project.WDTSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+
+    boost::container::flat_map<std::string, std::unique_ptr<WDTSensor>>
+        sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+
+    std::unique_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+        std::make_unique<boost::container::flat_set<std::string>>();
+
+    if (DEBUG)
+    {
+        std::cout << "xyz.openbmc_project.WDTSensor" << "\n";
+    }
+
+    boost::asio::post(io, [&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::deadline_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+            sensorsChanged->insert(message.get_path());
+            // this implicitly cancels the timer
+            filterTimer.expires_from_now(boost::posix_time::seconds(1));
+
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    /* we were canceled*/
+                    return;
+                }
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus,
+                              sensorsChanged);
+            });
+        };
+
+    for (const char* type : sensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',member='PropertiesChanged',path_namespace='" +
+                std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+            eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
diff --git a/src/WDTSensor.hpp b/src/WDTSensor.hpp
new file mode 100644
index 0000000..ea32a89
--- /dev/null
+++ b/src/WDTSensor.hpp
@@ -0,0 +1,29 @@
+#pragma once
+
+#include "Thresholds.hpp"
+#include "sensor.hpp"
+#include "IpmiInfo.hpp"
+
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <string>
+#include <vector>
+
+class WDTSensor :
+    public std::enable_shared_from_this<WDTSensor>
+{
+  public:
+    WDTSensor(sdbusplus::asio::object_server& objectServer,
+                    std::shared_ptr<sdbusplus::asio::connection>& conn,
+                    const std::string& name,
+                    std::vector<ipmidata::IpmiConfig>&& ipmiinfo);
+    ~WDTSensor();
+
+  private:
+    sdbusplus::asio::object_server& objectServer;
+    std::shared_ptr<sdbusplus::asio::connection> dbusConnection;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> sensorInterface;
+    std::shared_ptr<sdbusplus::asio::dbus_interface> ipmiInterface;
+    double defaultVal = 0;
+    std::string state = "";
+};
diff --git a/src/meson.build b/src/meson.build
index 690a403..72b1ac4 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -338,3 +338,18 @@ if get_option('tsod').enabled()
         install: true,
     )
 endif
+
+if get_option('wdt').enabled()
+    executable(
+        'wdtsensor',
+        'WDTSensor.cpp',
+        'IpmiInfo.cpp',
+        dependencies: [
+            default_deps,
+            thresholds_dep,
+            utils_dep,
+        ],
+        cpp_args: uring_args,
+        install: true,
+    )
+endif
-- 
2.25.1