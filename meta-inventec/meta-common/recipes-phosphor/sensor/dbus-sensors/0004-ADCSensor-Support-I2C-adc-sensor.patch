From 37eedfd6d61e46aceab62e6f3fb7e3a50a260030 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Tue, 1 Mar 2022 02:28:27 +0000
Subject: [PATCH 04/27] ADCSensor - Support I2C adc sensor

- Support I2C adc sensor
- Support IPMI sensor info

---
 src/ADCSensor.cpp     | 24 ++++++++++++++++++
 src/ADCSensor.hpp     |  2 ++
 src/ADCSensorMain.cpp | 58 ++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 83 insertions(+), 1 deletion(-)

diff --git a/src/ADCSensor.cpp b/src/ADCSensor.cpp
index 3c95a41..919e185 100644
--- a/src/ADCSensor.cpp
+++ b/src/ADCSensor.cpp
@@ -44,6 +44,7 @@ ADCSensor::ADCSensor(const std::string& path,
                      std::shared_ptr<sdbusplus::asio::connection>& conn,
                      boost::asio::io_context& io, const std::string& sensorName,
                      std::vector<thresholds::Threshold>&& thresholdsIn,
+                     std::vector<ipmidata::IpmiConfig>&& _ipmiinfo,
                      const double scaleFactor, const float pollRate,
                      PowerState readState,
                      const std::string& sensorConfiguration,
@@ -68,6 +69,28 @@ ADCSensor::ADCSensor(const std::string& path,
     sensorInterface = objectServer.add_interface(
         "/xyz/openbmc_project/sensors/voltage/" + name,
         "xyz.openbmc_project.Sensor.Value");
+
+    ipmiInterface = objectServer.add_interface(
+        "/xyz/openbmc_project/sensors/voltage/" + name,
+        "xyz.openbmc_project.Sensor.IpmiSensor");
+
+    if (_ipmiinfo.empty())
+    {
+        // Default
+        ipmiInterface->register_property("sensorNumber", 0);
+        ipmiInterface->register_property("entityID", 0);
+        ipmiInterface->register_property("entityInstance", 0);
+    }
+    else
+    {
+        for (auto& ipmi : _ipmiinfo)
+        {
+            ipmiInterface->register_property("sensorNumber", ipmi.number);
+            ipmiInterface->register_property("entityID", ipmi.entityId);
+            ipmiInterface->register_property("entityInstance", ipmi.entityIns);
+        }
+    }
+
     for (const auto& threshold : thresholds)
     {
         std::string interface = thresholds::getInterface(threshold.level);
@@ -92,6 +115,7 @@ ADCSensor::~ADCSensor()
     }
     objServer.remove_interface(sensorInterface);
     objServer.remove_interface(association);
+    objServer.remove_interface(ipmiInterface);
 }
 
 void ADCSensor::setupRead(void)
diff --git a/src/ADCSensor.hpp b/src/ADCSensor.hpp
index 045a65e..7ee05ef 100644
--- a/src/ADCSensor.hpp
+++ b/src/ADCSensor.hpp
@@ -2,6 +2,7 @@
 
 #include "Thresholds.hpp"
 #include "sensor.hpp"
+#include "IpmiInfo.hpp"
 
 #include <boost/asio/streambuf.hpp>
 #include <gpiod.hpp>
@@ -71,6 +72,7 @@ class ADCSensor : public Sensor, public std::enable_shared_from_this<ADCSensor>
               std::shared_ptr<sdbusplus::asio::connection>& conn,
               boost::asio::io_context& io, const std::string& sensorName,
               std::vector<thresholds::Threshold>&& thresholds,
+              std::vector<ipmidata::IpmiConfig>&& ipmiinfo,
               double scaleFactor, float pollRate, PowerState readState,
               const std::string& sensorConfiguration,
               std::optional<BridgeGpio>&& bridgeGpio);
diff --git a/src/ADCSensorMain.cpp b/src/ADCSensorMain.cpp
index 4987f1f..16132a8 100644
--- a/src/ADCSensorMain.cpp
+++ b/src/ADCSensorMain.cpp
@@ -90,6 +90,8 @@ void createSensors(
             return;
         }
 
+        boost::container::flat_set<std::string> directories;
+
         // iterate through all found adc sensors, and try to match them with
         // configuration
         for (auto& path : paths)
@@ -105,6 +107,31 @@ void createSensors(
             std::string indexStr = *(match.begin() + 1);
 
             auto directory = path.parent_path();
+
+            /* Inventec - Support for I2C ADC device */
+            fs::path device = directory / "device";
+            std::string deviceName = fs::canonical(device).stem();
+            auto findHyphen = deviceName.find("-");
+            if (findHyphen == std::string::npos)
+            {
+                std::cerr << "found bad device " << deviceName << "\n";
+                continue;
+            }
+            std::string busStr = deviceName.substr(0, findHyphen);
+            std::string addrStr = deviceName.substr(findHyphen + 1);
+
+            size_t bus = 0;
+            size_t addr = 0;
+            try
+            {
+                bus = std::stoi(busStr);
+                addr = std::stoi(addrStr, 0, 16);
+            }
+            catch (std::invalid_argument&)
+            {
+                continue;
+            }
+
             // convert to 0 based
             size_t index = std::stoul(indexStr) - 1;
 
@@ -112,6 +139,7 @@ void createSensors(
             const std::string* interfacePath = nullptr;
             const std::pair<std::string, SensorBaseConfigMap>*
                 baseConfiguration = nullptr;
+            const SensorBaseConfigMap* baseConfigMap = nullptr;
             for (const auto& [path, cfgData] : sensorConfigurations)
             {
                 // clear it out each loop
@@ -131,6 +159,25 @@ void createSensors(
                 {
                     continue;
                 }
+
+                /* Inventec - Support for I2C ADC device */
+                baseConfigMap = &baseConfiguration->second;
+                auto configurationBus = baseConfigMap->find("Bus");
+                auto configurationAddress = baseConfigMap->find("Address");
+
+                if (configurationBus == baseConfigMap->end() ||
+                    configurationAddress == baseConfigMap->end())
+                {
+                    std::cerr << "error finding bus or address in "
+                                    "configuration\n";
+                }
+                if (std::get<uint64_t>(configurationBus->second) != bus ||
+                    std::get<uint64_t>(configurationAddress->second) !=
+                        addr)
+                {
+                    continue;
+                }
+
                 auto findIndex = baseConfiguration->second.find("Index");
                 if (findIndex == baseConfiguration->second.end())
                 {
@@ -225,6 +272,14 @@ void createSensors(
                           << "\n";
             }
 
+            std::vector<ipmidata::IpmiConfig> sensorIpmiConfig;
+            std::string labelHead = sensorName.substr(0, sensorName.find(" "));
+            if (!parseIpmiDataFromConfig(*sensorData, sensorIpmiConfig, &labelHead))
+            {
+                std::cerr << "error populating ipmi for "
+                            << sensorName << "\n";
+            }
+
             auto findScaleFactor =
                 baseConfiguration->second.find("ScaleFactor");
             float scaleFactor = 1.0;
@@ -286,7 +341,8 @@ void createSensors(
 
             sensor = std::make_shared<ADCSensor>(
                 path.string(), objectServer, dbusConnection, io, sensorName,
-                std::move(sensorThresholds), scaleFactor, pollRate, readState,
+                std::move(sensorThresholds), std::move(sensorIpmiConfig),
+                scaleFactor, pollRate, readState,
                 *interfacePath, std::move(bridgeGpio));
             sensor->setupRead();
         }
-- 
2.25.1