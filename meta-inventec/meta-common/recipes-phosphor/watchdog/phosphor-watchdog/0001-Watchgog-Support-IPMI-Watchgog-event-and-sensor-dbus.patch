From 3ca5e920e2198816d80d4429277c870bcc3f7e5f Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Tue, 8 Mar 2022 08:41:52 +0000
Subject: [PATCH 1/2] Watchgog - Support IPMI Watchgog event and sensor dbus
 update

- Add IPMI SEL log
- Add WATCHDOG sensor DBUS state updated
- Reference Intel patch of below change for x86 power control rule:
  Customize phosphor-watchdog for Intel platforms

  This patch adds various changes to phosphor-watchdog that are
  required for compatibility with Intel platforms.

     1. Add Redfish messages for watchdog timeout and pre-interrupt
     2. Use dbus properties for power control insted of service files
     3. Use host status to enable/disable watchdog
     4. Set preTimeoutInterruptOccurFlag

---
 src/watchdog.cpp | 354 +++++++++++++++++++++++++++++++++++++++++++++--
 src/watchdog.hpp |  21 +++
 2 files changed, 366 insertions(+), 9 deletions(-)

diff --git a/src/watchdog.cpp b/src/watchdog.cpp
index c401022..ec5721c 100644
--- a/src/watchdog.cpp
+++ b/src/watchdog.cpp
@@ -6,7 +6,9 @@
 #include <phosphor-logging/log.hpp>
 #include <sdbusplus/exception.hpp>
 #include <string_view>
+#include <systemd/sd-journal.h>
 #include <xyz/openbmc_project/Common/error.hpp>
+#include <xyz/openbmc_project/State/Host/server.hpp>
 
 namespace phosphor
 {
@@ -18,10 +20,94 @@ using namespace phosphor::logging;
 
 using sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;
 
-// systemd service to kick start a target.
-constexpr auto SYSTEMD_SERVICE = "org.freedesktop.systemd1";
-constexpr auto SYSTEMD_ROOT = "/org/freedesktop/systemd1";
-constexpr auto SYSTEMD_INTERFACE = "org.freedesktop.systemd1.Manager";
+const static constexpr char* currentHostState = "CurrentHostState";
+const static constexpr char* hostStatusOff =
+    "xyz.openbmc_project.State.Host.HostState.Off";
+
+const static constexpr char* actionDescription = " due to Watchdog timeout";
+const static constexpr char* hardResetDescription = "Hard Reset - System reset";
+const static constexpr char* powerOffDescription =
+    "Power Down - System power down";
+const static constexpr char* powerCycleDescription =
+    "Power Cycle - System power cycle";
+const static constexpr char* timerExpiredDescription = "Timer expired";
+
+const static constexpr char* preInterruptActionNone =
+    "xyz.openbmc_project.State.Watchdog.PreTimeoutInterruptAction.None";
+
+const static constexpr char* preInterruptDescriptionSMI = "SMI";
+const static constexpr char* preInterruptDescriptionNMI = "NMI";
+const static constexpr char* preInterruptDescriptionMI = "Messaging Interrupt";
+
+const static constexpr char* reservedDescription = "Reserved";
+
+const static constexpr char* timerUseDescriptionBIOSFRB2 = "BIOS FRB2";
+const static constexpr char* timerUseDescriptionBIOSPOST = "BIOS/POST";
+const static constexpr char* timerUseDescriptionOSLoad = "OSLoad";
+const static constexpr char* timerUseDescriptionSMSOS = "SMS/OS";
+const static constexpr char* timerUseDescriptionOEM = "OEM";
+
+namespace restart
+{
+static constexpr const char* busName =
+    "xyz.openbmc_project.Control.Host.RestartCause";
+static constexpr const char* path =
+    "/xyz/openbmc_project/control/host0/restart_cause";
+static constexpr const char* interface =
+    "xyz.openbmc_project.Control.Host.RestartCause";
+static constexpr const char* property = "RequestedRestartCause";
+} // namespace restart
+
+// chassis state manager service
+namespace chassis
+{
+static constexpr const char* busName = "xyz.openbmc_project.State.Chassis";
+static constexpr const char* path = "/xyz/openbmc_project/state/chassis0";
+static constexpr const char* interface = "xyz.openbmc_project.State.Chassis";
+static constexpr const char* request = "RequestedPowerTransition";
+} // namespace chassis
+
+namespace host
+{
+static constexpr const char* busName = "xyz.openbmc_project.State.Host";
+static constexpr const char* path = "/xyz/openbmc_project/state/host0";
+static constexpr const char* interface = "xyz.openbmc_project.State.Host";
+static constexpr const char* request = "RequestedHostTransition";
+} // namespace host
+
+namespace ipmisel
+{
+const static constexpr char* selService = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* selPath = "/xyz/openbmc_project/Logging/IPMI";
+const static constexpr char* selIntf = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* selAddOem = "IpmiSelAddOem";
+} // namespace ipmisel
+
+namespace wdt
+{
+const static constexpr char* service = "xyz.openbmc_project.WDTSensor";
+const static constexpr char* path = "/xyz/openbmc_project/sensors/specific/WATCHDOG";
+const static constexpr char* interface = "xyz.openbmc_project.Sensor.Value";
+const static constexpr char* propertyState = "State";
+const static constexpr char* propertyValue = "Value";
+} // namespace wdt
+
+void Watchdog::powerStateChangedHandler(
+    const std::map<std::string, std::variant<std::string>>& props)
+{
+    const auto iter = props.find(currentHostState);
+    if (iter != props.end())
+    {
+        const std::string* powerState = std::get_if<std::string>(&iter->second);
+        if (powerState && (*powerState == hostStatusOff))
+        {
+            if (timerEnabled())
+            {
+                enabled(false);
+            }
+        }
+    }
+}
 
 void Watchdog::resetTimeRemaining(bool enableWatchdog)
 {
@@ -35,6 +121,36 @@ void Watchdog::resetTimeRemaining(bool enableWatchdog)
 // Enable or disable watchdog
 bool Watchdog::enabled(bool value)
 {
+    if (value)
+    {
+        try
+        {
+            // Clear WATCHDOG senor value and state when enable
+            sdbusplus::message::message method;
+            method = bus.new_method_call(wdt::service,
+                                         wdt::path,
+                                         "org.freedesktop.DBus.Properties",
+                                         "Set");
+            method.append(wdt::interface,
+                               wdt::propertyState,
+                               std::variant<std::string>(""));
+            bus.call(method);
+
+            // current not define deassert
+            //-method = bus.new_method_call(wdt::service,
+            //-                             wdt::path,
+            //-                             "org.freedesktop.DBus.Properties",
+            //-                             "Set");
+            //-method.append(wdt::interface,
+            //-              wdt::propertyValue,
+            //-              std::variant<double>(0));
+            //-bus.call(method);
+        }
+        catch (sdbusplus::exception_t& e)
+        {
+            log<level::INFO>("failed to reset WDT sensor");
+        }
+    }
     if (!value)
     {
         // Make sure we accurately reflect our enabled state to the
@@ -107,13 +223,116 @@ uint64_t Watchdog::interval(uint64_t value)
 // Optional callback function on timer expiration
 void Watchdog::timeOutHandler()
 {
+    PreTimeoutInterruptAction preTimeoutInterruptAction = preTimeoutInterrupt();
+    std::string preInterruptActionMessageArgs{};
+
     Action action = expireAction();
+    std::string actionMessageArgs{};
+
+    expiredTimerUse(currentTimerUse());
+
+    TimerUse timeUser = expiredTimerUse();
+    std::string timeUserMessage{};
+
+    uint8_t selTimerUse = 0x00;
+    uint8_t selTimerAction = 0x00;
+
     if (!this->enabled())
     {
         action = fallback->action;
     }
 
-    expiredTimerUse(currentTimerUse());
+    switch (timeUser)
+    {
+        case Watchdog::TimerUse::BIOSFRB2:
+            timeUserMessage = timerUseDescriptionBIOSFRB2;
+            selTimerUse = 0x01;
+            break;
+        case Watchdog::TimerUse::BIOSPOST:
+            timeUserMessage = timerUseDescriptionBIOSPOST;
+            selTimerUse = 0x02;
+            break;
+        case Watchdog::TimerUse::OSLoad:
+            timeUserMessage = timerUseDescriptionOSLoad;
+            selTimerUse = 0x03;
+            break;
+        case Watchdog::TimerUse::SMSOS:
+            timeUserMessage = timerUseDescriptionSMSOS;
+            selTimerUse = 0x04;
+            break;
+        case Watchdog::TimerUse::OEM:
+            timeUserMessage = timerUseDescriptionOEM;
+            selTimerUse = 0x05;
+            break;
+        default:
+            timeUserMessage = reservedDescription;
+            selTimerUse = 0x00;
+            break;
+    }
+
+    switch (action)
+    {
+        case Watchdog::Action::HardReset:
+            actionMessageArgs = std::string(hardResetDescription) +
+                                std::string(actionDescription);
+            selTimerAction = 0x01;
+            break;
+        case Watchdog::Action::PowerOff:
+            actionMessageArgs = std::string(powerOffDescription) +
+                                std::string(actionDescription);
+            selTimerAction = 0x02;
+            break;
+        case Watchdog::Action::PowerCycle:
+            actionMessageArgs = std::string(powerCycleDescription) +
+                                std::string(actionDescription);
+            selTimerAction = 0x03;
+            break;
+        case Watchdog::Action::None:
+            actionMessageArgs = timerExpiredDescription;
+            selTimerAction = 0x00;
+            break;
+        default:
+            actionMessageArgs = reservedDescription;
+            selTimerAction = 0x04;
+            break;
+    }
+
+    // Log into redfish event log
+    sd_journal_send("MESSAGE=IPMIWatchdog: Timed out ACTION=%s",
+                    convertForMessage(action).c_str(), "PRIORITY=%i", LOG_INFO,
+                    "REDFISH_MESSAGE_ID=%s", "OpenBMC.0.1.IPMIWatchdog",
+                    "REDFISH_MESSAGE_ARGS=%s. timer use: %s",
+                    actionMessageArgs.c_str(), timeUserMessage.c_str(), NULL);
+
+    switch (preTimeoutInterruptAction)
+    {
+        case Watchdog::PreTimeoutInterruptAction::SMI:
+            preInterruptActionMessageArgs = preInterruptDescriptionSMI;
+            break;
+        case Watchdog::PreTimeoutInterruptAction::NMI:
+            preInterruptActionMessageArgs = preInterruptDescriptionNMI;
+            break;
+        case Watchdog::PreTimeoutInterruptAction::MI:
+            preInterruptActionMessageArgs = preInterruptDescriptionMI;
+            break;
+        default:
+            preInterruptActionMessageArgs = reservedDescription;
+            break;
+    }
+
+    if (preInterruptActionNone != convertForMessage(preTimeoutInterruptAction))
+    {
+        preTimeoutInterruptOccurFlag(true);
+        selTimerAction = 0x08;
+        sd_journal_send("MESSAGE=IPMIWatchdog: Pre Timed out Interrupt=%s",
+                        convertForMessage(preTimeoutInterruptAction).c_str(),
+                        "PRIORITY=%i", LOG_INFO, "REDFISH_MESSAGE_ID=%s",
+                        "OpenBMC.0.1.IPMIWatchdog",
+                        "REDFISH_MESSAGE_ARGS=Timer interrupt - %s due to "
+                        "Watchdog timeout. timer use: %s",
+                        preInterruptActionMessageArgs.c_str(),
+                        timeUserMessage.c_str(), NULL);
+    }
 
     auto target = actionTargetMap.find(action);
     if (target == actionTargetMap.end())
@@ -133,10 +352,23 @@ void Watchdog::timeOutHandler()
 
         try
         {
-            auto method = bus.new_method_call(SYSTEMD_SERVICE, SYSTEMD_ROOT,
-                                              SYSTEMD_INTERFACE, "StartUnit");
-            method.append(target->second);
-            method.append("replace");
+            sdbusplus::message::message method;
+            if (action == Watchdog::Action::HardReset)
+            {
+                method = bus.new_method_call(host::busName, host::path,
+                                             "org.freedesktop.DBus.Properties",
+                                             "Set");
+                method.append(host::interface, host::request,
+                              std::variant<std::string>(target->second));
+            }
+            else
+            {
+                method = bus.new_method_call(chassis::busName, chassis::path,
+                                             "org.freedesktop.DBus.Properties",
+                                             "Set");
+                method.append(chassis::interface, chassis::request,
+                              std::variant<std::string>(target->second));
+            }
 
             bus.call_noreply(method);
         }
@@ -147,6 +379,110 @@ void Watchdog::timeOutHandler()
                             entry("ERROR=%s", e.what()));
             commit<InternalFailure>();
         }
+
+        // set restart cause for watchdog HardReset & PowerCycle actions
+        if ((action == Watchdog::Action::HardReset) ||
+            (action == Watchdog::Action::PowerCycle))
+        {
+            try
+            {
+                auto method = bus.new_method_call(
+                    restart::busName, restart::path,
+                    "org.freedesktop.DBus.Properties", "Set");
+                method.append(
+                    restart::interface, restart::property,
+                    std::variant<std::string>("xyz.openbmc_project.State.Host."
+                                              "RestartCause.WatchdogTimer"));
+                bus.call(method);
+            }
+            catch (sdbusplus::exception_t& e)
+            {
+                log<level::ERR>("Failed to set HostRestartCause property",
+                                entry("ERROR=%s", e.what()));
+                commit<InternalFailure>();
+            }
+        }
+    }
+
+    // Send WATCHDOG IPMI SEL
+    try
+    {
+        std::variant<uint64_t> value;
+        uint8_t sensorNum;
+        sdbusplus::message::message writeSEL;
+
+        // Get sensor number for event log
+        try
+        {
+            writeSEL = bus.new_method_call(wdt::service,
+                                           wdt::path,
+                                           "org.freedesktop.DBus.Properties",
+                                           "Get");
+            writeSEL.append("xyz.openbmc_project.Sensor.IpmiSensor", "sensorNumber");
+
+            auto reply = bus.call(writeSEL);
+            if (reply.is_method_error())
+            {
+                log<level::INFO>("failed to get WDT sensor number");
+                sensorNum = 0x00;
+            }
+            reply.read(value);
+            sensorNum = static_cast<uint8_t>(std::get<uint64_t>(value));
+        }
+        catch (sdbusplus::exception_t& e)
+        {
+            log<level::INFO>("failed to call WDT sensor service");
+            sensorNum = 0x00;
+        }
+
+        std::vector<uint8_t> eventData(9, 0xFF);
+        eventData[0] = 0x20; //generatorID;
+        eventData[1] = 0x00; //generatorID >> 8;
+        eventData[2] = 0x04; //evmRev;
+        eventData[3] = 0x23; //sensorType;
+        eventData[4] = sensorNum; //sensorNum;
+        eventData[5] = 0x6F; //eventType;
+        eventData[6] = (selTimerAction | 0xC0); //eventData1;
+        eventData[7] = (selTimerUse | 0x00); //eventData2;
+        eventData[8] = 0xFF; //eventData3;
+
+        writeSEL = bus.new_method_call(ipmisel::selService,
+                                       ipmisel::selPath,
+                                       ipmisel::selIntf,
+                                       ipmisel::selAddOem);
+        writeSEL.append("ipmiFrbAddSEL", eventData, (uint8_t)0x02);
+        bus.call_noreply(writeSEL);
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        log<level::INFO>("failed to call write WDT SEL method");
+    }
+
+    // Update WATCHDOG Sensor value and state
+    try
+    {
+        sdbusplus::message::message writeSensor;
+        writeSensor = bus.new_method_call(wdt::service,
+                                          wdt::path,
+                                          "org.freedesktop.DBus.Properties",
+                                          "Set");
+        writeSensor.append(wdt::interface,
+                           wdt::propertyState,
+                           std::variant<std::string>(timeUserMessage + " Timeout"));
+        bus.call(writeSensor);
+
+        writeSensor = bus.new_method_call(wdt::service,
+                                          wdt::path,
+                                          "org.freedesktop.DBus.Properties",
+                                          "Set");
+        writeSensor.append(wdt::interface,
+                           wdt::propertyValue,
+                           std::variant<uint8_t>(selTimerAction));
+        bus.call(writeSensor);
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        log<level::INFO>("failed to call write WDT sensor");
     }
     try
     {
diff --git a/src/watchdog.hpp b/src/watchdog.hpp
index a0693ee..84263dd 100644
--- a/src/watchdog.hpp
+++ b/src/watchdog.hpp
@@ -74,6 +74,17 @@ class Watchdog : public WatchdogInherits
         bus(bus), actionTargetMap(std::move(actionTargetMap)),
         fallback(fallback), minInterval(minInterval),
         timer(event, std::bind(&Watchdog::timeOutHandler, this)),
+        powerStateChangedSignal(
+            bus,
+            sdbusplus::bus::match::rules::propertiesChanged(
+                "/xyz/openbmc_project/state/host0",
+                "xyz.openbmc_project.State.Host"),
+            [this](sdbusplus::message::message& msg) {
+                std::string objectName;
+                std::map<std::string, std::variant<std::string>> props;
+                msg.read(objectName, props);
+                powerStateChangedHandler(props);
+            }),
         objPath(objPath), exitAfterTimeout(exitAfterTimeout)
     {
         // Use default if passed in otherwise just use default that comes
@@ -91,6 +102,12 @@ class Watchdog : public WatchdogInherits
         tryFallbackOrDisable();
     }
 
+    /** @brief Disable watchdog when power status change meet
+     *         the specific requirement
+     */
+    void powerStateChangedHandler(
+        const std::map<std::string, std::variant<std::string>>& props);
+
     /** @brief Resets the TimeRemaining to the configured Interval
      *         Optionally enables the watchdog.
      *
@@ -179,6 +196,10 @@ class Watchdog : public WatchdogInherits
     /** @brief Contained timer object */
     sdeventplus::utility::Timer<sdeventplus::ClockId::Monotonic> timer;
 
+    /** @brief Optional Callback handler when power status change meet
+     * the specific requirement */
+    sdbusplus::bus::match_t powerStateChangedSignal;
+
     /** @brief Optional Callback handler on timer expirartion */
     void timeOutHandler();
 
-- 
2.25.1