From b0cbb739e868e956872728a29a8ce071c82f4e82 Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Tue, 9 Mar 2021 06:22:35 +0000
Subject: [PATCH 2/2] Watchdog - Store Don't log flag to dbus

Symtom/Reason:
    Save the don't log flag to dbus for watchdog command.

Root Cause:
    The don't log flag didn't work.

Solution/Change:
    Get don't log flag from dbus,
    Check is the flag set when timeout.
    If true, do not record to SEL.

Entry Test:

Set Watchdog command
    ipmitool raw 0x06 0x24 0x81 0x30 0x10 0x02 0x2c 0x01
Start Watchdog countdown
    ipmitool raw 0x06 0x22

Wait for timeout.
Check ipmitool sel list.
There should have not watchdog entry.
---
 src/watchdog.cpp | 93 +++++++++++++++++++++++++++---------------------
 1 file changed, 52 insertions(+), 41 deletions(-)

diff --git a/src/watchdog.cpp b/src/watchdog.cpp
index 0601937..c655613 100644
--- a/src/watchdog.cpp
+++ b/src/watchdog.cpp
@@ -417,57 +417,63 @@ void Watchdog::timeOutHandler()
     }
 
     // Send WATCHDOG IPMI SEL 
-    try
+    /*
+        Inventec - Store Don't log flag to dbus
+    */
+    if(!dontLog())
     {
-        std::variant<uint64_t> value;
-        uint8_t sensorNum;
-        sdbusplus::message::message writeSEL;
-
-        // Get sensor number for event log
         try
         {
-            writeSEL = bus.new_method_call(wdt::service,
-                                           wdt::path,
-                                           "org.freedesktop.DBus.Properties",
-                                           "Get");
-            writeSEL.append("xyz.openbmc_project.Sensor.IpmiSensor", "sensorNumber");
-
-            auto reply = bus.call(writeSEL);
-            if (reply.is_method_error())
+            std::variant<uint64_t> value;
+            uint8_t sensorNum;
+            sdbusplus::message::message writeSEL;
+
+            // Get sensor number for event log
+            try
+            {
+                writeSEL = bus.new_method_call(wdt::service,
+                                               wdt::path,
+                                               "org.freedesktop.DBus.Properties",
+                                               "Get");
+                writeSEL.append("xyz.openbmc_project.Sensor.IpmiSensor", "sensorNumber");
+
+                auto reply = bus.call(writeSEL);
+                if (reply.is_method_error())
+                {
+                    log<level::INFO>("failed to get WDT sensor number");
+                    sensorNum = 0x00;
+                }
+                reply.read(value);
+                sensorNum = static_cast<uint8_t>(std::get<uint64_t>(value));
+            }
+            catch (sdbusplus::exception_t& e)
             {
-                log<level::INFO>("failed to get WDT sensor number");
+                log<level::INFO>("failed to call WDT sensor service");
                 sensorNum = 0x00;
             }
-            reply.read(value);
-            sensorNum = static_cast<uint8_t>(std::get<uint64_t>(value));
+
+            std::vector<uint8_t> eventData(9, 0xFF);
+            eventData[0] = 0x20; //generatorID;
+            eventData[1] = 0x00; //generatorID >> 8;
+            eventData[2] = 0x04; //evmRev;
+            eventData[3] = 0x23; //sensorType;
+            eventData[4] = sensorNum; //sensorNum;
+            eventData[5] = 0x6F; //eventType;
+            eventData[6] = (selTimerAction | 0xC0); //eventData1;
+            eventData[7] = (selTimerUse | 0x00); //eventData2;
+            eventData[8] = 0xFF; //eventData3;
+
+            writeSEL = bus.new_method_call(ipmisel::selService,
+                                           ipmisel::selPath,
+                                           ipmisel::selIntf,
+                                           ipmisel::selAddOem);
+            writeSEL.append("ipmiFrbAddSEL", eventData, (uint8_t)0x02);
+            bus.call_noreply(writeSEL);
         }
         catch (sdbusplus::exception_t& e)
         {
-            log<level::INFO>("failed to call WDT sensor service");
-            sensorNum = 0x00;
+            log<level::INFO>("failed to call write WDT SEL method");
         }
-
-        std::vector<uint8_t> eventData(9, 0xFF);
-        eventData[0] = 0x20; //generatorID;
-        eventData[1] = 0x00; //generatorID >> 8;
-        eventData[2] = 0x04; //evmRev;
-        eventData[3] = 0x23; //sensorType;
-        eventData[4] = sensorNum; //sensorNum;
-        eventData[5] = 0x6F; //eventType;
-        eventData[6] = (selTimerAction | 0xC0); //eventData1;
-        eventData[7] = (selTimerUse | 0x00); //eventData2;
-        eventData[8] = 0xFF; //eventData3;
-
-        writeSEL = bus.new_method_call(ipmisel::selService,
-                                       ipmisel::selPath,
-                                       ipmisel::selIntf,
-                                       ipmisel::selAddOem);
-        writeSEL.append("ipmiFrbAddSEL", eventData, (uint8_t)0x02);
-        bus.call_noreply(writeSEL);
-    }
-    catch (sdbusplus::exception_t& e)
-    {
-        log<level::INFO>("failed to call write WDT SEL method");
     }
 
     // Update WATCHDOG Sensor value and state
@@ -491,6 +497,7 @@ void Watchdog::timeOutHandler()
                            wdt::propertyValue,
                            std::variant<uint8_t>(selTimerAction));
         bus.call(writeSensor);
+ 	interval(interval()); //set to original config value 
     }
     catch (sdbusplus::exception_t& e)
     {
@@ -521,6 +528,10 @@ void Watchdog::tryFallbackOrDisable()
     // Make sure we accurately reflect our enabled state to the
     // dbus interface.
     WatchdogInherits::enabled(false);
+    /*
+        Inventec - Store Don't log flag to dbus
+    */
+    WatchdogInherits::dontLog(false);
 }
 
 } // namespace watchdog
-- 
2.33.0

