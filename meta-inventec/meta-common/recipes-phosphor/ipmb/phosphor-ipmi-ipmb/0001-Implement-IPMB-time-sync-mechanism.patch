From d45846632973f88642199600d921ebad3944a394 Mon Sep 17 00:00:00 2001
From: Tommy Lin <lin.tommysc@inventec.com>
Date: Wed, 4 May 2022 09:30:55 +0000
Subject: [PATCH] Implement IPMB time sync mechanism

Symptom/Reason:
- Implement IPMB time sync mechanism

Root Cause:
- systemd-journald can not get correct at boot time

Solution/Change:
- [phosphor-ipmi-ipmb]
  - Implement ipmbtimesync
  - Add ipmb-time-sync service

Entry Test:
- sync time
  - ipmbtimesync
---
 CMakeLists.txt   |  11 +
 ipmbtimesync.cpp | 851 +++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 862 insertions(+)
 create mode 100644 ipmbtimesync.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4acdccf..9303927 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,3 +48,14 @@ set (CONFIG_FILES ${PROJECT_SOURCE_DIR}/ipmb-channels.json)
 install (TARGETS ${PROJECT_NAME} DESTINATION bin)
 install (FILES ${SERVICE_FILES} DESTINATION /lib/systemd/system/)
 install (FILES ${CONFIG_FILES} DESTINATION /usr/share/ipmbbridge/)
+
+# build ipmbtimesync
+set (SRC_FILES ipmbtimesync.cpp ipmbutils.cpp)
+add_executable (ipmbtimesync ${SRC_FILES})
+target_link_libraries (ipmbtimesync systemd)
+target_link_libraries (ipmbtimesync boost_coroutine)
+target_link_libraries (ipmbtimesync sdbusplus -lstdc++fs)
+target_link_libraries (ipmbtimesync ${Boost_LIBRARIES})
+target_link_libraries (ipmbtimesync i2c)
+link_directories (${EXTERNAL_INSTALL_LOCATION}/lib)
+install (TARGETS ipmbtimesync DESTINATION bin)
diff --git a/ipmbtimesync.cpp b/ipmbtimesync.cpp
new file mode 100644
index 0000000..47feb0b
--- /dev/null
+++ b/ipmbtimesync.cpp
@@ -0,0 +1,851 @@
+/* Copyright 2018 Intel
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+#include "ipmbbridged.hpp"
+
+#include "ipmbdefines.hpp"
+#include "ipmbutils.hpp"
+
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/asio/write.hpp>
+#include <chrono>
+#include <filesystem>
+#include <fstream>
+#include <linux/rtc.h>
+#include <nlohmann/json.hpp>
+#include <tuple>
+#include <unordered_map>
+#include <iomanip>
+#include <iostream>
+#include <sys/ioctl.h>
+#include <time.h>
+
+#define USEC_PER_SEC  ((uint64_t) 1000000ULL)
+#define NSEC_PER_USEC ((uint64_t) 1000ULL)
+#define TIME_T_MAX (time_t)((UINTMAX_C(1) << ((sizeof(time_t) << 3) - 1)) - 1)
+#define USEC_INFINITY ((uint64_t) UINT64_MAX)
+
+const static constexpr char* selService = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* selPath = "/xyz/openbmc_project/Logging/IPMI";
+const static constexpr char* selAddIntf = "xyz.openbmc_project.Logging.IPMI";
+const static constexpr char* selAdd = "IpmiSelAdd";
+const static constexpr char* selAddOem = "IpmiSelAddOem";
+const static constexpr char* RTC_DEV = "/dev/rtc";
+
+boost::asio::io_service io;
+auto conn = std::make_shared<sdbusplus::asio::connection>(io);
+
+static std::list<IpmbChannel> ipmbChannels;
+
+/**
+ * @brief Ipmb request class methods
+ */
+IpmbRequest::IpmbRequest()
+{
+    data.reserve(ipmbMaxDataSize);
+}
+
+IpmbRequest::IpmbRequest(uint8_t address, uint8_t netFn, uint8_t rsLun,
+                         uint8_t rqSA, uint8_t seq, uint8_t rqLun, uint8_t cmd,
+                         const std::vector<uint8_t> &inputData) :
+    address(address),
+    netFn(netFn), rsLun(rsLun), rqSA(rqSA), seq(seq), rqLun(rqLun), cmd(cmd),
+    timer(io)
+{
+    data.reserve(ipmbMaxDataSize);
+    state = ipmbRequestState::invalid;
+
+    if (inputData.size() > 0)
+    {
+        data = std::move(inputData);
+    }
+}
+
+void IpmbRequest::i2cToIpmbConstruct(IPMB_HEADER *ipmbBuffer,
+                                     size_t bufferLength)
+{
+    // constructing ipmb request from i2c buffer
+    netFn = ipmbNetFnGet(ipmbBuffer->Header.Req.rsNetFnLUN);
+    rsLun = ipmbLunFromNetFnLunGet(ipmbBuffer->Header.Req.rsNetFnLUN);
+    rqSA = ipmbBuffer->Header.Req.rqSA;
+    seq = ipmbSeqGet(ipmbBuffer->Header.Req.rqSeqLUN);
+    rqLun = ipmbLunFromSeqLunGet(ipmbBuffer->Header.Req.rqSeqLUN);
+    cmd = ipmbBuffer->Header.Req.cmd;
+
+    size_t dataLength =
+        bufferLength - (ipmbConnectionHeaderLength +
+                        ipmbRequestDataHeaderLength + ipmbChecksumSize);
+
+    if (dataLength > 0)
+    {
+        data.insert(data.end(), ipmbBuffer->Header.Req.data,
+                    &ipmbBuffer->Header.Req.data[dataLength]);
+    }
+}
+
+int IpmbRequest::ipmbToi2cConstruct(std::vector<uint8_t> &buffer)
+{
+    /* Add one byte for length byte as per required by driver */
+    size_t bufferLength = 1 + data.size() + ipmbRequestDataHeaderLength +
+                          ipmbConnectionHeaderLength + ipmbChecksumSize;
+
+    if (bufferLength > ipmbMaxFrameLength)
+    {
+        return -1;
+    }
+
+    buffer.resize(bufferLength);
+    static_assert(ipmbMaxFrameLength >= sizeof(IPMB_HEADER));
+    IPMB_PKT *ipmbPkt = reinterpret_cast<IPMB_PKT *>(buffer.data());
+    ipmbPkt->len = bufferLength - 1;
+    IPMB_HEADER *ipmbBuffer = &(ipmbPkt->hdr);
+
+    // constructing buffer from ipmb request
+    ipmbBuffer->Header.Req.address = address;
+    ipmbBuffer->Header.Req.rsNetFnLUN = ipmbNetFnLunSet(netFn, rsLun);
+    ipmbBuffer->Header.Req.rqSA = rqSA;
+    ipmbBuffer->Header.Req.rqSeqLUN = ipmbSeqLunSet(seq, rqLun);
+    ipmbBuffer->Header.Req.cmd = cmd;
+
+    ipmbBuffer->Header.Req.checksum1 = ipmbChecksumCompute(
+        (uint8_t *)ipmbBuffer, ipmbConnectionHeaderLength - ipmbChecksumSize);
+
+    if (data.size() > 0)
+    {
+        std::copy(data.begin(), data.end(), ipmbBuffer->Header.Req.data);
+    }
+
+    buffer[bufferLength - ipmbChecksumSize] =
+        ipmbChecksumCompute((uint8_t *)ipmbBuffer + ipmbChecksum2StartOffset,
+                            (ipmbRequestDataHeaderLength + data.size()));
+
+    return 0;
+}
+
+std::tuple<int, uint8_t, uint8_t, uint8_t, uint8_t, std::vector<uint8_t>>
+    IpmbRequest::returnMatchedResponse()
+{
+    return std::make_tuple(
+        static_cast<int>(ipmbResponseStatus::success), matchedResponse->netFn,
+        matchedResponse->rsLun, matchedResponse->cmd,
+        matchedResponse->completionCode, matchedResponse->data);
+}
+
+static std::tuple<int, uint8_t, uint8_t, uint8_t, uint8_t, std::vector<uint8_t>>
+    returnStatus(ipmbResponseStatus status)
+{
+    // we only want to send status here, other fields are not relevant
+    return std::make_tuple(static_cast<int>(status), 0, 0, 0, 0,
+                           std::vector<uint8_t>(0));
+}
+
+/**
+ * @brief Ipmb response class methods
+ */
+IpmbResponse::IpmbResponse()
+{
+    data.reserve(ipmbMaxDataSize);
+}
+
+IpmbResponse::IpmbResponse(uint8_t address, uint8_t netFn, uint8_t rqLun,
+                           uint8_t rsSA, uint8_t seq, uint8_t rsLun,
+                           uint8_t cmd, uint8_t completionCode,
+                           const std::vector<uint8_t> &inputData) :
+    address(address),
+    netFn(netFn), rqLun(rqLun), rsSA(rsSA), seq(seq), rsLun(rsLun), cmd(cmd),
+    completionCode(completionCode)
+{
+    data.reserve(ipmbMaxDataSize);
+
+    if (inputData.size() > 0)
+    {
+        data = std::move(inputData);
+    }
+}
+
+void IpmbResponse::i2cToIpmbConstruct(IPMB_HEADER *ipmbBuffer,
+                                      size_t bufferLength)
+{
+    netFn = ipmbNetFnGet(ipmbBuffer->Header.Resp.rqNetFnLUN);
+    rqLun = ipmbLunFromNetFnLunGet(ipmbBuffer->Header.Resp.rqNetFnLUN);
+    rsSA = ipmbBuffer->Header.Resp.rsSA;
+    seq = ipmbSeqGet(ipmbBuffer->Header.Resp.rsSeqLUN);
+    rsLun = ipmbLunFromSeqLunGet(ipmbBuffer->Header.Resp.rsSeqLUN);
+    cmd = ipmbBuffer->Header.Resp.cmd;
+    completionCode = ipmbBuffer->Header.Resp.completionCode;
+
+    size_t dataLength =
+        bufferLength - (ipmbConnectionHeaderLength +
+                        ipmbResponseDataHeaderLength + ipmbChecksumSize);
+
+    if (dataLength > 0)
+    {
+        data.insert(data.end(), ipmbBuffer->Header.Resp.data,
+                    &ipmbBuffer->Header.Resp.data[dataLength]);
+    }
+}
+
+std::shared_ptr<std::vector<uint8_t>> IpmbResponse::ipmbToi2cConstruct()
+{
+    /* Add one byte for length byte as per required by driver */
+    size_t bufferLength = 1 + data.size() + ipmbResponseDataHeaderLength +
+                          ipmbConnectionHeaderLength + ipmbChecksumSize;
+
+    if (bufferLength > ipmbMaxFrameLength)
+    {
+        return nullptr;
+    }
+
+    std::shared_ptr<std::vector<uint8_t>> buffer =
+        std::make_shared<std::vector<uint8_t>>(bufferLength);
+
+    IPMB_PKT *ipmbPkt = reinterpret_cast<IPMB_PKT *>(buffer->data());
+    ipmbPkt->len = bufferLength - 1;
+    IPMB_HEADER *ipmbBuffer = &(ipmbPkt->hdr);
+
+    ipmbBuffer->Header.Resp.address = address;
+    ipmbBuffer->Header.Resp.rqNetFnLUN = ipmbNetFnLunSet(netFn, rqLun);
+    ipmbBuffer->Header.Resp.rsSA = rsSA;
+    ipmbBuffer->Header.Resp.rsSeqLUN = ipmbSeqLunSet(seq, rsLun);
+    ipmbBuffer->Header.Resp.cmd = cmd;
+    ipmbBuffer->Header.Resp.completionCode = completionCode;
+
+    ipmbBuffer->Header.Resp.checksum1 = ipmbChecksumCompute(
+        (uint8_t *)ipmbBuffer, ipmbConnectionHeaderLength - ipmbChecksumSize);
+
+    if (data.size() > 0)
+    {
+        std::copy(data.begin(), data.end(), ipmbBuffer->Header.Resp.data);
+    }
+
+    (*buffer)[bufferLength - ipmbChecksumSize] =
+        ipmbChecksumCompute((uint8_t *)ipmbBuffer + ipmbChecksum2StartOffset,
+                            (ipmbResponseDataHeaderLength + data.size()));
+
+    return buffer;
+}
+
+bool IpmbCommandFilter::isBlocked(const uint8_t reqNetFn, const uint8_t cmd)
+{
+    auto blockedCmd = unhandledCommands.find({reqNetFn, cmd});
+
+    if (blockedCmd != unhandledCommands.end())
+    {
+        return true;
+    }
+
+    return false;
+}
+
+/**
+ * @brief Ipmb channel
+ */
+void IpmbChannel::ipmbSendI2cFrame(std::shared_ptr<std::vector<uint8_t>> buffer,
+                                   size_t retriesAttempted = 0)
+{
+    IPMB_PKT *ipmbPkt = reinterpret_cast<IPMB_PKT *>(buffer->data());
+    uint8_t targetAddr = ipmbIsResponse(&(ipmbPkt->hdr))
+                             ? ipmbPkt->hdr.Header.Resp.address
+                             : ipmbPkt->hdr.Header.Req.address;
+    boost::asio::async_write(
+        i2cSlaveDescriptor, boost::asio::buffer(*buffer),
+        [this, buffer, retriesAttempted,
+         targetAddr](const boost::system::error_code &ec, size_t bytesSent) {
+            if (ec)
+            {
+                size_t currentRetryCnt = retriesAttempted;
+
+                if (currentRetryCnt > ipmbI2cNumberOfRetries)
+                {
+                    std::string msgToLog =
+                        "ipmbSendI2cFrame: send to I2C failed after retries."
+                        " busId=" +
+                        std::to_string(ipmbBusId) +
+                        ", targetAddr=" + std::to_string(targetAddr) +
+                        ", error=" + ec.message();
+                    std::cerr << msgToLog << std::endl;
+                    return;
+                }
+                currentRetryCnt++;
+                ipmbSendI2cFrame(buffer, currentRetryCnt);
+            }
+        });
+}
+
+/**
+ * @brief Ipmb Outstanding Requests
+ */
+void IpmbChannel::makeRequestInvalid(IpmbRequest &request)
+{
+    // change request state to invalid and remove it from outstanding requests
+    // list
+    request.state = ipmbRequestState::invalid;
+    outstandingRequests[request.seq] = nullptr;
+}
+
+void IpmbChannel::makeRequestValid(std::shared_ptr<IpmbRequest> request)
+{
+    // change request state to valid and add it to outstanding requests list
+    request->state = ipmbRequestState::valid;
+    outstandingRequests[request->seq] = request;
+}
+
+bool IpmbChannel::seqNumGet(uint8_t &seq)
+{
+    static uint8_t seqNum = 0;
+
+    for (int i = 0; i < ipmbMaxOutstandingRequestsCount; i++)
+    {
+        seqNum = ++seqNum & ipmbSeqMask;
+        if (seqNum == ipmbMaxOutstandingRequestsCount)
+        {
+            seqNum = 0;
+        }
+
+        if (outstandingRequests[seqNum] == nullptr)
+        {
+            seq = seqNum;
+            return true;
+        }
+    }
+
+    return false;
+}
+
+void IpmbChannel::responseMatch(std::unique_ptr<IpmbResponse> &response)
+{
+    std::shared_ptr<IpmbRequest> request = outstandingRequests[response->seq];
+
+    if (request != nullptr)
+    {
+        if (((ipmbRespNetFn(request->netFn)) == (response->netFn)) &&
+            ((request->rqLun) == (response->rqLun)) &&
+            ((request->rsLun) == (response->rsLun)) &&
+            ((request->cmd) == (response->cmd)))
+        {
+            // match, response is corresponding to previously sent request
+            request->state = ipmbRequestState::matched;
+            request->timer->cancel();
+            request->matchedResponse = std::move(response);
+        }
+    }
+}
+
+void IpmbChannel::processI2cEvent()
+{
+    std::array<uint8_t, ipmbMaxFrameLength> buffer{};
+    IPMB_PKT *ipmbPkt = reinterpret_cast<IPMB_PKT *>(buffer.data());
+    IPMB_HEADER *ipmbFrame = &(ipmbPkt->hdr);
+
+    lseek(ipmbi2cSlaveFd, 0, SEEK_SET);
+    int r = read(ipmbi2cSlaveFd, buffer.data(), ipmbMaxFrameLength);
+
+    /* Substract first byte len size from total frame length */
+    r--;
+
+    if ((r < ipmbMinFrameLength) || (r > ipmbMaxFrameLength))
+    {
+        goto end;
+    }
+
+    // valiate the frame
+    if (!isFrameValid(ipmbFrame, r))
+    {
+        goto end;
+    }
+
+    // copy frame to ipmib message buffer
+    if (ipmbIsResponse(ipmbFrame))
+    {
+        std::unique_ptr<IpmbResponse> ipmbMessageReceived =
+            std::make_unique<IpmbResponse>();
+
+        ipmbMessageReceived->i2cToIpmbConstruct(ipmbFrame, r);
+
+        // try to match response with outstanding request
+        responseMatch(ipmbMessageReceived);
+    }
+    else
+    {
+        // if command is blocked - respond with 'invalid command'
+        // completion code
+        if (commandFilter)
+        {
+            uint8_t netFn = ipmbNetFnGet(ipmbFrame->Header.Req.rsNetFnLUN);
+            uint8_t cmd = ipmbFrame->Header.Req.cmd;
+            uint8_t rqSA = ipmbFrame->Header.Req.rqSA;
+
+            if (commandFilter->isBlocked(netFn, cmd))
+            {
+                uint8_t seq = ipmbSeqGet(ipmbFrame->Header.Req.rqSeqLUN);
+                uint8_t lun =
+                    ipmbLunFromSeqLunGet(ipmbFrame->Header.Req.rqSeqLUN);
+
+                // prepare generic response
+                auto ipmbResponse = IpmbResponse(
+                    rqSA, ipmbRespNetFn(netFn), lun, ipmbBmcSlaveAddress, seq,
+                    ipmbRsLun, cmd, ipmbIpmiInvalidCmd, {});
+
+                auto buffer = ipmbResponse.ipmbToi2cConstruct();
+                if (buffer)
+                {
+                    ipmbSendI2cFrame(buffer);
+                }
+
+                goto end;
+            }
+        }
+
+        auto ipmbMessageReceived = IpmbRequest();
+        ipmbMessageReceived.i2cToIpmbConstruct(ipmbFrame, r);
+    }
+
+end:
+    i2cSlaveDescriptor.async_wait(
+        boost::asio::posix::descriptor_base::wait_read,
+        [this](const boost::system::error_code &ec) {
+            if (ec)
+            {
+                std::cerr << "Error: processI2cEvent()" << std::endl;
+                return;
+            }
+
+            processI2cEvent();
+        });
+}
+
+IpmbChannel::IpmbChannel(boost::asio::io_service &io,
+                         uint8_t ipmbBmcSlaveAddress,
+                         uint8_t ipmbRqSlaveAddress, uint8_t channelIdx,
+                         std::shared_ptr<IpmbCommandFilter> commandFilter) :
+    i2cSlaveDescriptor(io),
+    ipmbBmcSlaveAddress(ipmbBmcSlaveAddress),
+    ipmbRqSlaveAddress(ipmbRqSlaveAddress), channelIdx(channelIdx),
+    commandFilter(commandFilter)
+{
+}
+
+int IpmbChannel::ipmbChannelInit(const char *ipmbI2cSlave)
+{
+    // extract bus id from slave path and save
+    std::string ipmbI2cSlaveStr(ipmbI2cSlave);
+    auto findHyphen = ipmbI2cSlaveStr.find("-");
+    std::string busStr = ipmbI2cSlaveStr.substr(findHyphen + 1);
+    try
+    {
+        ipmbBusId = std::stoi(busStr);
+    }
+    catch (const std::invalid_argument &)
+    {
+        std::cerr << "ipmbChannelInit: invalid bus id in slave-path config" << std::endl;
+        return -1;
+    }
+
+    // Check if sysfs has device. If not, enable I2C slave driver by command
+    // echo "ipmb-dev 0x1010" > /sys/bus/i2c/devices/i2c-0/new_device
+    bool hasSysfs = std::filesystem::exists(ipmbI2cSlave);
+    if (!hasSysfs)
+    {
+        std::string deviceFileName =
+            "/sys/bus/i2c/devices/i2c-" + busStr + "/new_device";
+        std::string para = "ipmb-dev 0x1010"; // init with BMC addr 0x20
+        std::fstream deviceFile;
+        deviceFile.open(deviceFileName, std::ios::out);
+        if (!deviceFile.good())
+        {
+            std::cerr << "ipmbChannelInit: error opening deviceFile" << std::endl;
+            return -1;
+        }
+        deviceFile << para;
+        deviceFile.close();
+    }
+
+    // open fd to i2c slave device for read write
+    ipmbi2cSlaveFd = open(ipmbI2cSlave, O_RDWR | O_NONBLOCK | O_CLOEXEC);
+    if (ipmbi2cSlaveFd < 0)
+    {
+        std::cerr << "ipmbChannelInit: error opening ipmbI2cSlave" << std::endl;
+        return -1;
+    }
+
+    i2cSlaveDescriptor.assign(ipmbi2cSlaveFd);
+
+    i2cSlaveDescriptor.async_wait(
+        boost::asio::posix::descriptor_base::wait_read,
+        [this](const boost::system::error_code &ec) {
+            if (ec)
+            {
+                std::cerr << "Error: processI2cEvent()" << std::endl;
+                return;
+            }
+
+            processI2cEvent();
+        });
+
+    return 0;
+}
+
+int IpmbChannel::ipmbChannelUpdateSlaveAddress(const uint8_t newBmcSlaveAddr)
+{
+    if (ipmbi2cSlaveFd > 0)
+    {
+        i2cSlaveDescriptor.close();
+        close(ipmbi2cSlaveFd);
+        ipmbi2cSlaveFd = 0;
+    }
+
+    // disable old I2C slave driver by command:
+    //     echo "0x1010" > /sys/bus/i2c/devices/i2c-0/delete_device
+    std::string deviceFileName;
+    std::string para;
+    std::fstream deviceFile;
+    deviceFileName = "/sys/bus/i2c/devices/i2c-" + std::to_string(ipmbBusId) +
+                     "/delete_device";
+    para = "0x1010"; // align with removed ipmb0 definition in dts file
+    deviceFile.open(deviceFileName, std::ios::out);
+    if (!deviceFile.good())
+    {
+        std::cerr << "ipmbChannelUpdateSlaveAddress: error opening deviceFile to delete sysfs" << std::endl;
+        return -1;
+    }
+    deviceFile << para;
+    deviceFile.close();
+
+    // enable new I2C slave driver by command:
+    //      echo "ipmb-dev 0x1012" > /sys/bus/i2c/devices/i2c-0/new_device
+    deviceFileName =
+        "/sys/bus/i2c/devices/i2c-" + std::to_string(ipmbBusId) + "/new_device";
+    std::ostringstream hex;
+    uint16_t addr = 0x1000 + (newBmcSlaveAddr >> 1);
+    hex << std::hex << static_cast<uint16_t>(addr);
+    const std::string &addressHexStr = hex.str();
+    para = "ipmb-dev 0x" + addressHexStr;
+    deviceFile.open(deviceFileName, std::ios::out);
+    if (!deviceFile.good())
+    {
+        std::cerr << "ipmbChannelUpdateSlaveAddress: error opening deviceFile to create sysfs" << std::endl;
+        return -1;
+    }
+    deviceFile << para;
+    deviceFile.close();
+
+    // open fd to i2c slave device
+    std::string ipmbI2cSlaveStr = "/dev/ipmb-" + std::to_string(ipmbBusId);
+    ipmbi2cSlaveFd = open(ipmbI2cSlaveStr.c_str(), O_RDWR | O_NONBLOCK);
+    if (ipmbi2cSlaveFd < 0)
+    {
+        std::cerr << "ipmbChannelInit: error opening ipmbI2cSlave" << std::endl;
+        return -1;
+    }
+
+    // start to receive i2c data as slave
+    i2cSlaveDescriptor.assign(ipmbi2cSlaveFd);
+    i2cSlaveDescriptor.async_wait(
+        boost::asio::posix::descriptor_base::wait_read,
+        [this](const boost::system::error_code &ec) {
+            if (ec)
+            {
+                std::cerr << "Error: processI2cEvent()" << std::endl;
+                return;
+            }
+
+            processI2cEvent();
+        });
+
+    ipmbBmcSlaveAddress = newBmcSlaveAddr;
+
+    return 0;
+}
+
+uint8_t IpmbChannel::getBusId()
+{
+    return ipmbBusId;
+}
+
+uint8_t IpmbChannel::getBmcSlaveAddress()
+{
+    return ipmbBmcSlaveAddress;
+}
+
+uint8_t IpmbChannel::getRqSlaveAddress()
+{
+    return ipmbRqSlaveAddress;
+}
+
+uint8_t IpmbChannel::getDevIndex()
+{
+    return channelIdx >> 2;
+}
+
+uint8_t IpmbChannel::getChannelIdx()
+{
+    return channelIdx;
+}
+
+ipmbChannelType IpmbChannel::getChannelType()
+{
+    return static_cast<ipmbChannelType>((channelIdx & 3));
+}
+
+std::tuple<int, uint8_t, uint8_t, uint8_t, uint8_t, std::vector<uint8_t>>
+    IpmbChannel::requestAdd(boost::asio::yield_context &yield,
+                            std::shared_ptr<IpmbRequest> request)
+{
+    makeRequestValid(request);
+
+    std::vector<uint8_t> buffer(0);
+    if (request->ipmbToi2cConstruct(buffer) != 0)
+    {
+        std::cerr << "ipmbResponseStatus::error" << std::endl;
+        return returnStatus(ipmbResponseStatus::error);
+    }
+
+    for (int i = 0; i < ipmbNumberOfTries; i++)
+    {
+        boost::system::error_code ec;
+        int i2cRetryCnt = 0;
+
+        for (; i2cRetryCnt < ipmbI2cNumberOfRetries; i2cRetryCnt++)
+        {
+            std::cerr << "async_write" << std::endl;
+            boost::asio::async_write(i2cSlaveDescriptor,
+                                     boost::asio::buffer(buffer), yield[ec]);
+
+            if (ec)
+            {
+                std::cerr << "async_write failed. Retrying..." << std::endl;
+                continue; // retry
+            }
+            break;
+        }
+
+        if (i2cRetryCnt == ipmbI2cNumberOfRetries)
+        {
+            std::string msgToLog =
+                "requestAdd: Sent to I2C failed after retries."
+                " busId=" +
+                std::to_string(ipmbBusId) + ", error=" + ec.message();
+            std::cerr << msgToLog << std::endl;
+        }
+
+        request->timer->expires_after(
+            std::chrono::milliseconds(ipmbRequestRetryTimeout));
+        request->timer->async_wait(yield[ec]);
+
+        if (ec && ec != boost::asio::error::operation_aborted)
+        {
+            // unexpected error - invalidate request and return generic error
+            std::cerr << "requestAdd: async_wait error" << std::endl;
+            makeRequestInvalid(*request);
+            return returnStatus(ipmbResponseStatus::error);
+        }
+
+        if (request->state == ipmbRequestState::matched)
+        {
+            // matched response, send it to client application
+            makeRequestInvalid(*request);
+            const auto &[status, netfn, lun, cmd, cc, response] = request->returnMatchedResponse();
+            struct timespec ts;
+            using namespace std::chrono;
+            uint32_t time = (uint32_t)response[0];
+            time |= (uint32_t)response[1] << 8;
+            time |= (uint32_t)response[2] << 16;
+            time |= (uint32_t)response[3] << 24;
+            microseconds usec{seconds(time)};
+            uint64_t value = usec.count();
+
+            if(value / USEC_PER_SEC > TIME_T_MAX-7)
+                    value = (TIME_T_MAX - 7) * USEC_PER_SEC;
+
+            if (value == USEC_INFINITY ||
+                value / USEC_PER_SEC >= TIME_T_MAX)
+            {
+                ts.tv_sec = (time_t) -1;
+                ts.tv_nsec = -1L;
+            }
+            else
+            {
+                ts.tv_sec = (time_t) (value / USEC_PER_SEC);
+                ts.tv_nsec = (long) ((value % USEC_PER_SEC) * NSEC_PER_USEC);
+            }
+
+            /* Set system clock */
+            if (clock_settime(CLOCK_REALTIME, &ts) < 0) {
+                std::cerr << "Failed to set local time" << std::endl;
+                return returnStatus(ipmbResponseStatus::error);
+            }
+
+            /* Set hardware clock */
+            if (std::filesystem::exists(RTC_DEV)) {
+                int fd;
+                struct rtc_time rt;
+                std::time_t today_time = system_clock::to_time_t(system_clock::now());
+                std::tm* tm = std::gmtime(&today_time);
+                rt.tm_year = tm->tm_year;
+                rt.tm_mon = tm->tm_mon;
+                rt.tm_mday = tm->tm_mday;
+                rt.tm_hour = tm->tm_hour;
+                rt.tm_min = tm->tm_min;
+                rt.tm_sec = tm->tm_sec;
+                fd = open("/dev/rtc", O_RDONLY);
+                ioctl(fd, RTC_SET_TIME, &rt);
+                close(fd);
+            }
+
+            std::cerr << "Time sync finished" << std::endl;
+            return request->returnMatchedResponse();
+        }
+    }
+
+    makeRequestInvalid(*request);
+    return returnStatus(ipmbResponseStatus::timeout);
+}
+
+static IpmbChannel *getChannel(uint8_t reqChannel)
+{
+    auto channel =
+        std::find_if(ipmbChannels.begin(), ipmbChannels.end(),
+                     [reqChannel](IpmbChannel &channel) {
+                         return channel.getChannelIdx() == reqChannel;
+                     });
+    if (channel != ipmbChannels.end())
+    {
+        return &(*channel);
+    }
+
+    return nullptr;
+}
+
+static int initializeChannels()
+{
+    std::shared_ptr<IpmbCommandFilter> commandFilter =
+        std::make_shared<IpmbCommandFilter>();
+
+    auto channel = ipmbChannels.emplace(
+        ipmbChannels.end(), io, 0x20, 0x2c,
+        static_cast<uint8_t>(ipmbChannelType::me), commandFilter);
+    if (channel->ipmbChannelInit("/dev/ipmb-0") < 0)
+    {
+        std::cerr << "initializeChannels: channel initialization failed" << std::endl;
+        return -1;
+    }
+    return 0;
+}
+
+/** @brief Add a SEL with correct timestamp
+ */
+void addTimestampSELEntry(IpmbChannel *channel)
+{
+    uint16_t responseID = 0xFFFF;
+
+    std::vector<uint8_t> eventData(9, 0xFF);
+    eventData[0] = channel->getBmcSlaveAddress();    //Generator ID
+    eventData[1] = channel->getChannelIdx();             //Generator ID
+    eventData[2] = 0x04;    //evmRev
+    eventData[3] = 0x12;  //Sensor Type
+    eventData[4] = 0x01;   //Sensor #
+    eventData[5] = 0x01;   //Event Dir | Event Type
+    eventData[6] = 0x0;  //Event Data 1
+    eventData[7] = 0x0;  //Event Data 2
+    eventData[8] = 0x0;  //Event Data 3
+
+    try
+    {
+        uint16_t recordId = 0xFFFF;
+
+        sdbusplus::message::message writeSEL = conn->new_method_call(
+                                selService, selPath, selAddIntf, selAddOem);
+        writeSEL.append("ipmiAddSELEntry", eventData, 0x02);
+
+        try
+        {
+            auto ret = conn->call(writeSEL);
+            ret.read(recordId);
+        }
+        catch (sdbusplus::exception_t& e)
+        {
+            std::cerr << "failed to call IpmiSelAddOem method\n";
+        }
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        std::cerr << "failed to call addTimestampSELEntry method\n";
+    }
+}
+
+void timeSync(boost::asio::yield_context yield) {
+    uint8_t reqChannel = 0x1;
+    uint8_t netfn = 0xa;
+    uint8_t lun = 0x0;
+    uint8_t cmd = 0x48;
+    std::vector<uint8_t> dataReceived;
+    IpmbChannel *channel = getChannel(reqChannel);
+
+    if (channel == nullptr)
+    {
+        std::cerr << "ipmbHandleRequest: requested channel does not exist" << std::endl;
+        return;
+    }
+
+    // check outstanding request list for valid sequence number
+    uint8_t seqNum = 0;
+    bool seqValid = channel->seqNumGet(seqNum);
+    if (!seqValid)
+    {
+        std::cerr << "ipmbHandleRequest: cannot add more requests to the list" << std::endl;
+        return;
+    }
+
+    uint8_t bmcSlaveAddress = 0x20;
+    uint8_t rqSlaveAddress = 0x2c;
+
+    // construct the request to add it to outstanding request list
+    std::shared_ptr<IpmbRequest> request = std::make_shared<IpmbRequest>(
+        rqSlaveAddress, netfn, ipmbRsLun, bmcSlaveAddress, seqNum, lun, cmd,
+        dataReceived);
+
+    if (!request->timer)
+    {
+        std::cerr << "ipmbHandleRequest: timer object does not exist" << std::endl;
+        return;
+    }
+
+    auto resp = channel->requestAdd(yield, request);
+
+    if (std::get<0>(resp) == static_cast<int>(ipmbResponseStatus::success))
+    {
+        // Add SEL entry
+        addTimestampSELEntry(channel);
+    }
+
+    io.stop();
+};
+
+/**
+ * @brief Main
+ */
+int main(int argc, char *argv[])
+{
+    if (initializeChannels() < 0)
+    {
+        std::cerr << "Error initializeChannels" << std::endl;
+        return -1;
+    }
+
+    boost::asio::spawn(io, timeSync);
+
+    io.run();
+    return 0;
+}
-- 
2.17.1

