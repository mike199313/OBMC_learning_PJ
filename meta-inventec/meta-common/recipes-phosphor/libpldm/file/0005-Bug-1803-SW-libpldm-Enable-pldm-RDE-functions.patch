From 5cc166fb9756586489bfc459c11c16d1eb273816 Mon Sep 17 00:00:00 2001
From: PJ Chen <chen.pj@inventec.com>
Date: Fri, 25 Aug 2023 16:17:10 +0800
Subject: [PATCH] Bug 1803 - [SW][libpldm] - Enable pldm RDE functions

Symptom/Reason:
  Picking up RDE patches from Google,
  but still need some modifications.

Root Cause:
  N/A

Solution:
  [libpldm]
    Modify meason and enable functions.

Entry Test:
  N/A
---
 include/libpldm/platform.h |  3 +++
 src/meson.build            |  3 ++-
 src/pldm_rde.c             | 30 ++++++++++++++++++++++++++++--
 3 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/include/libpldm/platform.h b/include/libpldm/platform.h
index 198a31e..ab6d1b1 100644
--- a/include/libpldm/platform.h
+++ b/include/libpldm/platform.h
@@ -206,6 +206,9 @@ enum pldm_pdr_types {
 	PLDM_EVENT_LOG_PDR = 19,
 	PLDM_PDR_FRU_RECORD_SET = 20,
 	PLDM_COMPACT_NUMERIC_SENSOR_PDR = 21,
+	PLDM_REDFISH_RESOURCE_PDR = 22,
+	PLDM_REDFISH_ENTITY_ASSOCIATION_PDR = 23,
+	PLDM_REDFISH_ACTION_PDR = 24,
 	PLDM_OEM_DEVICE_PDR = 126,
 	PLDM_OEM_PDR = 127,
 };
diff --git a/src/meson.build b/src/meson.build
index 3506113..0445d9e 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -6,7 +6,8 @@ libpldm_sources += files(
   'firmware_update.c',
   'fru.c',
   'pdr.c',
-  'utils.c'
+  'utils.c',
+  'pldm_rde.c'
   )
 
 subdir('requester')
diff --git a/src/pldm_rde.c b/src/pldm_rde.c
index a679cfe..5793abb 100644
--- a/src/pldm_rde.c
+++ b/src/pldm_rde.c
@@ -5,6 +5,7 @@
 #include <stdlib.h>
 #include <string.h>
 
+LIBPLDM_ABI_STABLE
 int encode_negotiate_redfish_parameters_resp(
     uint8_t instance_id, uint8_t completion_code,
     uint8_t device_concurrency_support, bitfield8_t device_capabilities_flags,
@@ -46,6 +47,7 @@ int encode_negotiate_redfish_parameters_resp(
 	       response->device_provider_name.string_length_bytes);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_negotiate_redfish_parameters_req(uint8_t instance_id,
 					    uint8_t concurrency_support,
 					    bitfield16_t *feature_support,
@@ -70,7 +72,7 @@ int encode_negotiate_redfish_parameters_req(uint8_t instance_id,
 	req->mc_feature_support.value = htole16(feature_support->value);
 	return PLDM_SUCCESS;
 }
-
+LIBPLDM_ABI_STABLE
 int decode_negotiate_redfish_parameters_req(const struct pldm_msg *msg,
 					    size_t payload_length,
 					    uint8_t *mc_concurrency_support,
@@ -94,6 +96,7 @@ int decode_negotiate_redfish_parameters_req(const struct pldm_msg *msg,
 	mc_feature_support->value = le16toh(request->mc_feature_support.value);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_negotiate_medium_parameters_resp(
     uint8_t instance_id, uint8_t completion_code,
     uint32_t device_maximum_transfer_bytes, struct pldm_msg *msg)
@@ -120,6 +123,7 @@ int encode_negotiate_medium_parameters_resp(
 	    htole32(device_maximum_transfer_bytes);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_negotiate_redfish_parameters_resp(
     const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
     struct pldm_rde_device_info *device)
@@ -150,6 +154,7 @@ int decode_negotiate_redfish_parameters_resp(
 	device->device_provider_name = response->device_provider_name;
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_negotiate_medium_parameters_resp(
     const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
     uint32_t *device_maximum_transfer_bytes)
@@ -177,6 +182,7 @@ int decode_negotiate_medium_parameters_resp(
 
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_negotiate_medium_parameters_req(uint8_t instance_id,
 					   uint32_t maximum_transfer_size,
 					   struct pldm_msg *msg)
@@ -199,6 +205,7 @@ int encode_negotiate_medium_parameters_req(uint8_t instance_id,
 	    htole32(maximum_transfer_size);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_negotiate_medium_parameters_req(const struct pldm_msg *msg,
 					   size_t payload_length,
 					   uint32_t *mc_maximum_transfer_size)
@@ -219,6 +226,7 @@ int decode_negotiate_medium_parameters_req(const struct pldm_msg *msg,
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_get_schema_dictionary_req(uint8_t instance_id, uint32_t resource_id,
 				     uint8_t schema_class, struct pldm_msg *msg)
 {
@@ -240,6 +248,7 @@ int encode_get_schema_dictionary_req(uint8_t instance_id, uint32_t resource_id,
 	req->requested_schema_class = schema_class;
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_get_schema_dictionary_req(const struct pldm_msg *msg,
 				     size_t payload_length,
 				     uint32_t *resource_id,
@@ -262,6 +271,7 @@ int decode_get_schema_dictionary_req(const struct pldm_msg *msg,
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_get_schema_dictionary_resp(uint8_t instance_id,
 				      uint8_t completion_code,
 				      uint8_t dictionary_format,
@@ -290,6 +300,7 @@ int encode_get_schema_dictionary_resp(uint8_t instance_id,
 	response->transfer_handle = htole32(transfer_handle);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_get_schema_dictionary_resp(const struct pldm_msg *msg,
 				      size_t payload_length,
 				      uint8_t *completion_code,
@@ -319,6 +330,7 @@ int decode_get_schema_dictionary_resp(const struct pldm_msg *msg,
 	*transfer_handle = le32toh(response->transfer_handle);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_multipart_receive_req(uint8_t instance_id,
 				     uint32_t data_transfer_handle,
 				     uint16_t operation_id,
@@ -344,6 +356,7 @@ int encode_rde_multipart_receive_req(uint8_t instance_id,
 	req->transfer_operation = transfer_operation;
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_multipart_receive_req(const struct pldm_msg *msg,
 				     size_t payload_length,
 				     uint32_t *data_transfer_handle,
@@ -367,6 +380,7 @@ int decode_rde_multipart_receive_req(const struct pldm_msg *msg,
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_multipart_receive_resp(
     uint8_t instance_id, uint8_t completion_code, uint8_t transfer_flag,
     uint32_t next_data_transfer_handle, uint32_t data_length_bytes,
@@ -405,6 +419,7 @@ int encode_rde_multipart_receive_resp(
 	response->data_length_bytes = htole32(tot_length);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_multipart_receive_resp(
     const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
     uint8_t *ret_transfer_flag, uint32_t *ret_data_transfer_handle,
@@ -439,6 +454,7 @@ int decode_rde_multipart_receive_resp(
 	*payload = &response->payload[0];
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_init_req(
     uint8_t instance_id, uint32_t resource_id, uint16_t operation_id,
     uint8_t operation_type,
@@ -496,6 +512,7 @@ static bool pldm_rde_is_valid_mc_op_id(uint16_t operation_id)
 	}
 	return true;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_init_req(
     const struct pldm_msg *msg, size_t payload_length, uint32_t *resource_id,
     uint16_t *operation_id, uint8_t *operation_type,
@@ -540,6 +557,7 @@ int decode_rde_operation_init_req(
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_init_resp(
     uint8_t instance_id, uint8_t completion_code, uint8_t operation_status,
     uint8_t completion_percentage, uint32_t completion_time_seconds,
@@ -596,6 +614,7 @@ int encode_rde_operation_init_resp(
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_init_resp(
     const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
     uint8_t *completion_percentage, uint8_t *operation_status,
@@ -641,6 +660,7 @@ int decode_rde_operation_init_resp(
 	}
 	return 0;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_complete_req(uint8_t instance_id, uint32_t resource_id,
 				      uint16_t operation_id,
 				      struct pldm_msg *msg)
@@ -663,6 +683,7 @@ int encode_rde_operation_complete_req(uint8_t instance_id, uint32_t resource_id,
 	req->operation_id = htole16(operation_id);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_complete_req(const struct pldm_msg *msg,
 				      size_t payload_length,
 				      uint32_t *resource_id,
@@ -680,6 +701,7 @@ int decode_rde_operation_complete_req(const struct pldm_msg *msg,
 	*operation_id = le16toh(request->operation_id);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_complete_resp(uint8_t instance_id,
 				       uint8_t completion_code,
 				       struct pldm_msg *msg)
@@ -701,6 +723,7 @@ int encode_rde_operation_complete_resp(uint8_t instance_id,
 	response->completion_code = completion_code;
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_complete_resp(const struct pldm_msg *msg,
 				       size_t payload_length,
 				       uint8_t *completion_code)
@@ -723,6 +746,7 @@ int decode_rde_operation_complete_resp(const struct pldm_msg *msg,
 	}
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_status_req(uint8_t instance_id, uint32_t resource_id,
 				    uint16_t operation_id, struct pldm_msg *msg)
 {
@@ -744,6 +768,7 @@ int encode_rde_operation_status_req(uint8_t instance_id, uint32_t resource_id,
 	req->operation_id = htole16(operation_id);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_status_req(const struct pldm_msg *msg,
 				    size_t payload_length,
 				    uint32_t *resource_id,
@@ -761,6 +786,7 @@ int decode_rde_operation_status_req(const struct pldm_msg *msg,
 	*operation_id = le16toh(request->operation_id);
 	return PLDM_SUCCESS;
 }
+LIBPLDM_ABI_STABLE
 int encode_rde_operation_status_resp(
     uint8_t instance_id, uint8_t completion_code, uint8_t operation_status,
     uint8_t completion_percentage, uint32_t completion_time_seconds,
@@ -817,7 +843,7 @@ int encode_rde_operation_status_resp(
 	}
 	return PLDM_SUCCESS;
 }
-
+LIBPLDM_ABI_STABLE
 int decode_rde_operation_status_resp(
     const struct pldm_msg *msg, size_t payload_length, uint8_t *completion_code,
     uint8_t *completion_percentage, uint8_t *operation_status,
-- 
2.25.1

