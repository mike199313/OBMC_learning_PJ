From 741a1154382d666e9d14aede7c2ee90be2451384 Mon Sep 17 00:00:00 2001
From: Jason Lin <lin.jasonyy@inventec.com>
Date: Thu, 22 Dec 2022 09:47:24 +0800
Subject: [PATCH] Bug 1075 - [Transformers][OpenBMC][WebUI][network] Unable to
 delete static ipv4 address.

Symptom/Reason:
        The error has two main reasons: one is from the 400 bad request occurred by the ipv4 link-local which will abort the deleting action, the other is from when creating the ipv4 static IP, the old one has not been deleted which cause the d-bus object path duplication.

Root Cause:
        Invalid gateway and d-bus object path duplication.

Solution/Change:
        Let the gateway 0.0.0.0 pass to enable the delete function and stop responding internal error which is "File exists".

Entry Test:
        https://{ip}/#/settings/network
---
 redfish-core/lib/ethernet.hpp | 45 +++++++++++++++++++----------------
 1 file changed, 25 insertions(+), 20 deletions(-)

diff --git a/redfish-core/lib/ethernet.hpp b/redfish-core/lib/ethernet.hpp
index 126a68d2..4b3186d9 100644
--- a/redfish-core/lib/ethernet.hpp
+++ b/redfish-core/lib/ethernet.hpp
@@ -29,6 +29,8 @@
 #include <optional>
 #include <regex>
 
+#include <errno.h>
+
 namespace redfish
 {
 
@@ -776,7 +778,7 @@ inline void
 
         crow::connections::systemBus->async_method_call(
             [asyncResp, ifaceId, gateway](const boost::system::error_code ec2) {
-            if (ec2)
+            if (ec2 != boost::system::errc::file_exists)
             {
                 messages::internalError(asyncResp->res);
                 return;
@@ -1473,33 +1475,36 @@ inline void handleIPv4StaticPatch(
                 {
                     gw = &(*gateway);
                     BMCWEB_LOG_DEBUG << "IPv4 Gateway - " << *gw;
-                    uint8_t firstbyte = 1, i = 0;
-                    char* endPtr;
-                    std::vector<std::string> bytesInMask;
-                    boost::split(bytesInMask, (*gw), boost::is_any_of("."));
-                    for (const std::string& byte : bytesInMask)
+                    if (*gw != "0.0.0.0")
                     {
-                        long value = std::strtol(byte.c_str(), &endPtr, 10);
-                        if (firstbyte)
+                        uint8_t firstbyte = 1, i = 0;
+                        char* endPtr;
+                        std::vector<std::string> bytesInMask;
+                        boost::split(bytesInMask, (*gw), boost::is_any_of("."));
+                        for (const std::string& byte : bytesInMask)
                         {
-                            if (value == 127)   //checking for loopback IP
+                            long value = std::strtol(byte.c_str(), &endPtr, 10);
+                            if (firstbyte)
                             {
-                                messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
-                                errorInEntry = true;
-                            }
+                                if (value == 127)   //checking for loopback IP
+                                {
+                                    messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
+                                    errorInEntry = true;
+                                }
 
-                            if (value >=224 && value <=239)     //checking for multicast IP
+                                if (value >=224 && value <=239)     //checking for multicast IP
+                                {
+                                    messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
+                                    errorInEntry = true;
+                                }
+                                firstbyte =0;
+                            }
+                            i++;
+                            if ( i == 4 && (value == 255 || value == 0))      //checking for network ID & broadcast IP
                             {
                                 messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
                                 errorInEntry = true;
                             }
-                            firstbyte =0;
-                        }
-                        i++;
-                        if ( i == 4 && (value == 255 || value == 0))      //checking for network ID & broadcast IP
-                        {
-                            messages::propertyValueTypeError(asyncResp->res, *gateway, pathString + "/Gateway");
-                            errorInEntry = true;
                         }
                     }
                 }
-- 
2.25.1

