From 3b0adfbea610d497e05fa2cb9e925de5ff1d1b3c Mon Sep 17 00:00:00 2001
From: emil <huang.emil@inventec.com>
Date: Fri, 10 Jun 2022 14:46:26 +0800
Subject: [PATCH 4/5] Bug 396 - [Transformers][OpenBMC][Redfish]Should be
 chassis power "on" when execute Graceful Restart (equal Graceful Warm
 Reboot).

Symptom/Reason:
    When receive the GracefulWarmReboot command from Redfish, the chassis power status turn off than turn on.
    The host should reboot with the chassis power status still on.

Root Cause:
    N/A

Solution/Change:
    [x86-power-control][power_control.cpp]
      - Remove last modified solution.
      - Add two PowerState gracefulCycleOff and gracefulWaitForPSPowerOK,
        to replace the chassis status generated when Graceful Restart is executed,
        and set the chassis status to on.

Entry Test:
emil@janus:~$ curl -u root:0penBmc -k -X POST https://10.6.141.182/redfish/v1/Systems/system/Actions/ComputerSystem.Reset -d {"ResetTyp": "GracefulRestart"}
{
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "Successfully Completed Request",
      "MessageArgs": [],
      "MessageId": "Base.1.8.1.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ],
  "@odata.etag": "3375101987"
}
emil@janus:~$ ipmitool -C 17 -I lanplus -H 10.6.141.182 -U root  -P 0penBmc  power status
Chassis Power is on
emil@janus:~$ ipmitool -C 17 -I lanplus -H 10.6.141.182 -U root  -P 0penBmc  chassis status
System Power         : on
Power Overload       : false
Power Interlock      : inactive
Main Power Fault     : false
Power Control Fault  : false
Power Restore Policy : always-off
Last Power Event     :
Chassis Intrusion    : inactive
Front-Panel Lockout  : inactive
Drive Fault          : false
Cooling/Fan Fault    : true
Front Panel Control  : none
emil@janus:~$ curl -u root:0penBmc -b cjar -k GET https://10.6.141.182/xyz/openbmc_project/state/bmc0
curl: (6) Could not resolve host: GET
{
  "data": {
    "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready",
    "LastRebootCause": "xyz.openbmc_project.State.BMC.RebootCause.POR",
    "LastRebootTime": 1654763755000,
    "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
  },
  "message": "200 OK",
  "status": "ok"
}emil@janus:~$ curl -u root:0penBmc -b cjar -k GET https://10.6.141.182/xyz/openbmc_project/state/chassis0
curl: (6) Could not resolve host: GET
{
  "data": {
    "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.On",
    "LastPowerEvent": 0,
    "LastStateChangeTime": 1654763999181,
    "PowerControlReturnCode": 0,
    "RequestedPowerIntervalMs": 6000,
    "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
  },
  "message": "200 OK",
  "status": "ok"
}emil@janus:~$ curl -u root:0penBmc -b cjar -k GET https://10.6.141.182/xyz/openbmc_project/state/host0
curl: (6) Could not resolve host: GET
{
  "data": {
    "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Running",
    "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.GracefulWarmReboot"
  },
  "message": "200 OK",
  "status": "ok"
}emil@janus:~$
---
 src/power_control.cpp | 100 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 99 insertions(+), 1 deletion(-)

diff --git a/src/power_control.cpp b/src/power_control.cpp
index c4f74cd..b3a1613 100644
--- a/src/power_control.cpp
+++ b/src/power_control.cpp
@@ -250,6 +250,8 @@ enum class PowerState
     transitionToCycleOff,
     gracefulTransitionToCycleOff,
     checkForWarmReset,
+    gracefulCycleOff,
+    gracefulWaitForPSPowerOK,
 };
 static PowerState powerState;
 static std::string getPowerStateName(PowerState state)
@@ -286,6 +288,12 @@ static std::string getPowerStateName(PowerState state)
         case PowerState::checkForWarmReset:
             return "Check for Warm Reset";
             break;
+        case PowerState::gracefulCycleOff:
+            return "Graceful Power Cycle Off";
+            break;
+        case PowerState::gracefulWaitForPSPowerOK:
+            return "Graceful Wait for Power Supply Power OK";
+            break;
         default:
             return "unknown state: " + std::to_string(static_cast<int>(state));
             break;
@@ -418,6 +426,8 @@ static void powerStateCycleOff(const Event event);
 static void powerStateTransitionToCycleOff(const Event event);
 static void powerStateGracefulTransitionToCycleOff(const Event event);
 static void powerStateCheckForWarmReset(const Event event);
+static void powerStateGracefulCycleOff(const Event event);
+static void powerStateGracefulWaitForPSPowerOK(const Event event);
 
 static std::function<void(const Event)> getPowerStateHandler(PowerState state)
 {
@@ -453,6 +463,12 @@ static std::function<void(const Event)> getPowerStateHandler(PowerState state)
         case PowerState::checkForWarmReset:
             return powerStateCheckForWarmReset;
             break;
+        case PowerState::gracefulCycleOff:
+            return powerStateGracefulCycleOff;
+            break;
+        case PowerState::gracefulWaitForPSPowerOK:
+            return powerStateGracefulWaitForPSPowerOK;
+            break;
         default:
             return nullptr;
             break;
@@ -501,6 +517,8 @@ static constexpr std::string_view getHostState(const PowerState state)
         case PowerState::transitionToCycleOff:
         case PowerState::cycleOff:
         case PowerState::checkForWarmReset:
+        case PowerState::gracefulCycleOff:
+        case PowerState::gracefulWaitForPSPowerOK:
             return "xyz.openbmc_project.State.Host.HostState.Off";
             break;
         default:
@@ -518,6 +536,8 @@ static constexpr std::string_view getChassisState(const PowerState state)
         case PowerState::transitionToCycleOff:
         case PowerState::gracefulTransitionToCycleOff:
         case PowerState::checkForWarmReset:
+        case PowerState::gracefulCycleOff:
+        case PowerState::gracefulWaitForPSPowerOK:
             return "xyz.openbmc_project.State.Chassis.PowerState.On";
             break;
         case PowerState::waitForPSPowerOK:
@@ -1807,6 +1827,44 @@ static void powerStateWaitForPSPowerOK(const Event event)
     }
 }
 
+static void powerStateGracefulWaitForPSPowerOK(const Event event)
+{
+    logEvent(__FUNCTION__, event);
+    switch (event)
+    {
+        case Event::psPowerOKAssert:
+        {
+            // Cancel any GPIO assertions held during the transition
+            gpioAssertTimer.cancel();
+            psPowerOKWatchdogTimer.cancel();
+            if (sioEnabled == true)
+            {
+                sioPowerGoodWatchdogTimerStart();
+                setPowerState(PowerState::waitForSIOPowerGood);
+            }
+            else
+            {
+                systemHostPowerOn();
+                setPowerState(PowerState::on);
+            }
+            break;
+        }
+        case Event::psPowerOKWatchdogTimerExpired:
+            setPowerState(PowerState::off);
+            psPowerOKFailedLog();
+            break;
+        case Event::sioPowerGoodAssert:
+            psPowerOKWatchdogTimer.cancel();
+            systemHostPowerOn();
+            setPowerState(PowerState::on);
+            break;
+        default:
+            phosphor::logging::log<phosphor::logging::level::INFO>(
+                "No action taken.");
+            break;
+    }
+}
+
 static void powerStateWaitForSIOPowerGood(const Event event)
 {
     logEvent(__FUNCTION__, event);
@@ -1958,6 +2016,46 @@ static void powerStateCycleOff(const Event event)
     }
 }
 
+static void powerStateGracefulCycleOff(const Event event)
+{
+    logEvent(__FUNCTION__, event);
+    switch (event)
+    {
+        case Event::psPowerOKAssert:
+        {
+            powerCycleTimer.cancel();
+            if (sioEnabled == true)
+            {
+                sioPowerGoodWatchdogTimerStart();
+                setPowerState(PowerState::waitForSIOPowerGood);
+            }
+            else
+            {
+                setPowerState(PowerState::on);
+            }
+            break;
+        }
+        case Event::sioS5DeAssert:
+            powerCycleTimer.cancel();
+            setPowerState(PowerState::waitForPSPowerOK);
+            break;
+        case Event::powerButtonPressed:
+            powerCycleTimer.cancel();
+            psPowerOKWatchdogTimerStart();
+            setPowerState(PowerState::waitForPSPowerOK);
+            break;
+        case Event::powerCycleTimerExpired:
+            psPowerOKWatchdogTimerStart();
+            setPowerState(PowerState::gracefulWaitForPSPowerOK);
+            powerOn();
+            break;
+        default:
+            phosphor::logging::log<phosphor::logging::level::INFO>(
+                "No action taken.");
+            break;
+    }
+}
+
 static void powerStateTransitionToCycleOff(const Event event)
 {
     logEvent(__FUNCTION__, event);
@@ -1984,7 +2082,7 @@ static void powerStateGracefulTransitionToCycleOff(const Event event)
         case Event::psPowerOKDeAssert:
             gracefulPowerOffTimer.cancel();
             systemHostPowerOff();
-            setPowerState(PowerState::cycleOff);
+            setPowerState(PowerState::gracefulCycleOff);
             powerCycleTimerStart();
             break;
         case Event::gracefulPowerOffTimerExpired:
-- 
2.33.0

