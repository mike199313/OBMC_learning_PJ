From 1c1e8f87dddc89f8ab8de86909dacba62a1f440c Mon Sep 17 00:00:00 2001
From: "Alang.Huang" <Huang.Alang@inventec.com>
Date: Thu, 15 Apr 2021 06:01:04 +0000
Subject: [PATCH 32/34] force spi to run at single mode

---
 drivers/mtd/spi-nor/controllers/aspeed-smc.c | 21 ++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/mtd/spi-nor/controllers/aspeed-smc.c b/drivers/mtd/spi-nor/controllers/aspeed-smc.c
index 87d506ae3b8d..0081a19ab6e1 100644
--- a/drivers/mtd/spi-nor/controllers/aspeed-smc.c
+++ b/drivers/mtd/spi-nor/controllers/aspeed-smc.c
@@ -22,6 +22,8 @@
 
 #define DEVICE_NAME	"aspeed-smc"
 
+const char *match_compatible = NULL;
+
 /*
  * The driver only support SPI flash
  */
@@ -536,12 +538,19 @@ static void aspeed_smc_send_cmd_addr(struct spi_nor *nor, u8 cmd, u32 addr)
 
 static int aspeed_smc_get_io_mode(struct aspeed_smc_chip *chip)
 {
-	switch (chip->nor.read_proto) {
+    if (0 == strcmp(match_compatible, "aspeed,ast2600-spi")) {
+           dev_info(chip->nor.dev, "it's spi interface\n");
+       }
+
+    switch (chip->nor.read_proto) {
 	case SNOR_PROTO_1_1_1:
+        dev_info(chip->nor.dev, "single mode\n");
 		return 0;
 	case SNOR_PROTO_1_1_2:
+        dev_info(chip->nor.dev, "dual data\n");
 		return CONTROL_IO_DUAL_DATA;
 	case SNOR_PROTO_1_2_2:
+        dev_info(chip->nor.dev, "dual addr data\n");
 		return CONTROL_IO_DUAL_ADDR_DATA;
 	default:
 		dev_err(chip->nor.dev, "unsupported SPI read mode\n");
@@ -1076,7 +1085,14 @@ static int aspeed_smc_optimize_read(struct aspeed_smc_chip *chip,
 	memcpy_fromio(golden_buf, chip->ahb_base, CALIBRATE_BUF_SIZE);
 
 	/* Establish our read mode with freq field set to 0 (HCLK/16) */
-	chip->ctl_val[smc_read] = save_read_val & info->hclk_mask;
+    if (0 != strcmp(match_compatible, "aspeed,ast2600-spi")) {
+        chip->ctl_val[smc_read] = save_read_val & info->hclk_mask;
+        dev_info(chip->nor.dev,
+        "not spi , set to HCLK/16");
+    } else {
+        dev_info(chip->nor.dev,
+        "spi , use default setting");
+    }
 
 	/* Check if calibration data is suitable */
 	if (!aspeed_smc_check_calib_data(golden_buf, CALIBRATE_BUF_SIZE)) {
@@ -1373,6 +1389,7 @@ static int aspeed_smc_probe(struct platform_device *pdev)
 	if (!match || !match->data)
 		return -ENODEV;
 	info = match->data;
+    match_compatible = match->compatible;
 
 	controller = devm_kzalloc(&pdev->dev,
 				  struct_size(controller, chips, info->nce),
-- 
2.33.0

