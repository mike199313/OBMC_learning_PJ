From 7d86acf2afad531be5036d73b84d7e2bc994880a Mon Sep 17 00:00:00 2001
From: "pj.chen" <chen.pj@inventec.com>
Date: Thu, 24 Feb 2022 09:27:58 +0000
Subject: [PATCH] Kernel-sync - [Intel only][Intel-BMC] branch dev-5.15-intel
 aspeed-espi-slave

Symptom/Reason:
    Sync codebase with Intel-BMC/linux aaccb149bfa6ff74dc8e9ff043191730060002db

Root Cause:
    N/A

Solution/Change:
    soc driver
        - aspeed-espi-slave, which is special for Intel PCH

Entry Test:
    N/A
---
 arch/arm/boot/dts/aspeed-g6.dtsi       |  17 +-
 drivers/soc/aspeed/Kconfig             |   8 +
 drivers/soc/aspeed/Makefile            |   1 +
 drivers/soc/aspeed/aspeed-espi-slave.c | 507 +++++++++++++++++++++++++
 4 files changed, 532 insertions(+), 1 deletion(-)
 create mode 100644 drivers/soc/aspeed/aspeed-espi-slave.c

diff --git a/arch/arm/boot/dts/aspeed-g6.dtsi b/arch/arm/boot/dts/aspeed-g6.dtsi
index 7d9242f05c13..ffb75c406df8 100644
--- a/arch/arm/boot/dts/aspeed-g6.dtsi
+++ b/arch/arm/boot/dts/aspeed-g6.dtsi
@@ -4,6 +4,7 @@
 #include <dt-bindings/interrupt-controller/arm-gic.h>
 #include <dt-bindings/interrupt-controller/aspeed-scu-ic.h>
 #include <dt-bindings/clock/ast2600-clock.h>
+#include <dt-bindings/gpio/aspeed-gpio.h>
 
 / {
 	model = "Aspeed BMC";
@@ -699,6 +700,8 @@
 				status = "disabled";
 			};
 
+			/* For Intel platform ESPI slave */
+			#if 0
 			espi: espi@1e6ee000 {
 				compatible = "aspeed,ast2600-espi", "simple-mfd", "syscon";
 				reg = <0x1e6ee000 0x1000>;
@@ -716,14 +719,26 @@
 					aspeed,espi-mmbi = <&espi_mmbi>;
 					status = "disabled";
 				};
-
 				espi_mmbi: espi-mmbi@800 {
 					compatible = "aspeed,ast2600-espi-mmbi";
 					reg = <0x800 0x50>;
 					interrupts = <GIC_SPI 108 IRQ_TYPE_LEVEL_HIGH>;
 					status = "disabled";
 				};
+			#else
+			espi: espi@1e6ee000 {
+				compatible = "aspeed,ast2600-espi-slave";
+				reg = <0x1e6ee000 0x200>;
+				interrupts-extended = <&gic GIC_SPI 42 IRQ_TYPE_LEVEL_HIGH>,
+					<&gpio0 ASPEED_GPIO(W, 7) IRQ_TYPE_EDGE_FALLING>;
+				status = "disabled";
+				clocks = <&syscon ASPEED_CLK_GATE_ESPICLK>;
+				resets = <&syscon ASPEED_RESET_ESPI>;
+				pinctrl-names = "default";
+				pinctrl-0 = <&pinctrl_espi_default>,
+					    <&pinctrl_espialt_default>;
 			};
+			#endif
 
 			chassis: chassis@1e6ef010 {
 				compatible = "aspeed,ast2600-chassis";
diff --git a/drivers/soc/aspeed/Kconfig b/drivers/soc/aspeed/Kconfig
index 1d3632c3f55b..892bb81dccd8 100644
--- a/drivers/soc/aspeed/Kconfig
+++ b/drivers/soc/aspeed/Kconfig
@@ -16,6 +16,14 @@ config ASPEED_VIDEO
 	help
 	  Driver for AST Video Engine
 
+config ASPEED_ESPI_SLAVE
+	depends on ARCH_ASPEED || COMPILE_TEST
+	depends on REGMAP_MMIO
+	tristate "Aspeed ast2500 eSPI slave device driver"
+	help
+	  Control Aspeed ast2500 eSPI slave controller to handle event
+	  which needs the firmware's processing.
+
 config ASPEED_LPC_CTRL
 	tristate "ASPEED LPC firmware cycle control"
 	select REGMAP
diff --git a/drivers/soc/aspeed/Makefile b/drivers/soc/aspeed/Makefile
index 9eaab1743e68..642761c08e55 100644
--- a/drivers/soc/aspeed/Makefile
+++ b/drivers/soc/aspeed/Makefile
@@ -1,6 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0-only
 obj-$(CONFIG_ASPEED_BMC_DEV)		+= aspeed-bmc-dev.o
 obj-$(CONFIG_ASPEED_HOST_BMC_DEV)	+= aspeed-host-bmc-dev.o
+obj-$(CONFIG_ASPEED_ESPI_SLAVE)		+= aspeed-espi-slave.o
 obj-$(CONFIG_ASPEED_LPC_CTRL)		+= aspeed-lpc-ctrl.o
 obj-$(CONFIG_ASPEED_LPC_SNOOP)		+= aspeed-lpc-snoop.o
 obj-$(CONFIG_ASPEED_UART_ROUTING)	+= aspeed-uart-routing.o
diff --git a/drivers/soc/aspeed/aspeed-espi-slave.c b/drivers/soc/aspeed/aspeed-espi-slave.c
new file mode 100644
index 000000000000..52d900893d32
--- /dev/null
+++ b/drivers/soc/aspeed/aspeed-espi-slave.c
@@ -0,0 +1,507 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (c) 2015-2019, Intel Corporation.
+
+#include <linux/clk.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/poll.h>
+#include <linux/regmap.h>
+#include <linux/reset.h>
+#include <linux/sched/signal.h>
+#include <linux/spinlock.h>
+#include <linux/uaccess.h>
+
+#define ASPEED_ESPI_CTRL			0x00
+#define  ASPEED_ESPI_CTRL_SW_RESET		GENMASK(31, 24)
+#define  ASPEED_ESPI_CTRL_OOB_CHRDY		BIT(4)
+#define ASPEED_ESPI_INT_STS			0x08
+#define  ASPEED_ESPI_HW_RESET			BIT(31)
+#define  ASPEED_ESPI_VW_SYSEVT1			BIT(22)
+#define  ASPEED_ESPI_VW_SYSEVT			BIT(8)
+#define ASPEED_ESPI_INT_EN			0x0C
+#define ASPEED_ESPI_DATA_PORT			0x28
+#define ASPEED_ESPI_SYSEVT_INT_EN		0x94
+#define ASPEED_ESPI_SYSEVT			0x98
+#define  ASPEED_ESPI_SYSEVT_HOST_RST_ACK	BIT(27)
+#define  ASPEED_ESPI_SYSEVT_SLAVE_BOOT_STATUS	BIT(23)
+#define  ASPEED_ESPI_SYSEVT_SLAVE_BOOT_DONE	BIT(20)
+#define  ASPEED_ESPI_SYSEVT_OOB_RST_ACK		BIT(16)
+#define ASPEED_ESPI_SYSEVT_INT_T0 		0x110
+#define ASPEED_ESPI_SYSEVT_INT_T1 		0x114
+#define ASPEED_ESPI_SYSEVT_INT_T2 		0x118
+#define ASPEED_ESPI_SYSEVT_INT_STS		0x11C
+#define  ASPEED_ESPI_SYSEVT_HOST_RST_WARN	BIT(8)
+#define  ASPEED_ESPI_SYSEVT_OOB_RST_WARN	BIT(6)
+#define  ASPEED_ESPI_SYSEVT_PLTRSTN		BIT(5)
+#define ASPEED_ESPI_SYSEVT1_INT_EN		0x100
+#define ASPEED_ESPI_SYSEVT1			0x104
+#define  ASPEED_ESPI_SYSEVT1_SUS_ACK		BIT(20)
+#define ASPEED_ESPI_SYSEVT1_INT_T0		0x120
+#define ASPEED_ESPI_SYSEVT1_INT_T1		0x124
+#define ASPEED_ESPI_SYSEVT1_INT_T2		0x128
+#define ASPEED_ESPI_SYSEVT1_INT_STS		0x12C
+#define  ASPEED_ESPI_SYSEVT1_SUS_WARN		BIT(0)
+
+#define ASPEED_ESPI_INT_MASK						       \
+		(ASPEED_ESPI_HW_RESET |					       \
+		 ASPEED_ESPI_VW_SYSEVT1 |				       \
+		 ASPEED_ESPI_VW_SYSEVT)
+
+/*
+ * Setup Interrupt Type / Enable of System Event from Master
+ *                                T2 T1 T0
+ *  1) HOST_RST_WARN : Dual Edge   1  0  0
+ *  2) OOB_RST_WARN  : Dual Edge   1  0  0
+ *  3) PLTRSTN       : Dual Edge   1  0  0
+ */
+#define ASPEED_ESPI_SYSEVT_INT_T0_MASK		0
+#define ASPEED_ESPI_SYSEVT_INT_T1_MASK		0
+#define ASPEED_ESPI_SYSEVT_INT_T2_MASK					       \
+		(ASPEED_ESPI_SYSEVT_HOST_RST_WARN |			       \
+		 ASPEED_ESPI_SYSEVT_OOB_RST_WARN |			       \
+		 ASPEED_ESPI_SYSEVT_PLTRSTN)
+#define ASPEED_ESPI_SYSEVT_INT_MASK					       \
+		(ASPEED_ESPI_SYSEVT_INT_T0_MASK |			       \
+		 ASPEED_ESPI_SYSEVT_INT_T1_MASK |			       \
+		 ASPEED_ESPI_SYSEVT_INT_T2_MASK)
+
+/*
+ * Setup Interrupt Type / Enable of System Event 1 from Master
+ *                                T2 T1 T0
+ *  1) SUS_WARN    : Dual Edge     1  0  0
+ */
+#define ASPEED_ESPI_SYSEVT1_INT_T0_MASK		0
+#define ASPEED_ESPI_SYSEVT1_INT_T1_MASK		0
+#define ASPEED_ESPI_SYSEVT1_INT_T2_MASK		ASPEED_ESPI_SYSEVT1_SUS_WARN
+#define ASPEED_ESPI_SYSEVT1_INT_MASK					       \
+		(ASPEED_ESPI_SYSEVT1_INT_T0_MASK |			       \
+		 ASPEED_ESPI_SYSEVT1_INT_T1_MASK |			       \
+		 ASPEED_ESPI_SYSEVT1_INT_T2_MASK)
+
+struct aspeed_espi {
+	struct regmap		*map;
+	struct clk		*clk;
+	struct device		*dev;
+	struct reset_control	*reset;
+	int			irq;
+	int			rst_irq;
+
+	/* for PLTRST_N signal monitoring interface */
+	struct miscdevice	pltrstn_miscdev;
+	spinlock_t		pltrstn_lock; /* for PLTRST_N signal sampling */
+	wait_queue_head_t	pltrstn_waitq;
+	char			pltrstn;
+	bool			pltrstn_in_avail;
+};
+
+static void aspeed_espi_sys_event(struct aspeed_espi *priv)
+{
+	u32 sts, evt;
+
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT_INT_STS, &sts);
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT, &evt);
+
+	dev_dbg(priv->dev, "sys: sts = %08x, evt = %08x\n", sts, evt);
+
+	if (!(evt & ASPEED_ESPI_SYSEVT_SLAVE_BOOT_STATUS)) {
+		regmap_write(priv->map, ASPEED_ESPI_SYSEVT,
+			     evt | ASPEED_ESPI_SYSEVT_SLAVE_BOOT_STATUS |
+			     ASPEED_ESPI_SYSEVT_SLAVE_BOOT_DONE);
+		dev_dbg(priv->dev, "Setting espi slave boot done\n");
+	}
+	if (sts & ASPEED_ESPI_SYSEVT_HOST_RST_WARN) {
+		if (evt & ASPEED_ESPI_SYSEVT_HOST_RST_WARN)
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT,
+					  ASPEED_ESPI_SYSEVT_HOST_RST_ACK,
+					  ASPEED_ESPI_SYSEVT_HOST_RST_ACK);
+		else
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT,
+					  ASPEED_ESPI_SYSEVT_HOST_RST_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT_HOST_RST_WARN: acked\n");
+	}
+	if (sts & ASPEED_ESPI_SYSEVT_OOB_RST_WARN) {
+		if (evt & ASPEED_ESPI_SYSEVT_OOB_RST_WARN)
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT,
+					  ASPEED_ESPI_SYSEVT_OOB_RST_ACK,
+					  ASPEED_ESPI_SYSEVT_OOB_RST_ACK);
+		else
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT,
+					  ASPEED_ESPI_SYSEVT_OOB_RST_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT_OOB_RST_WARN: acked\n");
+	}
+	if (sts & ASPEED_ESPI_SYSEVT_PLTRSTN || priv->pltrstn == 'U') {
+		spin_lock(&priv->pltrstn_lock);
+		priv->pltrstn = (evt & ASPEED_ESPI_SYSEVT_PLTRSTN) ? '1' : '0';
+		priv->pltrstn_in_avail = true;
+		spin_unlock(&priv->pltrstn_lock);
+		wake_up_interruptible(&priv->pltrstn_waitq);
+		dev_dbg(priv->dev, "SYSEVT_PLTRSTN: %c\n", priv->pltrstn);
+	}
+
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT_INT_STS, sts);
+}
+
+static void aspeed_espi_sys_event1(struct aspeed_espi *priv)
+{
+	u32 sts, evt;
+
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT1_INT_STS, &sts);
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT1, &evt);
+
+	dev_dbg(priv->dev, "sys event1: sts = %08x, evt = %08x\n", sts, evt);
+
+	if (sts & ASPEED_ESPI_SYSEVT1_SUS_WARN) {
+		if  (evt & ASPEED_ESPI_SYSEVT1_SUS_WARN)
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT1,
+					  ASPEED_ESPI_SYSEVT1_SUS_ACK,
+					  ASPEED_ESPI_SYSEVT1_SUS_ACK);
+		else
+			regmap_write_bits(priv->map, ASPEED_ESPI_SYSEVT1,
+					  ASPEED_ESPI_SYSEVT1_SUS_ACK, 0);
+		dev_dbg(priv->dev, "SYSEVT1_SUS_WARN: acked\n");
+	}
+
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT1_INT_STS, sts);
+}
+
+static void aspeed_espi_boot_ack(struct aspeed_espi *priv)
+{
+	u32 evt;
+
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT, &evt);
+	if (!(evt & ASPEED_ESPI_SYSEVT_SLAVE_BOOT_STATUS)) {
+		regmap_write(priv->map, ASPEED_ESPI_SYSEVT,
+			     evt | ASPEED_ESPI_SYSEVT_SLAVE_BOOT_STATUS |
+			     ASPEED_ESPI_SYSEVT_SLAVE_BOOT_DONE);
+		dev_dbg(priv->dev, "Setting espi slave boot done\n");
+	}
+
+	regmap_read(priv->map, ASPEED_ESPI_SYSEVT1, &evt);
+	if (evt & ASPEED_ESPI_SYSEVT1_SUS_WARN &&
+	    !(evt & ASPEED_ESPI_SYSEVT1_SUS_ACK)) {
+		regmap_write(priv->map, ASPEED_ESPI_SYSEVT1,
+			     evt | ASPEED_ESPI_SYSEVT1_SUS_ACK);
+		dev_dbg(priv->dev, "Boot SYSEVT1_SUS_WARN: acked\n");
+	}
+}
+
+static irqreturn_t aspeed_espi_irq(int irq, void *arg)
+{
+	struct aspeed_espi *priv = arg;
+	u32 sts, sts_handled = 0;
+
+	regmap_read(priv->map, ASPEED_ESPI_INT_STS, &sts);
+
+	dev_dbg(priv->dev, "INT_STS: 0x%08x\n", sts);
+
+	if (sts & ASPEED_ESPI_VW_SYSEVT) {
+		aspeed_espi_sys_event(priv);
+		sts_handled |= ASPEED_ESPI_VW_SYSEVT;
+	}
+
+	if (sts & ASPEED_ESPI_VW_SYSEVT1) {
+		aspeed_espi_sys_event1(priv);
+		sts_handled |= ASPEED_ESPI_VW_SYSEVT1;
+	}
+
+	if (sts & ASPEED_ESPI_HW_RESET) {
+		if (priv->rst_irq < 0) {
+			regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+					  ASPEED_ESPI_CTRL_SW_RESET, 0);
+			regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+					  ASPEED_ESPI_CTRL_SW_RESET,
+					  ASPEED_ESPI_CTRL_SW_RESET);
+		}
+
+		regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+				  ASPEED_ESPI_CTRL_OOB_CHRDY,
+				  ASPEED_ESPI_CTRL_OOB_CHRDY);
+		aspeed_espi_boot_ack(priv);
+		sts_handled |= ASPEED_ESPI_HW_RESET;
+	}
+
+	regmap_write(priv->map, ASPEED_ESPI_INT_STS, sts);
+
+	return sts != sts_handled ? IRQ_NONE : IRQ_HANDLED;
+}
+
+static void aspeed_espi_config_irq(struct aspeed_espi *priv)
+{
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT_INT_T0,
+		     ASPEED_ESPI_SYSEVT_INT_T0_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT_INT_T1,
+		     ASPEED_ESPI_SYSEVT_INT_T1_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT_INT_T2,
+		     ASPEED_ESPI_SYSEVT_INT_T2_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT_INT_EN,
+		     ASPEED_ESPI_SYSEVT_INT_MASK);
+
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT1_INT_T0,
+		     ASPEED_ESPI_SYSEVT1_INT_T0_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT1_INT_T1,
+		     ASPEED_ESPI_SYSEVT1_INT_T1_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT1_INT_T2,
+		     ASPEED_ESPI_SYSEVT1_INT_T2_MASK);
+	regmap_write(priv->map, ASPEED_ESPI_SYSEVT1_INT_EN,
+		     ASPEED_ESPI_SYSEVT1_INT_MASK);
+
+	regmap_write(priv->map, ASPEED_ESPI_INT_EN, ASPEED_ESPI_INT_MASK);
+}
+
+static irqreturn_t aspeed_espi_reset_isr(int irq, void *arg)
+{
+	struct aspeed_espi *priv = arg;
+
+	reset_control_assert(priv->reset);
+	reset_control_deassert(priv->reset);
+
+	regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+			  ASPEED_ESPI_CTRL_SW_RESET, 0);
+	regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+			  ASPEED_ESPI_CTRL_SW_RESET, ASPEED_ESPI_CTRL_SW_RESET);
+
+	regmap_write_bits(priv->map, ASPEED_ESPI_CTRL,
+			  ASPEED_ESPI_CTRL_OOB_CHRDY, 0);
+
+	aspeed_espi_config_irq(priv);
+
+	return IRQ_HANDLED;
+}
+
+static inline struct aspeed_espi *to_aspeed_espi(struct file *filp)
+{
+	return container_of(filp->private_data, struct aspeed_espi,
+			    pltrstn_miscdev);
+}
+
+static int aspeed_espi_pltrstn_open(struct inode *inode, struct file *filp)
+{
+	if ((filp->f_flags & O_ACCMODE) != O_RDONLY)
+		return -EACCES;
+	struct aspeed_espi *priv = to_aspeed_espi(filp);
+	priv->pltrstn_in_avail = true ; /*Setting true returns first data after file open*/
+
+	return 0;
+}
+
+static ssize_t aspeed_espi_pltrstn_read(struct file *filp, char __user *buf,
+					size_t count, loff_t *offset)
+{
+	struct aspeed_espi *priv = to_aspeed_espi(filp);
+	DECLARE_WAITQUEUE(wait, current);
+	char data, old_sample;
+	int ret = 0;
+
+	spin_lock_irq(&priv->pltrstn_lock);
+
+	if (filp->f_flags & O_NONBLOCK) {
+		if (!priv->pltrstn_in_avail) {
+			ret = -EAGAIN;
+			goto out_unlock;
+		}
+		data = priv->pltrstn;
+		priv->pltrstn_in_avail = false;
+	} else {
+		add_wait_queue(&priv->pltrstn_waitq, &wait);
+		set_current_state(TASK_INTERRUPTIBLE);
+
+		old_sample = priv->pltrstn;
+
+		do {
+			if (old_sample != priv->pltrstn) {
+				data = priv->pltrstn;
+				priv->pltrstn_in_avail = false;
+				break;
+			}
+
+			if (signal_pending(current)) {
+				ret = -ERESTARTSYS;
+			} else {
+				spin_unlock_irq(&priv->pltrstn_lock);
+				schedule();
+				spin_lock_irq(&priv->pltrstn_lock);
+			}
+		} while (!ret);
+
+		remove_wait_queue(&priv->pltrstn_waitq, &wait);
+		set_current_state(TASK_RUNNING);
+	}
+out_unlock:
+	spin_unlock_irq(&priv->pltrstn_lock);
+
+	if (ret)
+		return ret;
+
+	ret = put_user(data, buf);
+	if (!ret)
+		ret = sizeof(data);
+
+	return ret;
+}
+
+static unsigned int aspeed_espi_pltrstn_poll(struct file *file,
+						 poll_table *wait)
+{
+	struct aspeed_espi *priv = to_aspeed_espi(file);
+	unsigned int mask = 0;
+	poll_wait(file, &priv->pltrstn_waitq, wait);
+
+	if (priv->pltrstn_in_avail)
+		mask |= POLLIN;
+	return mask;
+}
+
+static const struct file_operations aspeed_espi_pltrstn_fops = {
+	.owner	= THIS_MODULE,
+	.open	= aspeed_espi_pltrstn_open,
+	.read	= aspeed_espi_pltrstn_read,
+	.poll	= aspeed_espi_pltrstn_poll,
+};
+
+static const struct regmap_config aspeed_espi_regmap_cfg = {
+	.reg_bits	= 32,
+	.reg_stride	= 4,
+	.val_bits	= 32,
+	.max_register	= ASPEED_ESPI_SYSEVT1_INT_STS,
+};
+
+static int aspeed_espi_probe(struct platform_device *pdev)
+{
+	struct aspeed_espi *priv;
+	struct resource *res;
+	void __iomem *regs;
+	u32 ctrl;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(regs))
+		return PTR_ERR(regs);
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	dev_set_drvdata(&pdev->dev, priv);
+	priv->dev = &pdev->dev;
+
+	priv->map = devm_regmap_init_mmio(&pdev->dev, regs,
+					  &aspeed_espi_regmap_cfg);
+	if (IS_ERR(priv->map))
+		return PTR_ERR(priv->map);
+
+	spin_lock_init(&priv->pltrstn_lock);
+	init_waitqueue_head(&priv->pltrstn_waitq);
+	priv->pltrstn = 'U'; /* means it's not reported yet from master */
+
+	priv->irq = platform_get_irq(pdev, 0);
+	if (priv->irq < 0)
+		return priv->irq;
+
+	ret = devm_request_irq(&pdev->dev, priv->irq, aspeed_espi_irq, 0,
+			       "aspeed-espi-irq", priv);
+	if (ret)
+		return ret;
+
+	if (of_device_is_compatible(pdev->dev.of_node,
+				    "aspeed,ast2600-espi-slave")) {
+		priv->rst_irq = platform_get_irq(pdev, 1);
+		if (priv->rst_irq < 0)
+			return priv->rst_irq;
+
+		ret = devm_request_irq(&pdev->dev, priv->rst_irq,
+				       aspeed_espi_reset_isr, 0,
+				       "aspeed-espi-rst-irq", priv);
+		if (ret)
+			return ret;
+
+		priv->reset = devm_reset_control_get(&pdev->dev, NULL);
+		if (IS_ERR(priv->reset))
+			return PTR_ERR(priv->reset);
+	} else {
+		priv->rst_irq = -ENOTSUPP;
+	}
+
+	priv->clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(priv->clk))
+		return dev_err_probe(&pdev->dev, PTR_ERR(priv->clk),
+				     "couldn't get clock\n");
+	ret = clk_prepare_enable(priv->clk);
+	if (ret) {
+		dev_err(&pdev->dev, "couldn't enable clock\n");
+		return ret;
+	}
+
+	/*
+	 * We check that the regmap works on this very first access, but as this
+	 * is an MMIO-backed regmap, subsequent regmap access is not going to
+	 * fail and we skip error checks from this point.
+	 */
+	ret = regmap_read(priv->map, ASPEED_ESPI_CTRL, &ctrl);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to read ctrl register\n");
+		goto err_clk_disable_out;
+	}
+	regmap_write(priv->map, ASPEED_ESPI_CTRL,
+		     ctrl | ASPEED_ESPI_CTRL_OOB_CHRDY);
+
+	priv->pltrstn_miscdev.minor = MISC_DYNAMIC_MINOR;
+	priv->pltrstn_miscdev.name = "espi-pltrstn";
+	priv->pltrstn_miscdev.fops = &aspeed_espi_pltrstn_fops;
+	priv->pltrstn_miscdev.parent = &pdev->dev;
+
+	ret = misc_register(&priv->pltrstn_miscdev);
+	if (ret) {
+		dev_err(&pdev->dev, "Unable to register device\n");
+		goto err_clk_disable_out;
+	}
+
+	aspeed_espi_config_irq(priv);
+	aspeed_espi_boot_ack(priv);
+
+	dev_info(&pdev->dev, "eSPI registered, irq %d\n", priv->irq);
+
+	return 0;
+
+err_clk_disable_out:
+	clk_disable_unprepare(priv->clk);
+
+	return ret;
+}
+
+static int aspeed_espi_remove(struct platform_device *pdev)
+{
+	struct aspeed_espi *priv = dev_get_drvdata(&pdev->dev);
+
+	misc_deregister(&priv->pltrstn_miscdev);
+	clk_disable_unprepare(priv->clk);
+
+	return 0;
+}
+
+static const struct of_device_id of_espi_match_table[] = {
+	{ .compatible = "aspeed,ast2500-espi-slave" },
+	{ .compatible = "aspeed,ast2600-espi-slave" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, of_espi_match_table);
+
+static struct platform_driver aspeed_espi_driver = {
+	.driver	= {
+		.name		= KBUILD_MODNAME,
+		.of_match_table	= of_match_ptr(of_espi_match_table),
+	},
+	.probe	= aspeed_espi_probe,
+	.remove	= aspeed_espi_remove,
+};
+module_platform_driver(aspeed_espi_driver);
+
+MODULE_AUTHOR("Haiyue Wang <haiyue.wang@linux.intel.com>");
+MODULE_AUTHOR("Jae Hyun Yoo <jae.hyun.yoo@linux.intel.com>");
+MODULE_DESCRIPTION("Aspeed eSPI driver");
+MODULE_LICENSE("GPL v2");
-- 
2.17.1

