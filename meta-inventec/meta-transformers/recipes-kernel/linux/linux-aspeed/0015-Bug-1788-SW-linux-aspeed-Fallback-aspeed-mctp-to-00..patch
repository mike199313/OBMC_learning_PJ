From 47c4e0f03f09d8aa4656488dabcf6d2025638e3f Mon Sep 17 00:00:00 2001
From: PJ Chen <chen.pj@inventec.com>
Date: Wed, 16 Aug 2023 19:12:23 +0800
Subject: [PATCH] Bug 1788 - [SW][linux-aspeed] - Fallback aspeed-mctp to
 00.05.03

Symptom/Reason:
  In 00.05.06 version, aspeed-mctp has issue.
  Fallback to 00.05.03 temporary for PLDM usage first.
  Need to check why 00.05.06 cannot process mctp package.

Root Cause:
  N/A

Solution/Change:
  [linux-aspeed]
    Modify aspeed_mctp.c to 00.05.03 version

Entry Test:
  N/A
---
 drivers/soc/aspeed/aspeed-mctp.c | 73 +++++---------------------------
 1 file changed, 11 insertions(+), 62 deletions(-)

diff --git a/drivers/soc/aspeed/aspeed-mctp.c b/drivers/soc/aspeed/aspeed-mctp.c
index 73759d1f27c8..d1c4b94951ee 100644
--- a/drivers/soc/aspeed/aspeed-mctp.c
+++ b/drivers/soc/aspeed/aspeed-mctp.c
@@ -114,7 +114,7 @@
 #define TX_DATA_ADDR_2500(x) \
 	FIELD_PREP(TX_DATA_ADDR_MASK_2500, DATA_ADDR_2500(x))
 #define TX_PACKET_SIZE_2500(x) \
-	FIELD_PREP(GENMASK(11, 2), x)
+	FIELD_PREP(GENMASK(11, 2), DATA_ADDR_2500(x))
 #define TX_PACKET_DEST_EID	GENMASK(7, 0)
 #define TX_PACKET_TARGET_ID	GENMASK(31, 16)
 #define TX_PACKET_ROUTING_TYPE	BIT(14)
@@ -155,8 +155,6 @@
 #define TX_RING_COUNT		64
 
 /* PCIe Host Controller registers */
-#define ASPEED_PCIE_LINK	0x0c0
-#define PCIE_LINK_STS		BIT(5)
 #define ASPEED_PCIE_MISC_STS_1	0x0c4
 
 /* PCI address definitions */
@@ -376,9 +374,6 @@ static u16 _get_bdf(struct aspeed_mctp *priv)
 	u32 reg;
 	u16 bdf;
 
-	regmap_read(priv->pcie.map, ASPEED_PCIE_LINK, &reg);
-	if (!(reg & PCIE_LINK_STS))
-		return 0;
 	regmap_read(priv->pcie.map, ASPEED_PCIE_MISC_STS_1, &reg);
 
 	reg = reg & (PCI_BUS_NUM_MASK | PCI_DEV_NUM_MASK);
@@ -431,7 +426,6 @@ static void aspeed_mctp_swap_pcie_vdm_hdr(struct mctp_pcie_packet_data *data)
 static void aspeed_mctp_rx_trigger(struct mctp_channel *rx)
 {
 	struct aspeed_mctp *priv = container_of(rx, typeof(*priv), rx);
-	u32 reg;
 
 	/*
 	 * Even though rx_buf_addr doesn't change, if we don't do the write
@@ -443,23 +437,7 @@ static void aspeed_mctp_rx_trigger(struct mctp_channel *rx)
 	 * value, the HW behaves in a bizarre way that's hard to explain...
 	 */
 	regmap_update_bits(priv->map, ASPEED_MCTP_CTRL, RX_CMD_READY, 0);
-	if (priv->match_data->fifo_auto_surround) {
-		regmap_write(priv->map, ASPEED_MCTP_RX_BUF_ADDR,
-			     rx->cmd.dma_handle);
-	} else {
-		regmap_read(priv->map, ASPEED_MCTP_RX_BUF_ADDR, &reg);
-		if (!reg) {
-			regmap_write(priv->map, ASPEED_MCTP_RX_BUF_ADDR,
-				     rx->cmd.dma_handle);
-		} else if (reg == (rx->cmd.dma_handle & GENMASK(28, 3))) {
-			dev_info(priv->dev,
-				 "Already initialized - skipping rx dma set\n");
-		} else {
-			dev_err(priv->dev,
-				"The memory of rx dma can't be changed after the controller is activated\n");
-			return;
-		}
-	}
+	regmap_write(priv->map, ASPEED_MCTP_RX_BUF_ADDR, rx->cmd.dma_handle);
 	regmap_write(priv->map, ASPEED_MCTP_RX_BUF_WR_PTR, 0);
 
 	/* After re-enabling RX we need to restart WA logic */
@@ -782,7 +760,7 @@ static void aspeed_mctp_rx_tasklet(unsigned long data)
 		 */
 		rx_buf = (struct mctp_pcie_packet_data *)rx->data.vaddr;
 		hdr = (u32 *)&rx_buf[rx->wr_ptr];
-		if (!*hdr && priv->rx_warmup) {
+		if ((priv->rx_warmup || priv->rx_runaway_wa.first_loop) && !*hdr) {
 			u32 tmp_wr_ptr = rx->wr_ptr;
 
 			/*
@@ -809,8 +787,6 @@ static void aspeed_mctp_rx_tasklet(unsigned long data)
 							     residual_cmds);
 				priv->rx_warmup = false;
 			}
-		} else {
-			priv->rx_warmup = false;
 		}
 
 		if (priv->rx_runaway_wa.packet_counter > priv->rx_packet_count &&
@@ -839,14 +815,6 @@ static void aspeed_mctp_rx_tasklet(unsigned long data)
 		}
 
 		while (*hdr != 0) {
-			if (FIELD_GET(MCTP_HDR_DW_LE_PACKET_SIZE, hdr[0]) * 4 >
-			    ASPEED_MCTP_MTU)
-				dev_warn(priv->dev,
-					 "Rx length %ld > MTU size %d\n",
-					 FIELD_GET(MCTP_HDR_DW_LE_PACKET_SIZE,
-						   hdr[0]) *
-						 4,
-					 ASPEED_MCTP_MTU);
 			rx_packet = aspeed_mctp_packet_alloc(GFP_ATOMIC);
 			if (rx_packet) {
 				memcpy(&rx_packet->data, hdr, sizeof(rx_packet->data));
@@ -883,28 +851,6 @@ static void aspeed_mctp_rx_tasklet(unsigned long data)
 		rx_cmd = (struct aspeed_mctp_rx_cmd *)rx->cmd.vaddr;
 		hdr = (u32 *)&((rx_cmd + rx->wr_ptr)->rx_lo);
 
-		if (!*hdr) {
-			u32 tmp_wr_ptr = rx->wr_ptr;
-
-			/*
-			 * HACK: Right after start the RX hardware can put received
-			 * packet into an unexpected offset - in order to locate
-			 * received packet driver has to scan all RX data buffers.
-			 */
-			do {
-				tmp_wr_ptr = (tmp_wr_ptr + 1) % rx->buffer_count;
-
-				hdr = (u32 *)&((rx_cmd + tmp_wr_ptr)->rx_lo);
-			} while (!*hdr && tmp_wr_ptr != rx->wr_ptr);
-
-			if (tmp_wr_ptr != rx->wr_ptr) {
-				dev_warn(priv->dev,
-					 "Runaway RX packet found %d -> %d\n",
-					 rx->wr_ptr, tmp_wr_ptr);
-				rx->wr_ptr = tmp_wr_ptr;
-			}
-		}
-
 		while (*hdr != 0) {
 			rx_packet = aspeed_mctp_packet_alloc(GFP_ATOMIC);
 			if (rx_packet) {
@@ -1179,12 +1125,13 @@ static ssize_t aspeed_mctp_read(struct file *file, char __user *buf,
 			priv->rx.stopped = true;
 		/* Polling the RX_CMD_RECEIVE_INT to ensure rx_tasklet can find the data */
 		regmap_read(priv->map, ASPEED_MCTP_INT_STS, &mctp_int_sts);
-		if (mctp_int_sts & RX_CMD_RECEIVE_INT)
+		if (mctp_int_sts & RX_CMD_RECEIVE_INT) {
 			regmap_write(priv->map, ASPEED_MCTP_INT_STS,
 				     mctp_int_sts);
+			tasklet_hi_schedule(&priv->rx.tasklet);
+		}
 	}
 
-	tasklet_hi_schedule(&priv->rx.tasklet);
 	rx_packet = ptr_ring_consume_bh(&client->rx_queue);
 	if (!rx_packet)
 		return -EAGAIN;
@@ -1768,12 +1715,13 @@ static __poll_t aspeed_mctp_poll(struct file *file,
 			rx->stopped = true;
 		/* Polling the RX_CMD_RECEIVE_INT to ensure rx_tasklet can find the data */
 		regmap_read(priv->map, ASPEED_MCTP_INT_STS, &mctp_int_sts);
-		if (mctp_int_sts & RX_CMD_RECEIVE_INT)
+		if (mctp_int_sts & RX_CMD_RECEIVE_INT) {
 			regmap_write(priv->map, ASPEED_MCTP_INT_STS,
 				     mctp_int_sts);
+			tasklet_hi_schedule(&priv->rx.tasklet);
+		}
 	}
 
-	tasklet_hi_schedule(&priv->rx.tasklet);
 	poll_wait(file, &client->wait_queue, pt);
 
 	if (!ptr_ring_full_bh(&client->tx_queue))
@@ -2247,7 +2195,6 @@ static int aspeed_mctp_probe(struct platform_device *pdev)
 		regmap_update_bits(priv->map, ASPEED_MCTP_ENGINE_CTRL,
 				   TX_MAX_PAYLOAD_SIZE_MASK,
 				   FIELD_GET(TX_MAX_PAYLOAD_SIZE_MASK, fls(ASPEED_MCTP_MTU >> 6)));
-		aspeed_mctp_rx_trigger(&priv->rx);
 	}
 
 	priv->peci_mctp = platform_device_register_data(
@@ -2256,6 +2203,8 @@ static int aspeed_mctp_probe(struct platform_device *pdev)
 	if (IS_ERR(priv->peci_mctp))
 		dev_err(priv->dev, "Failed to register peci-mctp device\n");
 
+	aspeed_mctp_rx_trigger(&priv->rx);
+
 	return 0;
 
 out_dma:
-- 
2.25.1

