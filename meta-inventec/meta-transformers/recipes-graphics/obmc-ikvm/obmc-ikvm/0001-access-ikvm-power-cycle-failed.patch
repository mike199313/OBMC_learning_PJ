From 9407aaf589282c208fd4cef742a2187eb5fcc064 Mon Sep 17 00:00:00 2001
From: "sun.cwsun" <sun.cwsun@inventec.com>
Date: Wed, 23 Mar 2022 10:48:18 +0800
Subject: [PATCH] Bug 707 - [Transformers][OpenBMC][WebUI]When login to OS from new windows via iKVM then power cycle via ipmi, DUT won't boot up.

    Symptom/Reason :
        - When using browser access ikvm. The ipmitool power cycle will make the host down successfully but host up failed
    Root Cause:
        - The VGA path is occupied when power cycle. The ikvm is using the aspeed video capture engine (/dev/video0) to capture the video output. So the vga path is occupied. and make the power up failed.
    Solution/Change:
        [x86-power-control]
            - When the power transition start, make the ikvm stopping the video capturing by calling ikvm registered method call . When the power is OK to boot up. Call the ikvm registered method to start video capturing.
        [obmc-ikvm]
            -register two method call to systemd to let the x86-power-control to control the video capture at correct time.
    Entry Test:
        - 1. using browser access the ikvm
        - 2. using ipmitool power cycle
        - 3. The video capture stop but websocket is still connected.
        - 4. When power ok, The ikvm video capturing is up and working.
        - 5. The user can get the bios screen and enter bios.
---
 ikvm_manager.cpp | 74 +++++++++++++++++++++++++++++++++++-------------
 ikvm_manager.hpp |  7 +++++
 2 files changed, 61 insertions(+), 20 deletions(-)

diff --git a/ikvm_manager.cpp b/ikvm_manager.cpp
index 2f66fd5..bad0566 100644
--- a/ikvm_manager.cpp
+++ b/ikvm_manager.cpp
@@ -7,41 +7,75 @@ namespace ikvm
 Manager::Manager(const Args& args) :
     continueExecuting(true), serverDone(false), videoDone(true),
     input(args.getKeyboardPath(), args.getPointerPath(), args.getUdcName()),
-    video(args.getVideoPath(), input, args.getFrameRate(),
-          args.getSubsampling()),
-    server(args, input, video)
+    video(args.getVideoPath(), input, args.getFrameRate()),
+    server(args, input, video), videoRun(true)
 {}
 
 void Manager::run()
 {
     std::thread run(serverThread, this);
 
+    auto conn = std::make_shared<sdbusplus::asio::connection>(this->io);
+    conn->request_name("xyz.openbmc_project.IKVM");
+
+    auto objServer = sdbusplus::asio::object_server(conn);
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface("/xyz/openbmc_project/ikvm",
+                                "xyz.openbmc_project.ikvm");
+
+    iface->register_method("stopVideoCapture",
+                                [&]()
+                                {
+                                    this->videoRun = false;
+                                    fprintf(stderr, "stopVideoCapture \n");
+                                });
+
+    iface->register_method("startVideoCapture",
+                                [&]()
+                                {
+                                    this->videoRun = true;
+                                    fprintf(stderr, "startVideoCapture \n");
+                                });
+
+    iface->initialize();
+
     while (continueExecuting)
     {
-        if (server.wantsFrame())
+        if(this->videoRun)
         {
-            video.start();
-            video.getFrame();
-            server.sendFrame();
+            if (server.wantsFrame())
+            {
+                video.start();
+                video.getFrame();
+                server.sendFrame();
+            }
+            else
+            {
+                video.stop();
+            }
+
+            if (video.needsResize())
+            {
+                videoDone = false;
+                waitServer();
+                video.resize();
+                server.resize();
+                setVideoDone();
+            }
+            else
+            {
+                setVideoDone();
+                waitServer();
+            }
         }
         else
         {
             video.stop();
         }
 
-        if (video.needsResize())
-        {
-            videoDone = false;
-            waitServer();
-            video.resize();
-            server.resize();
-            setVideoDone();
-        }
-        else
-        {
-            setVideoDone();
-            waitServer();
-        }
+        //runs handlers that are ready to run,
+        //without blocking, until the io_context has been stopped or there are no more ready handlers.
+        io.poll();
     }
 
     run.join();
diff --git a/ikvm_manager.hpp b/ikvm_manager.hpp
index c6750e6..04ad82e 100644
--- a/ikvm_manager.hpp
+++ b/ikvm_manager.hpp
@@ -8,6 +8,10 @@
 #include <condition_variable>
 #include <mutex>
 
+#include <boost/asio.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
 namespace ikvm
 {
 /*
@@ -69,6 +73,9 @@ class Manager
     std::condition_variable sync;
     /* @brief Mutex for waiting on condition variable safely */
     std::mutex lock;
+
+    boost::asio::io_context io;
+    bool videoRun;
 };
 
 } // namespace ikvm
-- 
2.25.1