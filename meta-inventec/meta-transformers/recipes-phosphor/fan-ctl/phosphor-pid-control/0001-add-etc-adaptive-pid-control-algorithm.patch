From 7a921c2753602888da4d1b9d154a866344c44406 Mon Sep 17 00:00:00 2001
From: "Alang.Huang" <Huang.Alang@inventec.com>
Date: Thu, 19 Aug 2021 08:05:09 +0000
Subject: [PATCH 1/2] add etc adaptive pid control algorithm

---
 pid/ec/pid.cpp | 181 +++++++++++++++++++++++++++++++++----------------
 1 file changed, 121 insertions(+), 60 deletions(-)

diff --git a/pid/ec/pid.cpp b/pid/ec/pid.cpp
index 98968f7..94b3e4b 100644
--- a/pid/ec/pid.cpp
+++ b/pid/ec/pid.cpp
@@ -15,11 +15,52 @@
  */
 
 #include "pid.hpp"
+#include <iostream>
+#include <cmath>
+#include <vector>
+#include "../tuning.hpp" 
 
 namespace pid_control
 {
 namespace ec
 {
+struct Range {
+    double min;
+    double max;
+};
+
+struct ProportionalFactorTable {
+
+    Range err;
+    double factor;
+};
+
+using std::vector;
+const vector<ProportionalFactorTable> pFactorTable = { {{0.0, 1.0}, 0.07},
+                                                {{1.0, 3.0}, 0.45},
+                                                {{3.0, 5.0}, 0.55},
+                                                {{5.0, 7.0}, 0.65},
+                                                {{7.0, 9.0}, 0.75},
+                                                {{9.0, 11.0}, 0.85},
+                                        };
+constexpr double ERR_MAX = 13.0;
+constexpr int PRINT_CNT_NUM = 20;
+static int printCnt = 0;
+static double pFactorFind(double err)
+{
+    double factor = 1.0;
+
+    for(vector<ProportionalFactorTable>::const_iterator it = pFactorTable.begin(); it != pFactorTable.end(); ++it)
+    {
+        if (err > it->err.min &&
+            err <= it->err.max) {
+            factor = it->factor;
+            break;
+        }
+    }
+
+    return factor;
+}
 
 /********************************
  *  clamp
@@ -44,80 +85,100 @@ static double clamp(double x, double min, double max)
  */
 double pid(pid_info_t* pidinfoptr, double input, double setpoint)
 {
-    double error;
-
-    double proportionalTerm;
-    double integralTerm = 0.0f;
-    double feedFwdTerm = 0.0f;
-
-    double output;
-
-    // calculate P, I, D, FF
-
-    // Pid
+    double error = 0.0;
+    double proportionalTerm = 0.0;
+    double integralTerm = 0.0;
+    double output = 0.0;
+    double pFactor = 1.0;
+    bool isPidRequired = false;
+    static bool isTestDone = false;    
     error = setpoint - input;
-    proportionalTerm = pidinfoptr->proportionalCoeff * error;
 
-    // pId
-    if (0.0f != pidinfoptr->integralCoeff)
-    {
-        integralTerm = pidinfoptr->integral;
-        integralTerm += error * pidinfoptr->integralCoeff * pidinfoptr->ts;
-        integralTerm = clamp(integralTerm, pidinfoptr->integralLimit.min,
-                             pidinfoptr->integralLimit.max);
+    /*check pfactor table*/
+    if (loggingEnabled) {
+        if (!isTestDone) {
+            isTestDone = true;
+            std::cout << "pFactorTable check:\n";
+            for (double err = 0.0; err <= ERR_MAX; err += 0.5) {
+                pFactor = pFactorFind(std::fabs(err));
+                std::cout << "err: " << err << " => pFactor: " << pFactor << "\n";
+            }
+        }    
+    }    
+    if (0.0 != pidinfoptr->proportionalCoeff &&
+        0.0 != pidinfoptr->integralCoeff ) {
+        isPidRequired = true;
+    } else {
+        isPidRequired = false;
     }
-
-    // FF
-    feedFwdTerm =
-        (setpoint + pidinfoptr->feedFwdOffset) * pidinfoptr->feedFwdGain;
-
-    output = proportionalTerm + integralTerm + feedFwdTerm;
-    output = clamp(output, pidinfoptr->outLim.min, pidinfoptr->outLim.max);
-
-    // slew rate
-    // TODO(aarena) - Simplify logic as Andy suggested by creating dynamic
-    // outLim_min/max that are affected by slew rate control and just clamping
-    // to those instead of effectively clamping twice.
-    if (pidinfoptr->initialized)
-    {
-        if (pidinfoptr->slewNeg != 0.0f)
-        {
-            // Don't decrease too fast
-            double minOut =
-                pidinfoptr->lastOutput + pidinfoptr->slewNeg * pidinfoptr->ts;
-            if (output < minOut)
-            {
-                output = minOut;
+    
+    if (loggingEnabled) {
+        if (0 == printCnt) {
+            if (isPidRequired) {
+                std::cout << "thermal-control:\n";
+            } else {
+                std::cout << "fan-control:\n";
             }
+            std::cout << "setpoint: " << setpoint << " input: " << input << "\n";
         }
-        if (pidinfoptr->slewPos != 0.0f)
-        {
-            // Don't increase too fast
-            double maxOut =
-                pidinfoptr->lastOutput + pidinfoptr->slewPos * pidinfoptr->ts;
-            if (output > maxOut)
+    }
+    if (isPidRequired) {
+        if(error <= ERR_MAX) {
+            pFactor = pFactorFind(std::fabs(error));
+            proportionalTerm = pFactor * pidinfoptr->proportionalCoeff * error;
+
+            if (0.0 != pidinfoptr->integralCoeff)
             {
-                output = maxOut;
+                integralTerm = pidinfoptr->integral;
+                integralTerm += error * pidinfoptr->integralCoeff * pidinfoptr->ts;
+
+                /*clamp to avoid integral winding*/
+                if (proportionalTerm + integralTerm < pidinfoptr->integralLimit.min) {
+                    integralTerm = pidinfoptr->integralLimit.min - proportionalTerm;
+                } else if (proportionalTerm + integralTerm > pidinfoptr->integralLimit.max) {
+                    integralTerm = pidinfoptr->integralLimit.max - proportionalTerm;
+                }
+            }
+            output = proportionalTerm + integralTerm;
+
+            if (loggingEnabled) {
+                if (0 == printCnt) {
+                    std::cout << "pidinfoptr->proportionalCoeff: " << pidinfoptr->proportionalCoeff << "\n"
+                    << "pidinfoptr->integral: " << pidinfoptr->integral << "\n"
+                    << "pidinfoptr->integralCoeff: " << pidinfoptr->integralCoeff << "\n"
+                    << "pidinfoptr->ts: " << pidinfoptr->ts << "\n"
+                    << "pidinfoptr->feedFwdOffset: " << pidinfoptr->feedFwdOffset << "\n"
+                    << "pidinfoptr->feedFwdGain: " << pidinfoptr->feedFwdGain << "\n\n";
+                    std::cout << "factor = " << pFactor  << "\n";
+                    std::cout << "proportionalTerm: " << proportionalTerm << "\n"
+                          << "integralTerm: " << integralTerm << "\n";
+                }
             }
+            output = clamp(output, pidinfoptr->outLim.min, pidinfoptr->outLim.max);
+            pidinfoptr->integral = integralTerm;
+        } else {
+            output = pidinfoptr->outLim.min;
         }
 
-        if (pidinfoptr->slewNeg != 0.0f || pidinfoptr->slewPos != 0.0f)
-        {
-            // Back calculate integral term for the cases where we limited the
-            // output
-            integralTerm = output - proportionalTerm;
+    } else {
+        if (setpoint < pidinfoptr->outLim.min) { /*limit to fan min workable duty cyle*/
+            output = pidinfoptr->outLim.min;
+        } else {
+            output = setpoint;
         }
     }
-
-    // Clamp again because having limited the output may result in a
-    // larger integral term
-    integralTerm = clamp(integralTerm, pidinfoptr->integralLimit.min,
-                         pidinfoptr->integralLimit.max);
-    pidinfoptr->integral = integralTerm;
-    pidinfoptr->initialized = true;
     pidinfoptr->lastOutput = output;
 
+    if (loggingEnabled) {
+        if (0 == printCnt) {
+            std::cout << "output = " << output << "\n\n";
+        }    
+        if (printCnt++ >= PRINT_CNT_NUM) {
+            printCnt = 0;
+        }
+    }
     return output;
+
 }
 
 } // namespace ec
-- 
2.33.0

