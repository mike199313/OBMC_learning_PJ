From 01130c035578abb477ce7472462e5298d07b5c69 Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Mon, 17 Jul 2023 14:42:25 +0800
Subject: [PATCH] Bug 629 - [SW][Transformers][OpenBMC] Support mc selftest on
 transformers

Sympton/Reason: Implement selftest on transformers.

Root Cause:
	N/A

Solution/Change:
	[inv-ipmi-oem]
	   - Implement the selftest of SDR,SEL,FRU,IPMB,Uboot,Kernel.
	[u-boot-aspeed-sdk]
	   - Add md5 checksum at the end of binary file.
	   - Save the result of checking the hash code of operational firmware

Entry Test:
	# systemctl stop xyz.openbmc_project.Logging.IPMI.service
	# ipmitool mc selftest
	Selftest: device corrupted
	 -> SEL device not accessible

	# systemctl stop xyz.openbmc_project.ObjectMapper.service
	# ipmitool mc selftest
	Selftest: device corrupted
	 -> SDR repository not accessible

	# systemctl stop xyz.openbmc_project.FruDevice.service
	# ipmitool mc selftest
	Selftest: device corrupted
	FRU device not accessible

	# systemctl stop ipmb.service
	# ipmitool mc selftest
	Selftest: device corrupted
	IPMB signal lines do not respond

	# echo "wwwwwwwwwwwwwwwwwww" > /sys/bus/i2c/devices/3-0050/eeprom
	# ipmitool mc selftest
	Selftest: device corrupted
	Internal Use Area corrupted

	# echo "wwwwwwwwwwwwwwwwwww" > /sys/bus/i2c/devices/3-0050/eeprom
	# echo "wwwwwwwwwwwwwwwwwww" > /sys/bus/i2c/devices/8-0051/eeprom
	# echo "wwwwwwwwwwwwwwwwwww" > /sys/bus/i2c/devices/8-0053/eeprom
	Selftest: device corrupted
	 -> SDR repository not accessible
	SDR repository empty
	Internal Use Area corrupted
---
 common/bootm.c | 35 +++++++++++++++++++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/common/bootm.c b/common/bootm.c
index d88af91113..3af5be9eab 100644
--- a/common/bootm.c
+++ b/common/bootm.c
@@ -600,6 +600,21 @@ static void fixup_silent_linux(void)
 }
 #endif /* CONFIG_SILENT_CONSOLE */
 
+static int SetCheckResult(const char *env_name, char *result) {
+	int change = 0;
+	char *image_status = env_get(env_name);
+	if(image_status == NULL) {
+		env_set(env_name, result);
+		change = 1;
+	} else {
+		if(strcmp(result, image_status) != 0) {
+			env_set(env_name, result);
+			change = 1;
+		}
+	}
+	return change;
+}
+
 int bootm_measure(struct bootm_headers *images)
 {
 	int ret = 0;
@@ -694,9 +709,13 @@ int do_bootm_states(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 	boot_os_fn *boot_fn;
 	ulong iflag = 0;
 	int ret = 0, need_boot_fn;
+	int change = 0;
 
 	images->state |= states;
 
+	change += SetCheckResult("kernel_verify", "OK");
+	change += SetCheckResult("ramdisk_verify", "OK");
+
 	/*
 	 * Work through the states and see how far we get. We stop on
 	 * any error.
@@ -704,11 +723,23 @@ int do_bootm_states(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 	if (states & BOOTM_STATE_START)
 		ret = bootm_start(cmdtp, flag, argc, argv);
 
-	if (!ret && (states & BOOTM_STATE_FINDOS))
+	if (!ret && (states & BOOTM_STATE_FINDOS)){
 		ret = bootm_find_os(cmdtp, flag, argc, argv);
+		if(ret) {
+			change += SetCheckResult("kernel_verify", "Error");
+		}
+	}
 
-	if (!ret && (states & BOOTM_STATE_FINDOTHER))
+	if (!ret && (states & BOOTM_STATE_FINDOTHER)){
 		ret = bootm_find_other(cmdtp, flag, argc, argv);
+		if(ret) {
+			change += SetCheckResult("ramdisk_verify", "Error");
+		}
+	}
+
+	if(change) {
+		env_save();
+	}
 
 	if (IS_ENABLED(CONFIG_MEASURED_BOOT) && !ret &&
 	    (states & BOOTM_STATE_MEASURE))
-- 
2.25.1

