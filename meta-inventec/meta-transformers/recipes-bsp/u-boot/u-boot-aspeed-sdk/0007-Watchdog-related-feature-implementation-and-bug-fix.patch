From 2c7f6f274363e6589215bca93b57ed3840f02978 Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Mon, 17 Jul 2023 15:09:04 +0800
Subject: [PATCH] Watchdog related feature implementation and bug fix
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Summary:
Bug 1294 - [Transformers][OpenBMC][IPMI]Can't type any command when execute sol activate after bmc fw update.
Bug 987 - [Transformers][OpenBMC][IPMI] Can't type any command after SOL activate.
Bug 764 - [SW][Transformers][watchdog] - Implement recovery watchdog.

Detail:
===============================================================================================================
Bug 987 - [Transformers][OpenBMC][IPMI] Can't type any command after SOL activate.
Bug 764 - [SW][Transformers][watchdog] - Implement recovery watchdog.

Symptom/Reason:
    SOL disconnected while BMC system reboot or after firmware upgrade.

Root Cause:
    Can't type any command when execute sol activate after bmc fw update.

Solution/Change:
    Set the reset eSPI controller bit to zero in the uboot.

Enrty Test:
    Test command:
        ipmitool -C 17 -I lanplus -H 10.6.141.106 -U root -P 0penBmc  sol activate
    Test situation:
        AC on -> run ipmi sol activate command. -> type enter to test SOL is activated.
        Only reboot bmc when host is on with sol activated -> run ipmi sol activate.
        Upgrade bmc fw  when host is on with sol activated -> run ipmi sol activate.

===============================================================================================================
Bug 764 - [SW][Transformers][watchdog] - Implement recovery watchdog.
Symptom/Reason:
    Implement recovery watchdog, if recovery watchdog timeout, reboot from another flash.

Root Cause:
    N/A

Solution/Change:
    [u-boot-aspeed-sdk]
        Add inv_watchdog_reset and feed watchdog.
    [transformers-init]
        Stop FMC_WDT2 watchdog after service ready.
    [transformers-post-init]
       Move post relate setting to post init service.

Entry Test:
    Set OTP stap recovery enable.
    Erace flash1, and boot:

    BP0
    <--after FMC_WDT2 timeout-->
    BP1

    U-Boot 2019.04 (Jan 26 2022 - 08:19:09 +0000)

    SOC: AST2600-A1
    PCI RST: #1 #2
    RST: SYS_FLASH_ABR_RESET
    FMC 2nd Boot (ABR): Enable, Dual flashes, Source: Alternate

    And boot into backup flash.

===============================================================================================================
---
 arch/arm/mach-aspeed/ast2600/board_common.c | 33 +++++++++++++++++++++
 common/bootm.c                              | 17 ++++++++++-
 common/console.c                            |  9 ++++++
 drivers/mtd/spi/spi-nor-core.c              | 22 +++++++++++++-
 include/watchdog.h                          |  2 ++
 net/net.c                                   |  7 +++++
 6 files changed, 88 insertions(+), 2 deletions(-)

diff --git a/arch/arm/mach-aspeed/ast2600/board_common.c b/arch/arm/mach-aspeed/ast2600/board_common.c
index 24336ab52b..081abb0013 100644
--- a/arch/arm/mach-aspeed/ast2600/board_common.c
+++ b/arch/arm/mach-aspeed/ast2600/board_common.c
@@ -96,6 +96,14 @@ void reset_eth_phy(void)
 #define SGPIO_BYTES(N)                  ((N) << 6)
 #define SGPIO_ENABLE                    1
 
+/* WDT */
+#define FMC_WDT2_TIMER_RELOAD_VALUE     ASPEED_FMC_WDT2 + 0x4
+#define FMC_WDT2_RESTART                ASPEED_FMC_WDT2 + 0x8
+#define FMC_WDT2_RESTART_MAGIC          0x4755
+#define WDT20_RESET_MASK_2              0x1E785020
+
+void inv_watchdog_reset(void);
+
 __weak int board_init(void)
 {
 	struct udevice *dev;
@@ -122,6 +130,7 @@ __weak int board_init(void)
 #ifdef ASPEED_RMII_DAUGHTER_CARD
 	reset_eth_phy();
 #endif
+	watchdog_init();
     gpio_init();
     sgpio_init_port80();
 	/*
@@ -275,6 +284,20 @@ void aspeed_mmc_init(void)
 
 }
 
+int watchdog_init(void)
+{
+    u32 reg;
+	
+    /* Set FMC_WDT2 timeout to 60 sec */
+    writel(600, FMC_WDT2_TIMER_RELOAD_VALUE);
+
+    /* Disable reset eSPI controller (Bit 26) */
+    reg = readl(WDT20_RESET_MASK_2);
+    writel(reg & 0xFBFFFFFF, WDT20_RESET_MASK_2);
+
+    inv_watchdog_reset();
+}
+
 int gpio_init(void)
 {
     u32 reg;
@@ -379,3 +402,13 @@ int sgpio_init_port80(void) {
     return 0;
 }
 
+int inv_stop_feed_watchdog=false;
+void inv_watchdog_reset(void)
+{
+    /* Feed FMC_WDT2*/
+    if(!inv_stop_feed_watchdog)
+    {
+        writel(FMC_WDT2_RESTART_MAGIC, FMC_WDT2_RESTART);
+    }
+}
+
diff --git a/common/bootm.c b/common/bootm.c
index 3af5be9eab..267b3e210b 100644
--- a/common/bootm.c
+++ b/common/bootm.c
@@ -29,6 +29,7 @@
 #include <command.h>
 #include <bootm.h>
 #include <image.h>
+#include <watchdog.h>
 
 #ifndef CONFIG_SYS_BOOTM_LEN
 /* use 8MByte as default max gunzip size */
@@ -716,6 +717,9 @@ int do_bootm_states(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 	change += SetCheckResult("kernel_verify", "OK");
 	change += SetCheckResult("ramdisk_verify", "OK");
 
+	/* Inventec - watchdog */
+	inv_watchdog_reset();
+
 	/*
 	 * Work through the states and see how far we get. We stop on
 	 * any error.
@@ -777,8 +781,12 @@ int do_bootm_states(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 #endif
 
 	/* From now on, we need the OS boot function */
-	if (ret)
+	if (ret){
+		/* Inventec - watchdog */
+		printf("Os start abnormal, stop feed watchdog\n");
+		inv_stop_feed_watchdog = true;
 		return ret;
+	}
 	boot_fn = bootm_os_get_boot_func(images->os.os);
 	need_boot_fn = states & (BOOTM_STATE_OS_CMDLINE |
 			BOOTM_STATE_OS_BD_T | BOOTM_STATE_OS_PREP |
@@ -824,6 +832,9 @@ int do_bootm_states(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[],
 		return ret;
 	}
 
+	/* Inventec - watchdog */
+	inv_watchdog_reset();
+
 	/* Now run the OS! We hope this doesn't return */
 	if (!ret && (states & BOOTM_STATE_OS_GO))
 		ret = boot_selected_os(argc, argv, BOOTM_STATE_OS_GO,
@@ -839,6 +850,10 @@ err:
 	else if (ret == BOOTM_ERR_RESET)
 		do_reset(cmdtp, flag, argc, argv);
 
+	/* Inventec - watchdog */
+	printf("boot OS fail, stop feed watchdog\n");
+	inv_stop_feed_watchdog = true;
+
 	return ret;
 }
 
diff --git a/common/console.c b/common/console.c
index 0b0dd76256..5688f249f3 100644
--- a/common/console.c
+++ b/common/console.c
@@ -310,12 +310,21 @@ int serial_printf(const char *fmt, ...)
 
 int fgetc(int file)
 {
+	int watchdog_count = 0;
 	if (file < MAX_FILES) {
 		/*
 		 * Effectively poll for input wherever it may be available.
 		 */
 		for (;;) {
 			WATCHDOG_RESET();
+
+			/* Inventec - watchdog */
+			if(!(watchdog_count &0xFFFFF))
+			{
+				inv_watchdog_reset();
+			}
+			watchdog_count++;
+
 #if CONFIG_IS_ENABLED(CONSOLE_MUX)
 			/*
 			 * Upper layer may have already called tstc() so
diff --git a/drivers/mtd/spi/spi-nor-core.c b/drivers/mtd/spi/spi-nor-core.c
index 633ca00834..e917fe2f31 100644
--- a/drivers/mtd/spi/spi-nor-core.c
+++ b/drivers/mtd/spi/spi-nor-core.c
@@ -637,6 +637,7 @@ static int spi_nor_erase(struct mtd_info *mtd, struct erase_info *instr)
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
 	u32 addr, len, rem;
 	int ret;
+	int watchdog_count = 0;
 
 	dev_dbg(nor->dev, "at 0x%llx, len %lld\n", (long long)instr->addr,
 		(long long)instr->len);
@@ -649,6 +650,12 @@ static int spi_nor_erase(struct mtd_info *mtd, struct erase_info *instr)
 	len = instr->len;
 
 	while (len) {
+		/* Inventec - watchdog */
+		if(!(watchdog_count &0xFF))
+		{
+			inv_watchdog_reset();
+		}
+		watchdog_count++;
 #ifdef CONFIG_SPI_FLASH_BAR
 		ret = write_bar(nor, addr);
 		if (ret < 0)
@@ -1174,13 +1181,19 @@ static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 {
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
 	int ret;
+	int watchdog_count = 0;
 
 	dev_dbg(nor->dev, "from 0x%08x, len %zd\n", (u32)from, len);
 
 	while (len) {
 		loff_t addr = from;
 		size_t read_len = len;
-
+		/* Inventec - watchdog */
+		if(!(watchdog_count &0xFF))
+		{
+			inv_watchdog_reset();
+		}
+		watchdog_count++;
 #ifdef CONFIG_SPI_FLASH_BAR
 		u32 remain_len;
 
@@ -1326,6 +1339,7 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
 	size_t page_offset, page_remain, i;
 	ssize_t ret;
+	int watchdog_count = 0;
 
 	dev_dbg(nor->dev, "to 0x%08x, len %zd\n", (u32)to, len);
 
@@ -1333,6 +1347,12 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 		ssize_t written;
 		loff_t addr = to + i;
 
+		/* Inventec - watchdog */
+		if(!(watchdog_count &0xFF))
+		{
+			inv_watchdog_reset();
+		}
+		watchdog_count++;
 		/*
 		 * If page_size is a power of two, the offset can be quickly
 		 * calculated with an AND operation. On the other cases we
diff --git a/include/watchdog.h b/include/watchdog.h
index 14073cfdd2..2baa26bf40 100644
--- a/include/watchdog.h
+++ b/include/watchdog.h
@@ -35,6 +35,8 @@ int init_func_watchdog_reset(void);
 /*
  * Hardware watchdog
  */
+extern int inv_stop_feed_watchdog;
+extern void inv_watchdog_reset(void);
 #ifdef CONFIG_HW_WATCHDOG
 	#if defined(__ASSEMBLY__)
 		#define WATCHDOG_RESET bl hw_watchdog_reset
diff --git a/net/net.c b/net/net.c
index 8449445bf6..2e3142cbcc 100644
--- a/net/net.c
+++ b/net/net.c
@@ -572,8 +572,15 @@ restart:
 	 *	Main packet reception loop.  Loop receiving packets until
 	 *	someone sets `net_state' to a state that terminates.
 	 */
+	int watchdog_count=0;
 	for (;;) {
 		WATCHDOG_RESET();
+		/* Inventec - watchdog */
+		if(!(watchdog_count &0xFFFF))
+		{
+			inv_watchdog_reset();
+		}
+		watchdog_count++;
 #ifdef CONFIG_SHOW_ACTIVITY
 		show_activity(1);
 #endif
-- 
2.25.1

