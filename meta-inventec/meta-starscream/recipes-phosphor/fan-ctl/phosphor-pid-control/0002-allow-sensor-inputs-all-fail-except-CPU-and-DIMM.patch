From 1222fae72cdbc9bf652da951cef538779c354c2f Mon Sep 17 00:00:00 2001
From: link <link@inventec.com>
Date: Wed, 3 Aug 2022 16:35:53 +0800
Subject: [PATCH 2/3] allow sensor inputs all fail except CPU and DIMM - allow
 sensor inputs all fail except CPU and DIMM (8/29)

---
 pid/builder.cpp | 53 ++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 44 insertions(+), 9 deletions(-)

diff --git a/pid/builder.cpp b/pid/builder.cpp
index 0800bf5..3127e79 100644
--- a/pid/builder.cpp
+++ b/pid/builder.cpp
@@ -158,12 +158,29 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
                     inputs.push_back(i);
                     zone->addThermalInput(i);
                 }
-
-                auto pid = ThermalController::createThermalPid(
-                    zone.get(), name, inputs, info.setpoint, info.pidInfo,
-                    getThermalType(info.type));
-
-                zone->addThermalPID(std::move(pid));
+                /*
+                 * We allow sensors in an input all unvalid, but except CPU and DIMM.
+                 * CPU and DIMM are the key factors that affect the pid control due to their temperature.
+                 * For example, the zone has three group, CPU, DIMM, and nvme.
+                 * Besides, CPU and DIMM are not valid at first.
+                 * If we do not let CPU and DIMM been addThermalPID, the zone may been startup with only nvme.
+                 * Then CPU and DIMM is valid, but pid will not restart due to nothing fail.
+                 * Temperature of CPU and DIMM may go high, but zone only consider nvme.
+                 * The fan rpm may not been enough.
+                 * As a result, CPU and DIMM need to addThermalPID to make the zone restart.
+                 */
+                if(std::string(name).find("CPU") != std::string::npos ||
+                        std::string(name).find("DIMM") != std::string::npos){
+                    auto pid = ThermalController::createThermalPid(
+                        zone.get(), name, inputs, info.setpoint, info.pidInfo,
+                        getThermalType(info.type));
+                    zone->addThermalPID(std::move(pid));
+                }else if(inputs.size() != 0){
+                    auto pid = ThermalController::createThermalPid(
+                        zone.get(), name, inputs, info.setpoint, info.pidInfo,
+                        getThermalType(info.type));
+                    zone->addThermalPID(std::move(pid));
+                }
             }
             else if (info.type == "stepwise")
             {
@@ -176,9 +193,27 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
                     inputs.push_back(i);
                     zone->addThermalInput(i);
                 }
-                auto stepwise = StepwiseController::createStepwiseController(
-                    zone.get(), name, inputs, info.stepwiseInfo);
-                zone->addThermalPID(std::move(stepwise));
+                /*
+                 * We allow sensors in an input all unvalid, but except CPU and DIMM.
+                 * CPU and DIMM are the key factors that affect the pid control due to their temperature.
+                 * For example, the zone has three group, CPU, DIMM, and nvme.
+                 * Besides, CPU and DIMM are not valid at first.
+                 * If we do not let CPU and DIMM been addThermalPID, the zone may been startup with only nvme.
+                 * Then CPU and DIMM is valid, but pid will not restart due to nothing fail.
+                 * Temperature of CPU and DIMM may go high, but zone only consider nvme.
+                 * The fan rpm may not been enough.
+                 * As a result, CPU and DIMM need to addThermalPID to make the zone restart.
+                 */
+                if(std::string(name).find("CPU") != std::string::npos ||
+                        std::string(name).find("DIMM") != std::string::npos){
+                    auto stepwise = StepwiseController::createStepwiseController(
+                        zone.get(), name, inputs, info.stepwiseInfo);
+                    zone->addThermalPID(std::move(stepwise));
+                }else if(inputs.size() != 0){
+                    auto stepwise = StepwiseController::createStepwiseController(
+                        zone.get(), name, inputs, info.stepwiseInfo);
+                    zone->addThermalPID(std::move(stepwise));
+                }
             }
 
             std::cerr << "inputs: ";
-- 
2.33.0

