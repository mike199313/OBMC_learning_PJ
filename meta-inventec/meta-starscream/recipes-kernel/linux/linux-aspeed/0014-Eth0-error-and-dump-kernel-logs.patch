From 6d111adc18ae0df1c60f68bc486b3c75892b679f Mon Sep 17 00:00:00 2001
From: Matt Cheng <cheng.matt@inventec.com>
Date: Fri, 24 Mar 2023 08:03:21 +0800
Subject: [PATCH] Bug 1482 - [Starscream-ast][OpenBMC][System]Kernal logs
 "NETDEV WATCHDOG: eth0 (ftgmac100): transmit queue 0 timed out" after
 ipmitool mc reset cold.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Root Cause:
	The new HW arbitration feature on Aspeed ast2600 will cause MAC TX to hang when handling scatter-gather DMA.

Solution/Change:
	[linux-nuvoton]
		1. Use the newest Aspeed ftgmac100 dirver.

Entry Test:
	Step 1 ： Execute "reboot" command on OBMC.
	Step 2 ： After bmc boot completely than execute "ipmitool mc reset cold" command on OBMC.
	Step 3 ： Check kernal log will see "warning kernel...eth0: Wrong NCSI..."
	Step 4 ：Wait more 30 mins if print "warning kernel: ftgmac100 1e670000.ftgmac eth0: Wrong NCSI state 0x100 in workqueue"
	Step 5：After 30 mins, check kernal log or dmesg, will see "NETDEV WATCHDOG: eth0 (ftgmac100): transmit queue 0 timed out" etc....
---
 drivers/net/ethernet/faraday/ftgmac100.c | 24 ++++++++++++++++++++++--
 1 file changed, 22 insertions(+), 2 deletions(-)
 mode change 100644 => 100755 drivers/net/ethernet/faraday/ftgmac100.c

diff --git a/drivers/net/ethernet/faraday/ftgmac100.c b/drivers/net/ethernet/faraday/ftgmac100.c
old mode 100644
new mode 100755
index c96d4bf4d5e3..4df73346c959
--- a/drivers/net/ethernet/faraday/ftgmac100.c
+++ b/drivers/net/ethernet/faraday/ftgmac100.c
@@ -34,8 +34,8 @@
 /* Arbitrary values, I am not sure the HW has limits */
 #define MAX_RX_QUEUE_ENTRIES	1024
 #define MAX_TX_QUEUE_ENTRIES	1024
-#define MIN_RX_QUEUE_ENTRIES	32
-#define MIN_TX_QUEUE_ENTRIES	32
+#define MIN_RX_QUEUE_ENTRIES	64
+#define MIN_TX_QUEUE_ENTRIES	64
 
 /* Defaults */
 #define DEF_RX_QUEUE_ENTRIES	128
@@ -831,6 +831,21 @@ static netdev_tx_t ftgmac100_hard_start_xmit(struct sk_buff *skb,
 			netif_wake_queue(netdev);
 	}
 
+	/* When sending UDP packets, we may never receive a packet to activate
+	 * the NAPI BH. And hence we don't have chance to free the TX data.
+	 * The workaround is to enable FTGMAC100_INT_XPKT_ETH, then the NAPI BH
+	 * can be woke up in the ISR.
+	 */
+	if (skb->protocol == (cpu_to_be16(ETH_P_IP)) &&
+	    (ip_hdr(skb)->protocol == IPPROTO_UDP)) {
+		u32 ier = ioread32(priv->base + FTGMAC100_OFFSET_IER);
+
+		/* IER == FTGMAC100_INT_ALL implies NAPI is not running */
+		if (ier == FTGMAC100_INT_ALL)
+			iowrite32(ier | FTGMAC100_INT_XPKT_ETH,
+				  priv->base + FTGMAC100_OFFSET_IER);
+	}
+
 	/* Poke transmitter to read the updated TX descriptors */
 	iowrite32(1, priv->base + FTGMAC100_OFFSET_NPTXPD);
 
@@ -1920,6 +1935,11 @@ static int ftgmac100_probe(struct platform_device *pdev)
 	/* AST2400  doesn't have working HW checksum generation */
 	if (np && (of_device_is_compatible(np, "aspeed,ast2400-mac")))
 		netdev->hw_features &= ~NETIF_F_HW_CSUM;
+
+	/* AST2600 tx checksum with NCSI is broken */
+	if (priv->use_ncsi && of_device_is_compatible(np, "aspeed,ast2600-mac"))
+		netdev->hw_features &= ~NETIF_F_HW_CSUM;
+
 	if (np && of_get_property(np, "no-hw-checksum", NULL))
 		netdev->hw_features &= ~(NETIF_F_HW_CSUM | NETIF_F_RXCSUM);
 	netdev->features |= netdev->hw_features;
-- 
2.25.1

