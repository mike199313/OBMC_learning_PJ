From 542e7a719f69837137eb336b4194f29ac06f75c3 Mon Sep 17 00:00:00 2001
From: Stanley Chu <yschu@nuvoton.com>
Date: Mon, 15 Aug 2022 16:13:12 +0800
Subject: [PATCH] add dimm sensor

Signed-off-by: Stanley Chu <yschu@nuvoton.com>
---
 include/DIMMSensor.hpp |  51 ++++
 include/amd-apml.h     |  74 ++++++
 include/i3cdev.h       |  39 +++
 meson_options.txt      |   1 +
 src/DIMMSensor.cpp     | 576 +++++++++++++++++++++++++++++++++++++++++
 src/meson.build        |  15 ++
 6 files changed, 756 insertions(+)
 create mode 100644 include/DIMMSensor.hpp
 create mode 100644 include/amd-apml.h
 create mode 100644 include/i3cdev.h
 create mode 100644 src/DIMMSensor.cpp

diff --git a/include/DIMMSensor.hpp b/include/DIMMSensor.hpp
new file mode 100644
index 00000000..91f2ce6a
--- /dev/null
+++ b/include/DIMMSensor.hpp
@@ -0,0 +1,51 @@
+#pragma once
+#include <boost/asio/deadline_timer.hpp>
+#include <boost/container/flat_map.hpp>
+#include <sensor.hpp>
+
+#include <chrono>
+#include <limits>
+#include <memory>
+#include <string>
+#include <vector>
+
+struct DIMMSensor : public Sensor
+{
+    DIMMSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                  boost::asio::io_service& io, const std::string& name,
+                  const std::string& sensorType,
+                  const std::string& interface,
+                  const std::string& sensorConfiguration,
+                  sdbusplus::asio::object_server& objectServer,
+                  std::vector<thresholds::Threshold>&& thresholds,
+                  uint8_t busId, uint8_t addr, const std::string& pid,
+                  uint8_t tempReg, double max, double min, uint8_t adcSel);
+    ~DIMMSensor() override;
+
+    void checkThresholds(void) override;
+    void read(void);
+    void init(void);
+    void work_thread(void);
+
+    uint8_t busId;
+    uint8_t addr;
+    std::string pid;
+    uint8_t tempReg;
+    std::string sensorName;
+    std::string sensorType;
+    std::string interface;
+    uint8_t adcSel;
+    double adcScal;
+    double sensorVal;
+
+  private:
+    int get_sensor_val(double *val);
+    int get_temp_i3c(double *temp);
+    int get_volt_i3c(double *volt);
+    int get_reg_i3c(uint8_t reg, uint8_t *data, uint8_t len);
+    int get_temp_sbrmi(double *temp);
+    int get_power_sbrmi(double *power);
+    int enableADC(void);
+    sdbusplus::asio::object_server& objectServer;
+    boost::asio::deadline_timer waitTimer;
+};
diff --git a/include/amd-apml.h b/include/amd-apml.h
new file mode 100644
index 00000000..04161092
--- /dev/null
+++ b/include/amd-apml.h
@@ -0,0 +1,74 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+/*
+ * Copyright (C) 2021-2022 Advanced Micro Devices, Inc.
+ */
+#ifndef _AMD_APML_H_
+#define _AMD_APML_H_
+
+#include <linux/types.h>
+
+enum apml_protocol {
+	APML_CPUID	= 0x1000,
+	APML_MCA_MSR,
+	APML_REG,
+};
+
+/* These are byte indexes into data_in and data_out arrays */
+#define RD_WR_DATA_INDEX	0
+#define REG_OFF_INDEX		0
+#define REG_VAL_INDEX		4
+#define THREAD_LOW_INDEX	4
+#define THREAD_HI_INDEX		5
+#define EXT_FUNC_INDEX		6
+#define RD_FLAG_INDEX		7
+
+#define MB_DATA_SIZE		4
+
+struct apml_message {
+	/* message ids:
+	 * Mailbox Messages:	0x0 ... 0x999
+	 * APML_CPUID:		0x1000
+	 * APML_MCA_MSR:	0x1001
+	 * APML_REG:		0x1002 (RMI & TSI reg access)
+	 */
+	__u32 cmd;
+
+	/*
+	 * 8 bit data for reg read,
+	 * 32 bit data in case of mailbox,
+	 * upto 64 bit in case of cpuid and mca msr
+	 */
+	union {
+		__u64 cpu_msr_out;
+		__u32 mb_out[2];
+		__u8 reg_out[8];
+	} data_out;
+
+	/*
+	 * [0]...[3] mailbox 32bit input
+	 *	     cpuid & mca msr,
+	 *	     rmi rd/wr: reg_offset
+	 * [4][5] cpuid & mca msr: thread
+	 * [4] rmi reg wr: value
+	 * [6] cpuid: ext function & read eax/ebx or ecx/edx
+	 *	[7:0] -> bits [7:4] -> ext function &
+	 *	bit [0] read eax/ebx or ecx/edx
+	 * [7] read/write functionality
+	 */
+	union {
+		__u64 cpu_msr_in;
+		__u32 mb_in[2];
+		__u8 reg_in[8];
+	} data_in;
+	/*
+	 * Status code is returned in case of CPUID/MCA access
+	 * Error code is returned in case of soft mailbox
+	 */
+	__u32 fw_ret_code;
+} __attribute__((packed));
+
+/* ioctl command for mailbox msgs using generic _IOWR */
+#define SBRMI_BASE_IOCTL_NR      0xF9
+#define SBRMI_IOCTL_CMD          _IOWR(SBRMI_BASE_IOCTL_NR, 0, struct apml_message)
+
+#endif /*_AMD_APML_H_*/
diff --git a/include/i3cdev.h b/include/i3cdev.h
new file mode 100644
index 00000000..7b8d429a
--- /dev/null
+++ b/include/i3cdev.h
@@ -0,0 +1,39 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2019 Synopsys, Inc. and/or its affiliates.
+ *
+ * Author: Vitor Soares <vitor.soares@synopsys.com>
+ */
+
+#ifndef _UAPI_I3C_DEV_H_
+#define _UAPI_I3C_DEV_H_
+
+#include <linux/types.h>
+#include <linux/ioctl.h>
+
+#define VERSION "0.1"
+
+/* IOCTL commands */
+#define I3C_DEV_IOC_MAGIC	0x07
+
+/**
+ * struct i3c_ioc_priv_xfer - I3C SDR ioctl private transfer
+ * @data: Holds pointer to userspace buffer with transmit data.
+ * @len: Length of data buffer buffers, in bytes.
+ * @rnw: encodes the transfer direction. true for a read, false for a write
+ */
+struct i3c_ioc_priv_xfer {
+	__u64 data;
+	__u16 len;
+	__u8 rnw;
+	__u8 pad[5];
+};
+
+#define I3C_PRIV_XFER_SIZE(N)	\
+	((((sizeof(struct i3c_ioc_priv_xfer)) * (N)) < (1 << _IOC_SIZEBITS)) \
+	? ((sizeof(struct i3c_ioc_priv_xfer)) * (N)) : 0)
+
+#define I3C_IOC_PRIV_XFER(N)	\
+	_IOC(_IOC_READ|_IOC_WRITE, I3C_DEV_IOC_MAGIC, 30, I3C_PRIV_XFER_SIZE(N))
+
+#endif
diff --git a/meson_options.txt b/meson_options.txt
index f9d25e71..f1448342 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -12,3 +12,4 @@ option('external', type: 'feature', value: 'enabled', description: 'Enable Exter
 option('tests', type: 'feature', value: 'enabled', description: 'Build tests.',)
 option('validate-unsecure-feature', type : 'feature', value : 'disabled', description : 'Enables unsecure features required by validation. Note: mustbe turned off for production images.',)
 option('insecure-sensor-override', type : 'feature', value : 'disabled', description : 'Enables Sensor override feature without any check.',)
+option('dimm', type: 'feature', value: 'enabled', description: 'Enable DIMM sensor.',)
diff --git a/src/DIMMSensor.cpp b/src/DIMMSensor.cpp
new file mode 100644
index 00000000..a340b7cf
--- /dev/null
+++ b/src/DIMMSensor.cpp
@@ -0,0 +1,576 @@
+#include <DIMMSensor.hpp>
+#include <Utils.hpp>
+#include <VariantVisitors.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/container/flat_map.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/bus/match.hpp>
+
+#include <chrono>
+#include <cmath>
+#include <functional>
+#include <iostream>
+#include <limits>
+#include <memory>
+#include <numeric>
+#include <string>
+#include <vector>
+#include <thread>
+
+extern "C"
+{
+#include <i3cdev.h>
+#include <amd-apml.h>
+}
+
+constexpr const bool debug = false;
+bool thread_exist = false;
+
+constexpr const char* configInterface =
+    "xyz.openbmc_project.Configuration.dimm";
+
+boost::container::flat_map<std::string, std::unique_ptr<DIMMSensor>> sensors;
+
+int sbrmi_read_mailbox(uint32_t cmd, uint32_t input, uint32_t *output)
+{
+	struct apml_message msg;
+	int fd = 0, ret = 0;
+
+	memset((char *)&msg, 0, sizeof(msg));
+	fd = open("/dev/sbrmi0", O_RDWR);
+	if (fd < 0)
+		return -1;
+
+	msg.cmd = cmd;
+	msg.data_in.mb_in[0] = input & 0xFF;
+	msg.data_in.mb_in[1] = (uint32_t)(1 << 24); // READ_MODE
+	if (ioctl(fd, SBRMI_IOCTL_CMD, &msg) < 0) {
+	    ret = -1;
+	}
+	*output = msg.data_out.mb_out[0];
+
+	close(fd);
+
+	return ret;
+}
+
+DIMMSensor::DIMMSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                             boost::asio::io_service& io,
+                             const std::string& sensorName,
+                             const std::string& sensorType,
+                             const std::string& interface,
+                             const std::string& sensorConfiguration,
+                             sdbusplus::asio::object_server& objectServer,
+                             std::vector<thresholds::Threshold>&& thresholdData,
+                             uint8_t busId, uint8_t addr, const std::string& pid,
+                             uint8_t tempReg, double max, double min, uint8_t adcSel) :
+    Sensor(escapeName(sensorName), std::move(thresholdData),
+           sensorConfiguration, sensorType,
+           false, false, max, min, conn, PowerState::biosPost),
+    busId(busId), addr(addr), pid(pid), tempReg(tempReg), sensorName(sensorName), sensorType(sensorType),
+    interface(interface), adcSel(adcSel), objectServer(objectServer), waitTimer(io)
+{
+    std::string dbusPath = "/xyz/openbmc_project/sensors/" + sensorType + "/" + name;
+
+    sensorInterface = objectServer.add_interface(
+        dbusPath,
+        "xyz.openbmc_project.Sensor.Value");
+
+    for (const auto& threshold : thresholds)
+    {
+        std::string interface = thresholds::getInterface(threshold.level);
+        thresholdInterfaces[static_cast<size_t>(threshold.level)] =
+            objectServer.add_interface(dbusPath, interface);
+    }
+    association = objectServer.add_interface(
+        dbusPath,
+        association::interface);
+}
+
+DIMMSensor::~DIMMSensor()
+{
+    waitTimer.cancel();
+    thread_exist = true;
+    for (const auto& iface : thresholdInterfaces)
+    {
+        objectServer.remove_interface(iface);
+    }
+    objectServer.remove_interface(sensorInterface);
+    objectServer.remove_interface(association);
+}
+
+void DIMMSensor::init(void)
+{
+    if (sensorType == "temperature")
+    {
+        setInitialProperties(sensor_paths::unitDegreesC);
+    } else if (sensorType == "power") {
+        setInitialProperties(sensor_paths::unitWatts);
+    } else if (sensorType == "voltage") {
+        setInitialProperties(sensor_paths::unitVolts);
+        if (interface == "i3c")
+        {
+	    enableADC();
+        }
+    } else {
+        std::cerr << "delete:" << sensorName << "\n";
+        sensors.erase(sensorName);
+        return;
+    }
+    std::thread thread([this]() {
+    	work_thread();
+    });
+    thread.detach();
+    sensorVal = std::numeric_limits<double>::quiet_NaN();
+    read();
+}
+
+void DIMMSensor::checkThresholds(void)
+{
+    thresholds::checkThresholds(this);
+}
+#if 0
+int DIMMSensor::probe(uint8_t reg)
+{
+    uint8_t val = 0;
+
+    int ret = getDIMMRegsInfo(reg, &val, 1);
+    if ((ret < 0) || (0 == (int)val))
+    {
+        std::cerr << sensorName << " is not present" << "\n";
+        return -1;
+    }
+
+    return 0;
+}
+#endif
+int DIMMSensor::enableADC(void)
+{
+    std::string i3cBus = "/dev/i3c-" + std::to_string(busId) + "-" + pid;
+    i3c_ioc_priv_xfer xfer;
+    uint8_t buf[2];
+    uint8_t val;
+
+    if (adcSel == 5) {
+        adcScal = 0.07;
+    } else if (adcSel == 7) {
+        adcScal = 0.025;
+    } else if (adcSel == 0 || adcSel == 1 || adcSel == 2 || adcSel == 3
+             || adcSel == 6 || adcSel == 8 || adcSel == 9) {
+        adcScal = 0.015;
+    } else {
+        adcSel = 0;
+        adcScal = 0.015;
+    }
+    std::cerr << sensorName << ": adc Select = " << (int)adcSel << "\n";
+    std::cerr << sensorName << ": adc Read scale = " << adcScal << "\n";
+
+    val = 0x80 | (adcSel << 3);
+
+    int fd = open(i3cBus.c_str(), O_RDWR);
+    if (fd < 0)
+    {
+        std::cerr << " unable to open i3c device" << i3cBus << "  err=" << fd
+                  << "\n";
+        return -1;
+    }
+
+    buf[0] = 0x30;
+    buf[1] = val | 0x80;
+    xfer.len = 2;
+    xfer.rnw = 0;
+    xfer.data = (__u64)buf;
+    if (ioctl(fd, I3C_IOC_PRIV_XFER(1), &xfer) < 0) {
+        std::cerr << "Error: transfer failed: " << i3cBus << "\n";
+        close(fd);
+        return -1;
+    }
+
+    close(fd);
+
+    return 0;
+}
+
+int DIMMSensor::get_reg_i3c(uint8_t regs, uint8_t *data, uint8_t len)
+{
+    std::string i3cBus = "/dev/i3c-" + std::to_string(busId) + "-" + pid;
+    i3c_ioc_priv_xfer xfers[2];
+    uint8_t wbuf[2];
+    uint8_t rbuf[32];
+    int ret;
+
+    if (len > 32)
+        return -1;
+
+    int fd = open(i3cBus.c_str(), O_RDWR);
+    if (fd < 0)
+    {
+        if constexpr (debug)
+	{
+            std::cerr << "unable to open i3c bus " << i3cBus << "  err=" << fd
+                  << "\n";
+        }
+        return -1;
+    }
+
+    wbuf[0] = regs;
+    for (int i = 0; i < len; i++)
+    {
+        rbuf[i] = 0;
+    }
+    xfers[0].len = 1;
+    xfers[0].rnw = 0;
+    xfers[0].data = (__u64)wbuf;
+    xfers[1].len = len;
+    xfers[1].rnw = 1;
+    xfers[1].data = (__u64)rbuf;
+    ret = ioctl(fd, I3C_IOC_PRIV_XFER(2), xfers);
+    if (ret != 0) {
+        if constexpr (debug)
+        {
+            std::cerr << i3cBus << ": transfer failed: " << ret << "\n";
+        }
+        close(fd);
+        return -1;
+    }
+
+    int i;
+    for (i = 0; i < len; i++)
+    {
+        if constexpr (debug)
+        {
+            std::cerr << "Raw reading: "  << static_cast<int>(rbuf[i]) << "\n";
+        }
+        *data = rbuf[i];
+        data++;
+    }
+
+    close(fd);
+
+    return 0;
+}
+
+int DIMMSensor::get_temp_sbrmi(double *temp)
+{
+    uint32_t output;
+    uint16_t raw;
+    int ret;
+
+    ret = sbrmi_read_mailbox(0x48, addr, &output); // READ_DIMM_THERMAL_SENSOR
+    if (ret < 0) {
+        if constexpr (debug)
+        {
+            std::cerr << sensorName << ": read mailbox failed\n";
+        }
+        return ret;
+    }
+
+    raw = output >> 21;
+    //std::cerr << sensorName << ": temp raw=" << raw << "\n";
+    //std::cerr << sensorName << ": addr=" << static_cast<int>(addr) << "\n";
+    //std::cerr << sensorName << ": mbox output=" << output << "\n";
+    if (raw <= 0x3FF)
+        *temp = raw * 0.25;
+    else
+        *temp = (raw - 0x800) * 0.25;
+
+    return 0;
+}
+
+int DIMMSensor::get_power_sbrmi(double *power)
+{
+    uint32_t output;
+    int ret;
+
+    ret = sbrmi_read_mailbox(0x47, addr, &output); // READ_DIMM_POWER_CONSUMPTION
+    if (ret < 0) {
+        if constexpr (debug)
+        {
+            std::cerr << sensorName << ": read mailbox failed\n";
+        }
+        return ret;
+    }
+    //std::cerr << sensorName << ": addr=" << static_cast<int>(addr) << "\n";
+    //std::cerr << sensorName << ": mbox output=" << output << "\n";
+
+    *power = (double)(output >> 17) / 1000;
+
+    return 0;
+}
+
+int DIMMSensor::get_temp_i3c(double *temp)
+{
+    uint8_t raw[2];
+    int ret;
+
+    ret = get_reg_i3c(0x31, raw, 2);
+    if (ret == 0)
+    {
+        double v = static_cast<double>(raw[0] >> 2) * 0.25;
+        v += static_cast<double>(raw[1] & 0x0F) * 16;
+        if (raw[1] & 0x10) v = v * -1;
+	*temp = v;
+    }
+    return ret;
+}
+
+int DIMMSensor::get_volt_i3c(double *volt)
+{
+    uint8_t raw;
+    int ret;
+
+    ret = get_reg_i3c(0x31, &raw, 1);
+    if (ret == 0)
+    {
+        *volt = static_cast<double>(raw) * adcScal;
+    }
+    return ret;
+}
+
+int DIMMSensor::get_sensor_val(double *val)
+{
+    if (interface == "i3c")
+    {
+        if (sensorType == "temperature")
+            return get_temp_i3c(val);
+        if (sensorType == "voltage")
+            return get_volt_i3c(val);
+    }
+    if (interface == "sbrmi")
+    {
+        if (sensorType == "temperature")
+            return get_temp_sbrmi(val);
+        if (sensorType == "power")
+            return get_power_sbrmi(val);
+    }
+    return -1;
+}
+
+void DIMMSensor::work_thread(void)
+{
+    double v;
+    int pollTime = 1;
+    int failCount = 0;
+    while (!thread_exist) {
+        if (!readingStateGood())
+        {
+            sensorVal = std::numeric_limits<double>::quiet_NaN();
+            std::this_thread::sleep_for(std::chrono::seconds(1));
+            continue;
+        }
+        if (failCount > 10)
+        {
+            std::cerr << sensorName << " is not detected, stop reading\n";
+            return;
+        }
+        int ret = get_sensor_val(&v);
+        if (ret == 0)
+        {
+            sensorVal = v;
+            pollTime = 1;
+            failCount = 0;
+        } else {
+            #if 0
+            if (readingStateGood())
+            {
+                std::cerr << "remove sensor " << sensorName << "\n";
+                sensors.erase(sensorName);
+                return;
+            }
+            #endif
+            failCount++;
+            if (pollTime < 10) {
+                pollTime++;
+            }
+            sensorVal = std::numeric_limits<double>::quiet_NaN();
+        }
+        std::this_thread::sleep_for(std::chrono::seconds(pollTime));
+    }
+}
+
+void DIMMSensor::read(void)
+{
+    static constexpr size_t pollTime = 1; // in seconds
+
+    waitTimer.expires_from_now(boost::posix_time::seconds(pollTime));
+    waitTimer.async_wait([this](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being cancelled
+        }
+        // read timer error
+        if (ec)
+        {
+            std::cerr << "timer error\n";
+            return;
+        }
+        if constexpr (debug)
+        {
+            std::cerr << sensorName << ":update sensor value to " << sensorVal << "\n";
+        }
+        updateValue(sensorVal);
+        read();
+    });
+}
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<DIMMSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    if (!dbusConnection)
+    {
+        std::cerr << "Connection not created\n";
+        return;
+    }
+
+    dbusConnection->async_method_call(
+        [&io, &objectServer, &dbusConnection, &sensors](
+            boost::system::error_code ec, const ManagedObjectType& resp) {
+            if (ec)
+            {
+                std::cerr << "Error contacting entity manager\n";
+                return;
+            }
+            for (const auto& pathPair : resp)
+            {
+                for (const auto& entry : pathPair.second)
+                {
+                    if (entry.first != configInterface)
+                    {
+                        continue;
+                    }
+                    std::string name =
+                        loadVariant<std::string>(entry.second, "Name");
+
+                    std::vector<thresholds::Threshold> sensorThresholds;
+                    if (!parseThresholdsFromConfig(pathPair.second,
+                                                   sensorThresholds))
+                    {
+                        std::cerr << "error populating thresholds for " << name
+                                  << "\n";
+                    }
+
+                    std::string interface =
+                        loadVariant<std::string>(entry.second, "Interface");
+
+                    uint8_t busId = 0;
+                    uint8_t addr = 0;
+		    uint8_t tempReg = 0;
+		    std::string pid = "0";
+                    double max, min;
+		    uint8_t adcSel = 0;
+
+                    if (interface == "i3c")
+		    {
+                        busId = loadVariant<uint8_t>(entry.second, "Bus");
+                        pid = loadVariant<std::string>(entry.second, "Pid");
+                        tempReg = loadVariant<uint8_t>(entry.second, "Reg");
+		    } else if (interface == "sbrmi") {
+                        addr = loadVariant<uint8_t>(entry.second, "Addr");
+		    }
+
+                    std::string sensorType =
+                        loadVariant<std::string>(entry.second, "Class");
+                    if (sensorType == "temperature") {
+                        max = 255;
+                        min = -127;
+                    } else if (sensorType == "voltage") {
+                        max = 15;
+                        min = 0;
+                        auto findType = entry.second.find("Adc");
+                        if (findType != entry.second.end())
+                        {
+                            adcSel = loadVariant<uint8_t>(entry.second, "Adc");
+                        }
+                    } else if (sensorType == "power") {
+                        max = 64;
+                        min = 0;
+                    } else {
+                        std::cerr << "error sensor type: " << sensorType
+                                  << "\n";
+                        continue;
+                    }
+
+                    if constexpr (debug)
+                    {
+                        std::cerr
+                            << "Configuration parsed for \n\t" << entry.first
+                            << "\n"
+                            << "with\n"
+                            << "\tName: " << name << "\n"
+                            << "\tInterface: " << interface << "\n"
+                            << "\tBus: " << static_cast<int>(busId) << "\n"
+                            << "\tAddr: " << static_cast<int>(addr) << "\n"
+                            << "\tPid: " << pid << "\n"
+                            << "\n"
+                            << "\tReg: " << static_cast<int>(tempReg) << "\n"
+                            << "\tClass: " << sensorType << "\n";
+                    }
+
+                    auto& sensor = sensors[name];
+
+                    sensor = std::make_unique<DIMMSensor>(
+                        dbusConnection, io, name, sensorType, interface,
+                        pathPair.first, objectServer,
+                        std::move(sensorThresholds), busId, addr, pid,
+                        tempReg, max, min, adcSel);
+
+                    sensor->init();
+                }
+            }
+        },
+        entityManagerName, "/", "org.freedesktop.DBus.ObjectManager",
+        "GetManagedObjects");
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.DIMMSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+
+    io.post([&]() { createSensors(io, objectServer, sensors, systemBus); });
+
+    boost::asio::deadline_timer configTimer(io);
+
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message&) {
+            configTimer.expires_from_now(boost::posix_time::seconds(1));
+            // create a timer because normally multiple properties change
+            configTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return; // we're being canceled
+                }
+                // config timer error
+                if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus);
+                if (sensors.empty())
+                {
+                    std::cout << "Configuration not detected\n";
+                }
+            });
+        };
+
+    sdbusplus::bus::match::match configMatch(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',member='PropertiesChanged',"
+        "path_namespace='" +
+            std::string(inventoryPath) +
+            "',"
+            "arg0namespace='" +
+            configInterface + "'",
+        eventHandler);
+
+    setupManufacturingModeMatch(*systemBus);
+    io.run();
+    return 0;
+}
diff --git a/src/meson.build b/src/meson.build
index 0fe5f563..a4e826f6 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -185,3 +185,18 @@ if get_option('external').enabled()
         install: true,
     )
 endif
+
+if get_option('dimm').enabled()
+    executable(
+        'dimmsensor',
+        'DIMMSensor.cpp',
+        dependencies: [
+            default_deps,
+            thresholds_dep,
+            utils_dep,
+        ],
+        implicit_include_directories: false,
+        include_directories: '../include',
+        install: true,
+    )
+endif
-- 
2.17.1

