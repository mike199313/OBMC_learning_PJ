From 4e40c73ba4c8d6692d2aa1f83b80c24abdc2d85d Mon Sep 17 00:00:00 2001
From: invalid_git config <unknown@unknown>
Date: Mon, 1 Aug 2022 08:46:50 +0000
Subject: [PATCH] Add pmbus driver for MAX16550

---
 .../boot/dts/nuvoton/nuvoton-npcm845-scm.dts  |   4 +
 drivers/hwmon/pmbus/Kconfig                   |   9 ++
 drivers/hwmon/pmbus/Makefile                  |   1 +
 drivers/hwmon/pmbus/max16550.c                | 126 ++++++++++++++++++
 4 files changed, 140 insertions(+)
 create mode 100644 drivers/hwmon/pmbus/max16550.c

diff --git a/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-scm.dts b/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-scm.dts
index 3883eef7cc5c..ba8a0bdb38c9 100644
--- a/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-scm.dts
+++ b/arch/arm64/boot/dts/nuvoton/nuvoton-npcm845-scm.dts
@@ -879,6 +879,10 @@
 				compatible = "ti,tmp461";
 				reg = <0x4c>;
 			};
+			max16550@42 {
+				compatible = "max16550";
+				reg = <0x42>;
+			};
 		};
 	};
 };
diff --git a/drivers/hwmon/pmbus/Kconfig b/drivers/hwmon/pmbus/Kconfig
index a25faf69fce3..a4c1b493f0aa 100644
--- a/drivers/hwmon/pmbus/Kconfig
+++ b/drivers/hwmon/pmbus/Kconfig
@@ -157,6 +157,15 @@ config SENSORS_MAX16064
 	  This driver can also be built as a module. If so, the module will
 	  be called max16064.
 
+config SENSORS_MAX16550
+	tristate "Maxim MAX16550"
+	help
+	  If you say yes here you get hardware monitoring support for Maxim
+	  MAX16550.
+
+	  This driver can also be built as a module. If so, the module will
+	  be called max16550.
+
 config SENSORS_MAX16601
 	tristate "Maxim MAX16601"
 	help
diff --git a/drivers/hwmon/pmbus/Makefile b/drivers/hwmon/pmbus/Makefile
index 4c97ad0bd791..92f6780f7a34 100644
--- a/drivers/hwmon/pmbus/Makefile
+++ b/drivers/hwmon/pmbus/Makefile
@@ -18,6 +18,7 @@ obj-$(CONFIG_SENSORS_LM25066)	+= lm25066.o
 obj-$(CONFIG_SENSORS_LTC2978)	+= ltc2978.o
 obj-$(CONFIG_SENSORS_LTC3815)	+= ltc3815.o
 obj-$(CONFIG_SENSORS_MAX16064)	+= max16064.o
+obj-$(CONFIG_SENSORS_MAX16550)	+= max16550.o
 obj-$(CONFIG_SENSORS_MAX16601)	+= max16601.o
 obj-$(CONFIG_SENSORS_MAX20730)	+= max20730.o
 obj-$(CONFIG_SENSORS_MAX20751)	+= max20751.o
diff --git a/drivers/hwmon/pmbus/max16550.c b/drivers/hwmon/pmbus/max16550.c
new file mode 100644
index 000000000000..72c4256c49ef
--- /dev/null
+++ b/drivers/hwmon/pmbus/max16550.c
@@ -0,0 +1,126 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Hardware monitoring driver for Maxim MAX16550
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/err.h>
+#include <linux/i2c.h>
+#include "pmbus.h"
+
+#define MAX16550_MFR_VOUT_PEAK		0xfd
+#define MAX16550_MFR_TEMPERATURE_PEAK	0xd4
+
+static int max16550_read_word_data(struct i2c_client *client, int page,
+				   int phase, int reg)
+{
+	int ret;
+
+	switch (reg) {
+	case PMBUS_VIRT_READ_VOUT_MAX:
+		ret = pmbus_read_word_data(client, page, phase,
+					   MAX16550_MFR_VOUT_PEAK);
+		break;
+	case PMBUS_VIRT_READ_TEMP_MAX:
+		ret = pmbus_read_word_data(client, page, phase,
+					   MAX16550_MFR_TEMPERATURE_PEAK);
+		break;
+	case PMBUS_VIRT_RESET_VOUT_HISTORY:
+	case PMBUS_VIRT_RESET_TEMP_HISTORY:
+		ret = 0;
+		break;
+	default:
+		ret = -ENODATA;
+		break;
+	}
+	return ret;
+}
+
+static int max16550_write_word_data(struct i2c_client *client, int page,
+				    int reg, u16 word)
+{
+	int ret;
+
+	switch (reg) {
+	case PMBUS_VIRT_RESET_VOUT_HISTORY:
+		ret = pmbus_write_word_data(client, page,
+					    MAX16550_MFR_VOUT_PEAK, 0);
+		break;
+	case PMBUS_VIRT_RESET_TEMP_HISTORY:
+		ret = pmbus_write_word_data(client, page,
+					    MAX16550_MFR_TEMPERATURE_PEAK,
+					    0xffff);
+		break;
+	default:
+		ret = -ENODATA;
+		break;
+	}
+	return ret;
+}
+
+static struct pmbus_driver_info max16550_info = {
+	.pages = 1,
+	.format[PSC_VOLTAGE_IN] = direct,
+	.m[PSC_VOLTAGE_IN] = 7578,
+	.b[PSC_VOLTAGE_IN] = 0,
+	.R[PSC_VOLTAGE_IN] = -2,
+
+	.format[PSC_VOLTAGE_OUT] = direct,
+	.m[PSC_VOLTAGE_OUT] = 7578,
+	.b[PSC_VOLTAGE_OUT] = 0,
+	.R[PSC_VOLTAGE_OUT] = -2,
+
+	.format[PSC_TEMPERATURE] = direct,
+	.m[PSC_TEMPERATURE] = 199,
+	.b[PSC_TEMPERATURE] = 7046,
+	.R[PSC_TEMPERATURE] = -2,
+
+	.format[PSC_CURRENT_OUT] = direct,
+	.m[PSC_POWER] = 34416,
+	.b[PSC_POWER] = -4300,
+	.R[PSC_POWER] = -3,
+
+	.format[PSC_POWER] = direct,
+	.m[PSC_POWER] = 13425,
+	.b[PSC_POWER] = -9100,
+	.R[PSC_POWER] = -2,
+
+	.func[0] = PMBUS_HAVE_VIN | PMBUS_HAVE_IIN |
+			PMBUS_HAVE_VOUT | PMBUS_HAVE_STATUS_VOUT |
+			PMBUS_HAVE_IOUT | PMBUS_HAVE_STATUS_IOUT |
+			PMBUS_HAVE_TEMP | PMBUS_HAVE_STATUS_TEMP |
+			PMBUS_HAVE_PIN  | PMBUS_HAVE_STATUS_INPUT,
+	.read_word_data = max16550_read_word_data,
+	.write_word_data = max16550_write_word_data,
+};
+
+static int max16550_probe(struct i2c_client *client)
+{
+	return pmbus_do_probe(client, &max16550_info);
+}
+
+static const struct i2c_device_id max16550_id[] = {
+	{"max16550", 0},
+	{}
+};
+
+MODULE_DEVICE_TABLE(i2c, max16550_id);
+
+/* This is the driver that will be inserted */
+static struct i2c_driver max16550_driver = {
+	.driver = {
+		   .name = "max16550",
+		   },
+	.probe_new = max16550_probe,
+	.remove = pmbus_do_remove,
+	.id_table = max16550_id,
+};
+
+module_i2c_driver(max16550_driver);
+
+MODULE_AUTHOR("Brian Ma");
+MODULE_DESCRIPTION("PMBus driver for Maxim MAX16550");
+MODULE_LICENSE("GPL");
-- 
2.17.1

