From 4c62c59059073575ef0d5fe71e594451aedd30b1 Mon Sep 17 00:00:00 2001
From: Stanley Chu <yschu@nuvoton.com>
Date: Fri, 28 Jan 2022 16:37:32 +0800
Subject: [PATCH] add oem command get bios post code

Signed-off-by: Stanley Chu <yschu@nuvoton.com>
---
 Makefile.am     |  1 +
 oemcommands.cpp | 50 +++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 51 insertions(+)
 create mode 100644 oemcommands.cpp

diff --git a/Makefile.am b/Makefile.am
index c48745c..51f0c10 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -114,6 +114,7 @@ libipmi20_la_SOURCES = \
 	user_channel/channelcommands.cpp \
 	smbiosmdrv2handler.cpp \
 	bridgingcommands.cpp \
+	oemcommands.cpp \
 	$(libipmi20_la_TRANSPORTOEM) \
 	$(libipmi20_BUILT_LIST)
 
diff --git a/oemcommands.cpp b/oemcommands.cpp
new file mode 100644
index 0000000..a549e8e
--- /dev/null
+++ b/oemcommands.cpp
@@ -0,0 +1,50 @@
+#include <ipmid/api.hpp>
+#include <ipmid/utils.hpp>
+#include <phosphor-logging/elog-errors.hpp>
+#include <phosphor-logging/log.hpp>
+#include <string>
+
+constexpr uint8_t cmdOemGetPostCode = 0x73;
+
+using namespace phosphor::logging;
+using postcode_t = std::tuple<uint64_t, std::vector<uint8_t>>;
+
+void register_netfn_oem_functions() __attribute__((constructor));
+
+ipmi::RspType<uint8_t> ipmiOemPostCodeHandler(ipmi::Context::ptr& ctx, uint8_t type)
+{
+    auto conn = getSdBus();
+
+    log<level::INFO>("ipmiOemPostCodeHandler");
+    try
+    {
+        auto method = conn->new_method_call(
+            "xyz.openbmc_project.State.Boot.Raw", "/xyz/openbmc_project/state/boot/raw0",
+            "org.freedesktop.DBus.Properties", "Get");
+
+        method.append("xyz.openbmc_project.State.Boot.Raw", "Value");
+
+        auto reply = conn->call(method);
+    	std::variant<postcode_t> postCode;
+    	reply.read(postCode);
+
+        return ipmi::responseSuccess(std::get<0>(std::get<postcode_t>(postCode)));
+    }
+    catch (std::exception& e)
+    {
+        log<level::ERR>("ipmiOemPostCodeHandler err");
+        return ipmi::responseUnspecifiedError();
+    }
+
+    return ipmi::responseSuccess();
+}
+
+void register_netfn_oem_functions()
+{
+
+    // Get Post code
+    ipmi::registerHandler(ipmi::prioOpenBmcBase, ipmi::netFnOemTwo,
+                          cmdOemGetPostCode, ipmi::Privilege::User,
+                          ipmiOemPostCodeHandler);
+    return;
+}
-- 
2.17.1

